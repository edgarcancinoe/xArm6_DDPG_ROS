# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveit_msgs/MotionSequenceRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import sensor_msgs.msg
import shape_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class MotionSequenceRequest(genpy.Message):
  _md5sum = "5a79e4928bfada4fbc57882982ac6e58"
  _type = "moveit_msgs/MotionSequenceRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# List of motion planning request with a blend_radius for each.
# In the response of the planner all of these will be executable as one sequence.
MotionSequenceItem[] items

================================================================================
MSG: moveit_msgs/MotionSequenceItem
# The plan request for this item.
# It is the planning request for this segment of the sequence, as if it were a solitary motion.
MotionPlanRequest req

# To blend between sequence items, the motion may be smoothed using a circular motion.
# The blend radius of the circle between this and the next command, where 0 means no blending.
float64 blend_radius

================================================================================
MSG: moveit_msgs/MotionPlanRequest
# This service contains the definition for a request to the motion
# planner and the output it provides

# Parameters for the workspace that the planner should work inside
WorkspaceParameters workspace_parameters

# Starting state updates. If certain joints should be considered
# at positions other than the current ones, these positions should
# be set here
RobotState start_state

# The possible goal states for the model to plan for. Each element of
# the array defines a goal region. The goal is achieved
# if the constraints for a particular region are satisfied
Constraints[] goal_constraints

# No state at any point along the path in the produced motion plan will violate these constraints (this applies to all points, not just waypoints)
Constraints path_constraints

# The constraints the resulting trajectory must satisfy
TrajectoryConstraints trajectory_constraints

# A set of trajectories that may be used as reference or initial trajectories for (typically optimization-based) planners
# These trajectories do not override start_state or goal_constraints
GenericTrajectory[] reference_trajectories

# The name of the planning pipeline to use. If no name is specified,
# the configured planning pipeline will be used
string pipeline_id

# The name of the planning algorithm to use. If no name is specified,
# the default planner of the planning pipeline will be used
string planner_id

# The name of the group of joints on which this planner is operating
string group_name

# The number of times this plan is to be computed. Shortest solution
# will be reported.
int32 num_planning_attempts

# The maximum amount of time the motion planner is allowed to plan for (in seconds)
float64 allowed_planning_time

# Scaling factors for optionally reducing the maximum joint velocities and
# accelerations.  Allowed values are in (0,1].  The maximum joint velocity and
# acceleration specified in the robot model are multiplied by thier respective
# factors.  If either are outside their valid ranges (importantly, this
# includes being set to 0.0), the factor is set to the default value of 1.0
# internally (i.e., maximum joint velocity or maximum joint acceleration).
float64 max_velocity_scaling_factor
float64 max_acceleration_scaling_factor

# Maximum cartesian speed for the given link.
# If max_cartesian_speed <= 0 the trajectory is not modified.
# These fields require the following planning request adapter: default_planner_request_adapters/LimitMaxCartesianLinkSpeed
string cartesian_speed_limited_link
float64 max_cartesian_speed # m/s

================================================================================
MSG: moveit_msgs/WorkspaceParameters
# This message contains a set of parameters useful in
# setting up the volume (a box) in which the robot is allowed to move.
# This is useful only when planning for mobile parts of
# the robot as well.

# Define the frame of reference for the box corners
Header header

# The minumum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 min_corner

# The maximum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 max_corner

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# A header, used for interpreting the poses
Header header

# The object's pose relative to the header frame.
# The shapes and subframe poses are defined relative to this pose.
geometry_msgs/Pose pose

# The id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# The collision geometries associated with the object.
# Their poses are with respect to the object's pose

# Solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# Meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Named subframes on the object. Use these to define points of interest on the object that you want
# to plan with (e.g. "tip", "spout", "handle"). The id of the object will be prepended to the subframe.
# If an object with the id "screwdriver" and a subframe "tip" is in the scene, you can use the frame
# "screwdriver/tip" for planning.
# The length of the subframe_names and subframe_poses has to be identical.
string[] subframe_names
geometry_msgs/Pose[] subframe_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the object does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: moveit_msgs/Constraints
# This message contains a list of motion planning constraints.
# All constraints must be satisfied for a goal to be considered valid

string name

JointConstraint[] joint_constraints

PositionConstraint[] position_constraints

OrientationConstraint[] orientation_constraints

VisibilityConstraint[] visibility_constraints

================================================================================
MSG: moveit_msgs/JointConstraint
# Constrain the position of a joint to be within a certain bound
string joint_name

# the bound to be achieved is [position - tolerance_below, position + tolerance_above]
float64 position
float64 tolerance_above
float64 tolerance_below

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/PositionConstraint
# This message contains the definition of a position constraint.

Header header

# The robot link this constraint refers to
string link_name

# The offset (in the link frame) for the target point on the link we are planning for
geometry_msgs/Vector3 target_point_offset

# The volume this constraint refers to
BoundingVolume constraint_region

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/BoundingVolume
# Define a volume in 3D

# A set of solid geometric primitives that make up the volume to define (as a union)
shape_msgs/SolidPrimitive[] primitives

# The poses at which the primitives are located
geometry_msgs/Pose[] primitive_poses

# In addition to primitives, meshes can be specified to add to the bounding volume (again, as union)
shape_msgs/Mesh[] meshes

# The poses at which the meshes are located
geometry_msgs/Pose[] mesh_poses

================================================================================
MSG: moveit_msgs/OrientationConstraint
# This message contains the definition of an orientation constraint.

Header header

# The desired orientation of the robot link specified as a quaternion
geometry_msgs/Quaternion orientation

# The robot link this constraint refers to
string link_name

# Tolerance on the three vector components of the orientation error (optional)
float64 absolute_x_axis_tolerance
float64 absolute_y_axis_tolerance
float64 absolute_z_axis_tolerance

# Defines how the orientation error is calculated
# The error is compared to the tolerance defined above
uint8 parameterization

# The different options for the orientation error parameterization
# - Intrinsic xyz Euler angles (default value)
uint8 XYZ_EULER_ANGLES=0
# - A rotation vector. This is similar to the angle-axis representation,
# but the magnitude of the vector represents the rotation angle.
uint8 ROTATION_VECTOR=1

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/VisibilityConstraint
# The constraint is useful to maintain visibility to a disc (the target) in a particular frame.
# This disc forms the base of a visibiliy cone whose tip is at the origin of the sensor.
# Maintaining visibility is done by ensuring the robot does not obstruct the visibility cone.
# Note:
# This constraint does NOT enforce minimum or maximum distances between the sensor
# and the target, nor does it enforce the target to be in the field of view of
# the sensor. A PositionConstraint can (and probably should) be used for such purposes.

# The radius of the disc that should be maintained visible
float64 target_radius

# The pose of the disc; as the robot moves, the pose of the disc may change as well
# This can be in the frame of a particular robot link, for example
geometry_msgs/PoseStamped target_pose

# From the sensor origin towards the target, the disc forms a visibility cone
# This cone is approximated using many sides. For example, when using 4 sides,
# that in fact makes the visibility region be a pyramid.
# This value should always be 3 or more.
int32 cone_sides

# The pose in which visibility is to be maintained.
# The frame id should represent the robot link to which the sensor is attached.
# It is assumed the sensor can look directly at the target, in any direction.
# This assumption is usually not true, but additional PositionConstraints
# can resolve this issue.
geometry_msgs/PoseStamped sensor_pose

# Even though the disc is maintained visible, the visibility cone can be very small
# because of the orientation of the disc with respect to the sensor. It is possible
# for example to view the disk almost from a side, in which case the visibility cone
# can end up having close to 0 volume. The view angle is defined to be the angle between
# the normal to the visibility disc and the direction vector from the sensor origin.
# The value below represents the minimum desired view angle. For a perfect view,
# this value will be 0 (the two vectors are exact opposites). For a completely obstructed view
# this value will be Pi/2 (the vectors are perpendicular). This value defined below
# is the maximum view angle to be maintained. This should be a value in the open interval
# (0, Pi/2). If 0 is set, the view angle is NOT enforced.
float64 max_view_angle

# This angle is used similarly to max_view_angle but limits the maximum angle
# between the sensor origin direction vector and the axis that connects the
# sensor origin to the target frame origin. The value is again in the range (0, Pi/2)
# and is NOT enforced if set to 0.
float64 max_range_angle

# The axis that is assumed to indicate the direction of view for the sensor
# X = 2, Y = 1, Z = 0
uint8 SENSOR_Z=0
uint8 SENSOR_Y=1
uint8 SENSOR_X=2
uint8 sensor_view_direction

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: moveit_msgs/TrajectoryConstraints
# The array of constraints to consider along the trajectory
Constraints[] constraints

================================================================================
MSG: moveit_msgs/GenericTrajectory
# A generic trajectory message that may either encode a joint- or cartesian-space trajectory, or both
# Trajectories encoded in this message are considered semantically equivalent
Header header
trajectory_msgs/JointTrajectory[] joint_trajectory
moveit_msgs/CartesianTrajectory[] cartesian_trajectory

================================================================================
MSG: moveit_msgs/CartesianTrajectory
# This message describes the trajectory of a tracked frame in task-space
Header header

# The name of the Cartesian frame being tracked with respect to the base frame provided in header.frame_id
string tracked_frame

CartesianTrajectoryPoint[] points

================================================================================
MSG: moveit_msgs/CartesianTrajectoryPoint
# The definition of a cartesian point in a trajectory. Defines the cartesian state of the point and it's time,
# following the pattern of the JointTrajectory message
CartesianPoint point

duration time_from_start

================================================================================
MSG: moveit_msgs/CartesianPoint
# This message defines a point in a cartesian trajectory
geometry_msgs/Pose pose
geometry_msgs/Twist velocity
geometry_msgs/Accel acceleration

================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular
"""
  __slots__ = ['items']
  _slot_types = ['moveit_msgs/MotionSequenceItem[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       items

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotionSequenceRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.items is None:
        self.items = []
    else:
      self.items = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.items)
      buff.write(_struct_I.pack(length))
      for val1 in self.items:
        _v1 = val1.req
        _v2 = _v1.workspace_parameters
        _v3 = _v2.header
        _x = _v3.seq
        buff.write(_get_struct_I().pack(_x))
        _v4 = _v3.stamp
        _x = _v4
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v3.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v5 = _v2.min_corner
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v2.max_corner
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = _v1.start_state
        _v8 = _v7.joint_state
        _v9 = _v8.header
        _x = _v9.seq
        buff.write(_get_struct_I().pack(_x))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v8.name)
        buff.write(_struct_I.pack(length))
        for val5 in _v8.name:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v8.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v8.position))
        length = len(_v8.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v8.velocity))
        length = len(_v8.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v8.effort))
        _v11 = _v7.multi_dof_joint_state
        _v12 = _v11.header
        _x = _v12.seq
        buff.write(_get_struct_I().pack(_x))
        _v13 = _v12.stamp
        _x = _v13
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v12.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v11.joint_names)
        buff.write(_struct_I.pack(length))
        for val5 in _v11.joint_names:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v11.transforms)
        buff.write(_struct_I.pack(length))
        for val5 in _v11.transforms:
          _v14 = val5.translation
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v15 = val5.rotation
          _x = _v15
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v11.twist)
        buff.write(_struct_I.pack(length))
        for val5 in _v11.twist:
          _v16 = val5.linear
          _x = _v16
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v17 = val5.angular
          _x = _v17
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v11.wrench)
        buff.write(_struct_I.pack(length))
        for val5 in _v11.wrench:
          _v18 = val5.force
          _x = _v18
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v19 = val5.torque
          _x = _v19
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v7.attached_collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v7.attached_collision_objects:
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v20 = val4.object
          _v21 = _v20.header
          _x = _v21.seq
          buff.write(_get_struct_I().pack(_x))
          _v22 = _v21.stamp
          _x = _v22
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v21.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v23 = _v20.pose
          _v24 = _v23.position
          _x = _v24
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v25 = _v23.orientation
          _x = _v25
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v20.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v26 = _v20.type
          _x = _v26.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v26.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v20.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.dimensions))
          length = len(_v20.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.primitive_poses:
            _v27 = val6.position
            _x = _v27
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v28 = val6.orientation
            _x = _v28
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v20.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(_get_struct_3I().pack(*val7.vertex_indices))
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v20.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.mesh_poses:
            _v29 = val6.position
            _x = _v29
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v30 = val6.orientation
            _x = _v30
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v20.planes)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.planes:
            buff.write(_get_struct_4d().pack(*val6.coef))
          length = len(_v20.plane_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.plane_poses:
            _v31 = val6.position
            _x = _v31
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v32 = val6.orientation
            _x = _v32
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v20.subframe_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.subframe_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v20.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.subframe_poses:
            _v33 = val6.position
            _x = _v33
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v34 = val6.orientation
            _x = _v34
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v20.operation
          buff.write(_get_struct_b().pack(_x))
          length = len(val4.touch_links)
          buff.write(_struct_I.pack(length))
          for val5 in val4.touch_links:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
          _v35 = val4.detach_posture
          _v36 = _v35.header
          _x = _v36.seq
          buff.write(_get_struct_I().pack(_x))
          _v37 = _v36.stamp
          _x = _v37
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v36.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v35.joint_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v35.joint_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v35.points)
          buff.write(_struct_I.pack(length))
          for val6 in _v35.points:
            length = len(val6.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.positions))
            length = len(val6.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.velocities))
            length = len(val6.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.accelerations))
            length = len(val6.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.effort))
            _v38 = val6.time_from_start
            _x = _v38
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        _x = _v7.is_diff
        buff.write(_get_struct_B().pack(_x))
        length = len(_v1.goal_constraints)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.goal_constraints:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val3.joint_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.joint_constraints:
            _x = val4.joint_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
          length = len(val3.position_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.position_constraints:
            _v39 = val4.header
            _x = _v39.seq
            buff.write(_get_struct_I().pack(_x))
            _v40 = _v39.stamp
            _x = _v40
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v39.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v41 = val4.target_point_offset
            _x = _v41
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v42 = val4.constraint_region
            length = len(_v42.primitives)
            buff.write(_struct_I.pack(length))
            for val6 in _v42.primitives:
              _x = val6.type
              buff.write(_get_struct_B().pack(_x))
              length = len(val6.dimensions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val6.dimensions))
            length = len(_v42.primitive_poses)
            buff.write(_struct_I.pack(length))
            for val6 in _v42.primitive_poses:
              _v43 = val6.position
              _x = _v43
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v44 = val6.orientation
              _x = _v44
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            length = len(_v42.meshes)
            buff.write(_struct_I.pack(length))
            for val6 in _v42.meshes:
              length = len(val6.triangles)
              buff.write(_struct_I.pack(length))
              for val7 in val6.triangles:
                buff.write(_get_struct_3I().pack(*val7.vertex_indices))
              length = len(val6.vertices)
              buff.write(_struct_I.pack(length))
              for val7 in val6.vertices:
                _x = val7
                buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            length = len(_v42.mesh_poses)
            buff.write(_struct_I.pack(length))
            for val6 in _v42.mesh_poses:
              _v45 = val6.position
              _x = _v45
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v46 = val6.orientation
              _x = _v46
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.weight
            buff.write(_get_struct_d().pack(_x))
          length = len(val3.orientation_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.orientation_constraints:
            _v47 = val4.header
            _x = _v47.seq
            buff.write(_get_struct_I().pack(_x))
            _v48 = _v47.stamp
            _x = _v48
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v47.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v49 = val4.orientation
            _x = _v49
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
          length = len(val3.visibility_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.visibility_constraints:
            _x = val4.target_radius
            buff.write(_get_struct_d().pack(_x))
            _v50 = val4.target_pose
            _v51 = _v50.header
            _x = _v51.seq
            buff.write(_get_struct_I().pack(_x))
            _v52 = _v51.stamp
            _x = _v52
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v51.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v53 = _v50.pose
            _v54 = _v53.position
            _x = _v54
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v55 = _v53.orientation
            _x = _v55
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.cone_sides
            buff.write(_get_struct_i().pack(_x))
            _v56 = val4.sensor_pose
            _v57 = _v56.header
            _x = _v57.seq
            buff.write(_get_struct_I().pack(_x))
            _v58 = _v57.stamp
            _x = _v58
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v57.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v59 = _v56.pose
            _v60 = _v59.position
            _x = _v60
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v61 = _v59.orientation
            _x = _v61
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4
            buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _v62 = _v1.path_constraints
        _x = _v62.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v62.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v62.joint_constraints:
          _x = val4.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(_v62.position_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v62.position_constraints:
          _v63 = val4.header
          _x = _v63.seq
          buff.write(_get_struct_I().pack(_x))
          _v64 = _v63.stamp
          _x = _v64
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v63.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v65 = val4.target_point_offset
          _x = _v65
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v66 = val4.constraint_region
          length = len(_v66.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v66.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.dimensions))
          length = len(_v66.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v66.primitive_poses:
            _v67 = val6.position
            _x = _v67
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v68 = val6.orientation
            _x = _v68
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v66.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v66.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(_get_struct_3I().pack(*val7.vertex_indices))
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v66.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v66.mesh_poses:
            _v69 = val6.position
            _x = _v69
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v70 = val6.orientation
            _x = _v70
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        length = len(_v62.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v62.orientation_constraints:
          _v71 = val4.header
          _x = _v71.seq
          buff.write(_get_struct_I().pack(_x))
          _v72 = _v71.stamp
          _x = _v72
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v71.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v73 = val4.orientation
          _x = _v73
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
        length = len(_v62.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v62.visibility_constraints:
          _x = val4.target_radius
          buff.write(_get_struct_d().pack(_x))
          _v74 = val4.target_pose
          _v75 = _v74.header
          _x = _v75.seq
          buff.write(_get_struct_I().pack(_x))
          _v76 = _v75.stamp
          _x = _v76
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v75.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v77 = _v74.pose
          _v78 = _v77.position
          _x = _v78
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v79 = _v77.orientation
          _x = _v79
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.cone_sides
          buff.write(_get_struct_i().pack(_x))
          _v80 = val4.sensor_pose
          _v81 = _v80.header
          _x = _v81.seq
          buff.write(_get_struct_I().pack(_x))
          _v82 = _v81.stamp
          _x = _v82
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v81.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v83 = _v80.pose
          _v84 = _v83.position
          _x = _v84
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v85 = _v83.orientation
          _x = _v85
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _v86 = _v1.trajectory_constraints
        length = len(_v86.constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v86.constraints:
          _x = val4.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val4.joint_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.joint_constraints:
            _x = val5.joint_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5
            buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
          length = len(val4.position_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.position_constraints:
            _v87 = val5.header
            _x = _v87.seq
            buff.write(_get_struct_I().pack(_x))
            _v88 = _v87.stamp
            _x = _v88
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v87.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v89 = val5.target_point_offset
            _x = _v89
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v90 = val5.constraint_region
            length = len(_v90.primitives)
            buff.write(_struct_I.pack(length))
            for val7 in _v90.primitives:
              _x = val7.type
              buff.write(_get_struct_B().pack(_x))
              length = len(val7.dimensions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val7.dimensions))
            length = len(_v90.primitive_poses)
            buff.write(_struct_I.pack(length))
            for val7 in _v90.primitive_poses:
              _v91 = val7.position
              _x = _v91
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v92 = val7.orientation
              _x = _v92
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            length = len(_v90.meshes)
            buff.write(_struct_I.pack(length))
            for val7 in _v90.meshes:
              length = len(val7.triangles)
              buff.write(_struct_I.pack(length))
              for val8 in val7.triangles:
                buff.write(_get_struct_3I().pack(*val8.vertex_indices))
              length = len(val7.vertices)
              buff.write(_struct_I.pack(length))
              for val8 in val7.vertices:
                _x = val8
                buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            length = len(_v90.mesh_poses)
            buff.write(_struct_I.pack(length))
            for val7 in _v90.mesh_poses:
              _v93 = val7.position
              _x = _v93
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v94 = val7.orientation
              _x = _v94
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.weight
            buff.write(_get_struct_d().pack(_x))
          length = len(val4.orientation_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.orientation_constraints:
            _v95 = val5.header
            _x = _v95.seq
            buff.write(_get_struct_I().pack(_x))
            _v96 = _v95.stamp
            _x = _v96
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v95.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v97 = val5.orientation
            _x = _v97
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5
            buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
          length = len(val4.visibility_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.visibility_constraints:
            _x = val5.target_radius
            buff.write(_get_struct_d().pack(_x))
            _v98 = val5.target_pose
            _v99 = _v98.header
            _x = _v99.seq
            buff.write(_get_struct_I().pack(_x))
            _v100 = _v99.stamp
            _x = _v100
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v99.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v101 = _v98.pose
            _v102 = _v101.position
            _x = _v102
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v103 = _v101.orientation
            _x = _v103
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.cone_sides
            buff.write(_get_struct_i().pack(_x))
            _v104 = val5.sensor_pose
            _v105 = _v104.header
            _x = _v105.seq
            buff.write(_get_struct_I().pack(_x))
            _v106 = _v105.stamp
            _x = _v106
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v105.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v107 = _v104.pose
            _v108 = _v107.position
            _x = _v108
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v109 = _v107.orientation
            _x = _v109
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5
            buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        length = len(_v1.reference_trajectories)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.reference_trajectories:
          _v110 = val3.header
          _x = _v110.seq
          buff.write(_get_struct_I().pack(_x))
          _v111 = _v110.stamp
          _x = _v111
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v110.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val3.joint_trajectory)
          buff.write(_struct_I.pack(length))
          for val4 in val3.joint_trajectory:
            _v112 = val4.header
            _x = _v112.seq
            buff.write(_get_struct_I().pack(_x))
            _v113 = _v112.stamp
            _x = _v113
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v112.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            length = len(val4.joint_names)
            buff.write(_struct_I.pack(length))
            for val5 in val4.joint_names:
              length = len(val5)
              if python3 or type(val5) == unicode:
                val5 = val5.encode('utf-8')
                length = len(val5)
              buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
            length = len(val4.points)
            buff.write(_struct_I.pack(length))
            for val5 in val4.points:
              length = len(val5.positions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val5.positions))
              length = len(val5.velocities)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val5.velocities))
              length = len(val5.accelerations)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val5.accelerations))
              length = len(val5.effort)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val5.effort))
              _v114 = val5.time_from_start
              _x = _v114
              buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          length = len(val3.cartesian_trajectory)
          buff.write(_struct_I.pack(length))
          for val4 in val3.cartesian_trajectory:
            _v115 = val4.header
            _x = _v115.seq
            buff.write(_get_struct_I().pack(_x))
            _v116 = _v115.stamp
            _x = _v116
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v115.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4.tracked_frame
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            length = len(val4.points)
            buff.write(_struct_I.pack(length))
            for val5 in val4.points:
              _v117 = val5.point
              _v118 = _v117.pose
              _v119 = _v118.position
              _x = _v119
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v120 = _v118.orientation
              _x = _v120
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
              _v121 = _v117.velocity
              _v122 = _v121.linear
              _x = _v122
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v123 = _v121.angular
              _x = _v123
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v124 = _v117.acceleration
              _v125 = _v124.linear
              _x = _v125
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v126 = _v124.angular
              _x = _v126
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v127 = val5.time_from_start
              _x = _v127
              buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = _v1.pipeline_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.planner_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.group_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1
        buff.write(_get_struct_i3d().pack(_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor, _x.max_acceleration_scaling_factor))
        _x = _v1.cartesian_speed_limited_link
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.max_cartesian_speed
        buff.write(_get_struct_d().pack(_x))
        _x = val1.blend_radius
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.items is None:
        self.items = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.items = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.MotionSequenceItem()
        _v128 = val1.req
        _v129 = _v128.workspace_parameters
        _v130 = _v129.header
        start = end
        end += 4
        (_v130.seq,) = _get_struct_I().unpack(str[start:end])
        _v131 = _v130.stamp
        _x = _v131
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v130.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v130.frame_id = str[start:end]
        _v132 = _v129.min_corner
        _x = _v132
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v133 = _v129.max_corner
        _x = _v133
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v134 = _v128.start_state
        _v135 = _v134.joint_state
        _v136 = _v135.header
        start = end
        end += 4
        (_v136.seq,) = _get_struct_I().unpack(str[start:end])
        _v137 = _v136.stamp
        _x = _v137
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v136.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v136.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v135.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v135.name.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v135.position = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v135.velocity = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v135.effort = s.unpack(str[start:end])
        _v138 = _v134.multi_dof_joint_state
        _v139 = _v138.header
        start = end
        end += 4
        (_v139.seq,) = _get_struct_I().unpack(str[start:end])
        _v140 = _v139.stamp
        _x = _v140
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v139.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v139.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v138.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v138.joint_names.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v138.transforms = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Transform()
          _v141 = val5.translation
          _x = _v141
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v142 = val5.rotation
          _x = _v142
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v138.transforms.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v138.twist = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Twist()
          _v143 = val5.linear
          _x = _v143
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v144 = val5.angular
          _x = _v144
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v138.twist.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v138.wrench = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Wrench()
          _v145 = val5.force
          _x = _v145
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v146 = val5.torque
          _x = _v146
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v138.wrench.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v134.attached_collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AttachedCollisionObject()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v147 = val4.object
          _v148 = _v147.header
          start = end
          end += 4
          (_v148.seq,) = _get_struct_I().unpack(str[start:end])
          _v149 = _v148.stamp
          _x = _v149
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v148.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v148.frame_id = str[start:end]
          _v150 = _v147.pose
          _v151 = _v150.position
          _x = _v151
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v152 = _v150.orientation
          _x = _v152
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v147.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v147.id = str[start:end]
          _v153 = _v147.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v153.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v153.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v153.db = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v153.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v147.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = s.unpack(str[start:end])
            _v147.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v147.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v154 = val6.position
            _x = _v154
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v155 = val6.orientation
            _x = _v155
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v147.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v147.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v147.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v147.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v156 = val6.position
            _x = _v156
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v157 = val6.orientation
            _x = _v157
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v147.mesh_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v147.planes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val6.coef = _get_struct_4d().unpack(str[start:end])
            _v147.planes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v147.plane_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v158 = val6.position
            _x = _v158
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v159 = val6.orientation
            _x = _v159
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v147.plane_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v147.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v147.subframe_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v147.subframe_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v160 = val6.position
            _x = _v160
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v161 = val6.orientation
            _x = _v161
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v147.subframe_poses.append(val6)
          start = end
          end += 1
          (_v147.operation,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.touch_links = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5 = str[start:end]
            val4.touch_links.append(val5)
          _v162 = val4.detach_posture
          _v163 = _v162.header
          start = end
          end += 4
          (_v163.seq,) = _get_struct_I().unpack(str[start:end])
          _v164 = _v163.stamp
          _x = _v164
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v163.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v163.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v162.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v162.joint_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v162.points = []
          for i in range(0, length):
            val6 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.positions = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.velocities = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.accelerations = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.effort = s.unpack(str[start:end])
            _v165 = val6.time_from_start
            _x = _v165
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v162.points.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v134.attached_collision_objects.append(val4)
        start = end
        end += 1
        (_v134.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v134.is_diff = bool(_v134.is_diff)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v128.goal_constraints = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.Constraints()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.joint_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.JointConstraint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.joint_name = str[start:end]
            _x = val4
            start = end
            end += 32
            (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val3.joint_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.position_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.PositionConstraint()
            _v166 = val4.header
            start = end
            end += 4
            (_v166.seq,) = _get_struct_I().unpack(str[start:end])
            _v167 = _v166.stamp
            _x = _v167
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v166.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v166.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.link_name = str[start:end]
            _v168 = val4.target_point_offset
            _x = _v168
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v169 = val4.constraint_region
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v169.primitives = []
            for i in range(0, length):
              val6 = shape_msgs.msg.SolidPrimitive()
              start = end
              end += 1
              (val6.type,) = _get_struct_B().unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val6.dimensions = s.unpack(str[start:end])
              _v169.primitives.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v169.primitive_poses = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Pose()
              _v170 = val6.position
              _x = _v170
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v171 = val6.orientation
              _x = _v171
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v169.primitive_poses.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v169.meshes = []
            for i in range(0, length):
              val6 = shape_msgs.msg.Mesh()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val6.triangles = []
              for i in range(0, length):
                val7 = shape_msgs.msg.MeshTriangle()
                start = end
                end += 12
                val7.vertex_indices = _get_struct_3I().unpack(str[start:end])
                val6.triangles.append(val7)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val6.vertices = []
              for i in range(0, length):
                val7 = geometry_msgs.msg.Point()
                _x = val7
                start = end
                end += 24
                (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
                val6.vertices.append(val7)
              _v169.meshes.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v169.mesh_poses = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Pose()
              _v172 = val6.position
              _x = _v172
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v173 = val6.orientation
              _x = _v173
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v169.mesh_poses.append(val6)
            start = end
            end += 8
            (val4.weight,) = _get_struct_d().unpack(str[start:end])
            val3.position_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.orientation_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.OrientationConstraint()
            _v174 = val4.header
            start = end
            end += 4
            (_v174.seq,) = _get_struct_I().unpack(str[start:end])
            _v175 = _v174.stamp
            _x = _v175
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v174.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v174.frame_id = str[start:end]
            _v176 = val4.orientation
            _x = _v176
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.link_name = str[start:end]
            _x = val4
            start = end
            end += 33
            (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
            val3.orientation_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.visibility_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.VisibilityConstraint()
            start = end
            end += 8
            (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
            _v177 = val4.target_pose
            _v178 = _v177.header
            start = end
            end += 4
            (_v178.seq,) = _get_struct_I().unpack(str[start:end])
            _v179 = _v178.stamp
            _x = _v179
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v178.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v178.frame_id = str[start:end]
            _v180 = _v177.pose
            _v181 = _v180.position
            _x = _v181
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v182 = _v180.orientation
            _x = _v182
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
            _v183 = val4.sensor_pose
            _v184 = _v183.header
            start = end
            end += 4
            (_v184.seq,) = _get_struct_I().unpack(str[start:end])
            _v185 = _v184.stamp
            _x = _v185
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v184.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v184.frame_id = str[start:end]
            _v186 = _v183.pose
            _v187 = _v186.position
            _x = _v187
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v188 = _v186.orientation
            _x = _v188
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _x = val4
            start = end
            end += 25
            (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
            val3.visibility_constraints.append(val4)
          _v128.goal_constraints.append(val3)
        _v189 = _v128.path_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v189.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v189.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v189.joint_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.joint_name = str[start:end]
          _x = val4
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          _v189.joint_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v189.position_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.PositionConstraint()
          _v190 = val4.header
          start = end
          end += 4
          (_v190.seq,) = _get_struct_I().unpack(str[start:end])
          _v191 = _v190.stamp
          _x = _v191
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v190.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v190.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v192 = val4.target_point_offset
          _x = _v192
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v193 = val4.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v193.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = s.unpack(str[start:end])
            _v193.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v193.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v194 = val6.position
            _x = _v194
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v195 = val6.orientation
            _x = _v195
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v193.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v193.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v193.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v193.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v196 = val6.position
            _x = _v196
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v197 = val6.orientation
            _x = _v197
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v193.mesh_poses.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v189.position_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v189.orientation_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.OrientationConstraint()
          _v198 = val4.header
          start = end
          end += 4
          (_v198.seq,) = _get_struct_I().unpack(str[start:end])
          _v199 = _v198.stamp
          _x = _v199
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v198.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v198.frame_id = str[start:end]
          _v200 = val4.orientation
          _x = _v200
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _x = val4
          start = end
          end += 33
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
          _v189.orientation_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v189.visibility_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v201 = val4.target_pose
          _v202 = _v201.header
          start = end
          end += 4
          (_v202.seq,) = _get_struct_I().unpack(str[start:end])
          _v203 = _v202.stamp
          _x = _v203
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v202.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v202.frame_id = str[start:end]
          _v204 = _v201.pose
          _v205 = _v204.position
          _x = _v205
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v206 = _v204.orientation
          _x = _v206
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v207 = val4.sensor_pose
          _v208 = _v207.header
          start = end
          end += 4
          (_v208.seq,) = _get_struct_I().unpack(str[start:end])
          _v209 = _v208.stamp
          _x = _v209
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v208.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v208.frame_id = str[start:end]
          _v210 = _v207.pose
          _v211 = _v210.position
          _x = _v211
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v212 = _v210.orientation
          _x = _v212
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val4
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          _v189.visibility_constraints.append(val4)
        _v213 = _v128.trajectory_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v213.constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.Constraints()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.joint_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.JointConstraint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.joint_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.joint_name = str[start:end]
            _x = val5
            start = end
            end += 32
            (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val4.joint_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.position_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.PositionConstraint()
            _v214 = val5.header
            start = end
            end += 4
            (_v214.seq,) = _get_struct_I().unpack(str[start:end])
            _v215 = _v214.stamp
            _x = _v215
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v214.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v214.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.link_name = str[start:end]
            _v216 = val5.target_point_offset
            _x = _v216
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v217 = val5.constraint_region
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v217.primitives = []
            for i in range(0, length):
              val7 = shape_msgs.msg.SolidPrimitive()
              start = end
              end += 1
              (val7.type,) = _get_struct_B().unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val7.dimensions = s.unpack(str[start:end])
              _v217.primitives.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v217.primitive_poses = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Pose()
              _v218 = val7.position
              _x = _v218
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v219 = val7.orientation
              _x = _v219
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v217.primitive_poses.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v217.meshes = []
            for i in range(0, length):
              val7 = shape_msgs.msg.Mesh()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val7.triangles = []
              for i in range(0, length):
                val8 = shape_msgs.msg.MeshTriangle()
                start = end
                end += 12
                val8.vertex_indices = _get_struct_3I().unpack(str[start:end])
                val7.triangles.append(val8)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val7.vertices = []
              for i in range(0, length):
                val8 = geometry_msgs.msg.Point()
                _x = val8
                start = end
                end += 24
                (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
                val7.vertices.append(val8)
              _v217.meshes.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v217.mesh_poses = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Pose()
              _v220 = val7.position
              _x = _v220
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v221 = val7.orientation
              _x = _v221
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v217.mesh_poses.append(val7)
            start = end
            end += 8
            (val5.weight,) = _get_struct_d().unpack(str[start:end])
            val4.position_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.orientation_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.OrientationConstraint()
            _v222 = val5.header
            start = end
            end += 4
            (_v222.seq,) = _get_struct_I().unpack(str[start:end])
            _v223 = _v222.stamp
            _x = _v223
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v222.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v222.frame_id = str[start:end]
            _v224 = val5.orientation
            _x = _v224
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.link_name = str[start:end]
            _x = val5
            start = end
            end += 33
            (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
            val4.orientation_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.visibility_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.VisibilityConstraint()
            start = end
            end += 8
            (val5.target_radius,) = _get_struct_d().unpack(str[start:end])
            _v225 = val5.target_pose
            _v226 = _v225.header
            start = end
            end += 4
            (_v226.seq,) = _get_struct_I().unpack(str[start:end])
            _v227 = _v226.stamp
            _x = _v227
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v226.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v226.frame_id = str[start:end]
            _v228 = _v225.pose
            _v229 = _v228.position
            _x = _v229
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v230 = _v228.orientation
            _x = _v230
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (val5.cone_sides,) = _get_struct_i().unpack(str[start:end])
            _v231 = val5.sensor_pose
            _v232 = _v231.header
            start = end
            end += 4
            (_v232.seq,) = _get_struct_I().unpack(str[start:end])
            _v233 = _v232.stamp
            _x = _v233
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v232.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v232.frame_id = str[start:end]
            _v234 = _v231.pose
            _v235 = _v234.position
            _x = _v235
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v236 = _v234.orientation
            _x = _v236
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _x = val5
            start = end
            end += 25
            (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
            val4.visibility_constraints.append(val5)
          _v213.constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v128.reference_trajectories = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.GenericTrajectory()
          _v237 = val3.header
          start = end
          end += 4
          (_v237.seq,) = _get_struct_I().unpack(str[start:end])
          _v238 = _v237.stamp
          _x = _v238
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v237.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v237.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.joint_trajectory = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectory()
            _v239 = val4.header
            start = end
            end += 4
            (_v239.seq,) = _get_struct_I().unpack(str[start:end])
            _v240 = _v239.stamp
            _x = _v240
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v239.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v239.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.joint_names = []
            for i in range(0, length):
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              start = end
              end += length
              if python3:
                val5 = str[start:end].decode('utf-8', 'rosmsg')
              else:
                val5 = str[start:end]
              val4.joint_names.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.points = []
            for i in range(0, length):
              val5 = trajectory_msgs.msg.JointTrajectoryPoint()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.positions = s.unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.velocities = s.unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.accelerations = s.unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.effort = s.unpack(str[start:end])
              _v241 = val5.time_from_start
              _x = _v241
              start = end
              end += 8
              (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
              val4.points.append(val5)
            val3.joint_trajectory.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.cartesian_trajectory = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.CartesianTrajectory()
            _v242 = val4.header
            start = end
            end += 4
            (_v242.seq,) = _get_struct_I().unpack(str[start:end])
            _v243 = _v242.stamp
            _x = _v243
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v242.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v242.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.tracked_frame = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.tracked_frame = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.points = []
            for i in range(0, length):
              val5 = moveit_msgs.msg.CartesianTrajectoryPoint()
              _v244 = val5.point
              _v245 = _v244.pose
              _v246 = _v245.position
              _x = _v246
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v247 = _v245.orientation
              _x = _v247
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v248 = _v244.velocity
              _v249 = _v248.linear
              _x = _v249
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v250 = _v248.angular
              _x = _v250
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v251 = _v244.acceleration
              _v252 = _v251.linear
              _x = _v252
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v253 = _v251.angular
              _x = _v253
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v254 = val5.time_from_start
              _x = _v254
              start = end
              end += 8
              (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
              val4.points.append(val5)
            val3.cartesian_trajectory.append(val4)
          _v128.reference_trajectories.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v128.pipeline_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v128.pipeline_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v128.planner_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v128.planner_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v128.group_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v128.group_name = str[start:end]
        _x = _v128
        start = end
        end += 28
        (_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor, _x.max_acceleration_scaling_factor,) = _get_struct_i3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v128.cartesian_speed_limited_link = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v128.cartesian_speed_limited_link = str[start:end]
        start = end
        end += 8
        (_v128.max_cartesian_speed,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 8
        (val1.blend_radius,) = _get_struct_d().unpack(str[start:end])
        self.items.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.items)
      buff.write(_struct_I.pack(length))
      for val1 in self.items:
        _v255 = val1.req
        _v256 = _v255.workspace_parameters
        _v257 = _v256.header
        _x = _v257.seq
        buff.write(_get_struct_I().pack(_x))
        _v258 = _v257.stamp
        _x = _v258
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v257.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v259 = _v256.min_corner
        _x = _v259
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v260 = _v256.max_corner
        _x = _v260
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v261 = _v255.start_state
        _v262 = _v261.joint_state
        _v263 = _v262.header
        _x = _v263.seq
        buff.write(_get_struct_I().pack(_x))
        _v264 = _v263.stamp
        _x = _v264
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v263.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v262.name)
        buff.write(_struct_I.pack(length))
        for val5 in _v262.name:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v262.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v262.position.tostring())
        length = len(_v262.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v262.velocity.tostring())
        length = len(_v262.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v262.effort.tostring())
        _v265 = _v261.multi_dof_joint_state
        _v266 = _v265.header
        _x = _v266.seq
        buff.write(_get_struct_I().pack(_x))
        _v267 = _v266.stamp
        _x = _v267
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v266.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v265.joint_names)
        buff.write(_struct_I.pack(length))
        for val5 in _v265.joint_names:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v265.transforms)
        buff.write(_struct_I.pack(length))
        for val5 in _v265.transforms:
          _v268 = val5.translation
          _x = _v268
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v269 = val5.rotation
          _x = _v269
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v265.twist)
        buff.write(_struct_I.pack(length))
        for val5 in _v265.twist:
          _v270 = val5.linear
          _x = _v270
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v271 = val5.angular
          _x = _v271
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v265.wrench)
        buff.write(_struct_I.pack(length))
        for val5 in _v265.wrench:
          _v272 = val5.force
          _x = _v272
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v273 = val5.torque
          _x = _v273
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v261.attached_collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v261.attached_collision_objects:
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v274 = val4.object
          _v275 = _v274.header
          _x = _v275.seq
          buff.write(_get_struct_I().pack(_x))
          _v276 = _v275.stamp
          _x = _v276
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v275.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v277 = _v274.pose
          _v278 = _v277.position
          _x = _v278
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v279 = _v277.orientation
          _x = _v279
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v274.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v280 = _v274.type
          _x = _v280.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v280.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v274.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v274.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.dimensions.tostring())
          length = len(_v274.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v274.primitive_poses:
            _v281 = val6.position
            _x = _v281
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v282 = val6.orientation
            _x = _v282
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v274.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v274.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(val7.vertex_indices.tostring())
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v274.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v274.mesh_poses:
            _v283 = val6.position
            _x = _v283
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v284 = val6.orientation
            _x = _v284
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v274.planes)
          buff.write(_struct_I.pack(length))
          for val6 in _v274.planes:
            buff.write(val6.coef.tostring())
          length = len(_v274.plane_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v274.plane_poses:
            _v285 = val6.position
            _x = _v285
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v286 = val6.orientation
            _x = _v286
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v274.subframe_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v274.subframe_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v274.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v274.subframe_poses:
            _v287 = val6.position
            _x = _v287
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v288 = val6.orientation
            _x = _v288
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v274.operation
          buff.write(_get_struct_b().pack(_x))
          length = len(val4.touch_links)
          buff.write(_struct_I.pack(length))
          for val5 in val4.touch_links:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
          _v289 = val4.detach_posture
          _v290 = _v289.header
          _x = _v290.seq
          buff.write(_get_struct_I().pack(_x))
          _v291 = _v290.stamp
          _x = _v291
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v290.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v289.joint_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v289.joint_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v289.points)
          buff.write(_struct_I.pack(length))
          for val6 in _v289.points:
            length = len(val6.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.positions.tostring())
            length = len(val6.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.velocities.tostring())
            length = len(val6.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.accelerations.tostring())
            length = len(val6.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.effort.tostring())
            _v292 = val6.time_from_start
            _x = _v292
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        _x = _v261.is_diff
        buff.write(_get_struct_B().pack(_x))
        length = len(_v255.goal_constraints)
        buff.write(_struct_I.pack(length))
        for val3 in _v255.goal_constraints:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val3.joint_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.joint_constraints:
            _x = val4.joint_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
          length = len(val3.position_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.position_constraints:
            _v293 = val4.header
            _x = _v293.seq
            buff.write(_get_struct_I().pack(_x))
            _v294 = _v293.stamp
            _x = _v294
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v293.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v295 = val4.target_point_offset
            _x = _v295
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v296 = val4.constraint_region
            length = len(_v296.primitives)
            buff.write(_struct_I.pack(length))
            for val6 in _v296.primitives:
              _x = val6.type
              buff.write(_get_struct_B().pack(_x))
              length = len(val6.dimensions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val6.dimensions.tostring())
            length = len(_v296.primitive_poses)
            buff.write(_struct_I.pack(length))
            for val6 in _v296.primitive_poses:
              _v297 = val6.position
              _x = _v297
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v298 = val6.orientation
              _x = _v298
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            length = len(_v296.meshes)
            buff.write(_struct_I.pack(length))
            for val6 in _v296.meshes:
              length = len(val6.triangles)
              buff.write(_struct_I.pack(length))
              for val7 in val6.triangles:
                buff.write(val7.vertex_indices.tostring())
              length = len(val6.vertices)
              buff.write(_struct_I.pack(length))
              for val7 in val6.vertices:
                _x = val7
                buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            length = len(_v296.mesh_poses)
            buff.write(_struct_I.pack(length))
            for val6 in _v296.mesh_poses:
              _v299 = val6.position
              _x = _v299
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v300 = val6.orientation
              _x = _v300
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.weight
            buff.write(_get_struct_d().pack(_x))
          length = len(val3.orientation_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.orientation_constraints:
            _v301 = val4.header
            _x = _v301.seq
            buff.write(_get_struct_I().pack(_x))
            _v302 = _v301.stamp
            _x = _v302
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v301.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v303 = val4.orientation
            _x = _v303
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
          length = len(val3.visibility_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.visibility_constraints:
            _x = val4.target_radius
            buff.write(_get_struct_d().pack(_x))
            _v304 = val4.target_pose
            _v305 = _v304.header
            _x = _v305.seq
            buff.write(_get_struct_I().pack(_x))
            _v306 = _v305.stamp
            _x = _v306
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v305.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v307 = _v304.pose
            _v308 = _v307.position
            _x = _v308
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v309 = _v307.orientation
            _x = _v309
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.cone_sides
            buff.write(_get_struct_i().pack(_x))
            _v310 = val4.sensor_pose
            _v311 = _v310.header
            _x = _v311.seq
            buff.write(_get_struct_I().pack(_x))
            _v312 = _v311.stamp
            _x = _v312
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v311.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v313 = _v310.pose
            _v314 = _v313.position
            _x = _v314
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v315 = _v313.orientation
            _x = _v315
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4
            buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _v316 = _v255.path_constraints
        _x = _v316.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v316.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v316.joint_constraints:
          _x = val4.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(_v316.position_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v316.position_constraints:
          _v317 = val4.header
          _x = _v317.seq
          buff.write(_get_struct_I().pack(_x))
          _v318 = _v317.stamp
          _x = _v318
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v317.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v319 = val4.target_point_offset
          _x = _v319
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v320 = val4.constraint_region
          length = len(_v320.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v320.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.dimensions.tostring())
          length = len(_v320.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v320.primitive_poses:
            _v321 = val6.position
            _x = _v321
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v322 = val6.orientation
            _x = _v322
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v320.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v320.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(val7.vertex_indices.tostring())
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v320.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v320.mesh_poses:
            _v323 = val6.position
            _x = _v323
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v324 = val6.orientation
            _x = _v324
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        length = len(_v316.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v316.orientation_constraints:
          _v325 = val4.header
          _x = _v325.seq
          buff.write(_get_struct_I().pack(_x))
          _v326 = _v325.stamp
          _x = _v326
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v325.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v327 = val4.orientation
          _x = _v327
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
        length = len(_v316.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v316.visibility_constraints:
          _x = val4.target_radius
          buff.write(_get_struct_d().pack(_x))
          _v328 = val4.target_pose
          _v329 = _v328.header
          _x = _v329.seq
          buff.write(_get_struct_I().pack(_x))
          _v330 = _v329.stamp
          _x = _v330
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v329.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v331 = _v328.pose
          _v332 = _v331.position
          _x = _v332
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v333 = _v331.orientation
          _x = _v333
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.cone_sides
          buff.write(_get_struct_i().pack(_x))
          _v334 = val4.sensor_pose
          _v335 = _v334.header
          _x = _v335.seq
          buff.write(_get_struct_I().pack(_x))
          _v336 = _v335.stamp
          _x = _v336
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v335.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v337 = _v334.pose
          _v338 = _v337.position
          _x = _v338
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v339 = _v337.orientation
          _x = _v339
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _v340 = _v255.trajectory_constraints
        length = len(_v340.constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v340.constraints:
          _x = val4.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val4.joint_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.joint_constraints:
            _x = val5.joint_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5
            buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
          length = len(val4.position_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.position_constraints:
            _v341 = val5.header
            _x = _v341.seq
            buff.write(_get_struct_I().pack(_x))
            _v342 = _v341.stamp
            _x = _v342
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v341.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v343 = val5.target_point_offset
            _x = _v343
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v344 = val5.constraint_region
            length = len(_v344.primitives)
            buff.write(_struct_I.pack(length))
            for val7 in _v344.primitives:
              _x = val7.type
              buff.write(_get_struct_B().pack(_x))
              length = len(val7.dimensions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val7.dimensions.tostring())
            length = len(_v344.primitive_poses)
            buff.write(_struct_I.pack(length))
            for val7 in _v344.primitive_poses:
              _v345 = val7.position
              _x = _v345
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v346 = val7.orientation
              _x = _v346
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            length = len(_v344.meshes)
            buff.write(_struct_I.pack(length))
            for val7 in _v344.meshes:
              length = len(val7.triangles)
              buff.write(_struct_I.pack(length))
              for val8 in val7.triangles:
                buff.write(val8.vertex_indices.tostring())
              length = len(val7.vertices)
              buff.write(_struct_I.pack(length))
              for val8 in val7.vertices:
                _x = val8
                buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            length = len(_v344.mesh_poses)
            buff.write(_struct_I.pack(length))
            for val7 in _v344.mesh_poses:
              _v347 = val7.position
              _x = _v347
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v348 = val7.orientation
              _x = _v348
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.weight
            buff.write(_get_struct_d().pack(_x))
          length = len(val4.orientation_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.orientation_constraints:
            _v349 = val5.header
            _x = _v349.seq
            buff.write(_get_struct_I().pack(_x))
            _v350 = _v349.stamp
            _x = _v350
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v349.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v351 = val5.orientation
            _x = _v351
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5
            buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
          length = len(val4.visibility_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.visibility_constraints:
            _x = val5.target_radius
            buff.write(_get_struct_d().pack(_x))
            _v352 = val5.target_pose
            _v353 = _v352.header
            _x = _v353.seq
            buff.write(_get_struct_I().pack(_x))
            _v354 = _v353.stamp
            _x = _v354
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v353.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v355 = _v352.pose
            _v356 = _v355.position
            _x = _v356
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v357 = _v355.orientation
            _x = _v357
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.cone_sides
            buff.write(_get_struct_i().pack(_x))
            _v358 = val5.sensor_pose
            _v359 = _v358.header
            _x = _v359.seq
            buff.write(_get_struct_I().pack(_x))
            _v360 = _v359.stamp
            _x = _v360
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v359.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v361 = _v358.pose
            _v362 = _v361.position
            _x = _v362
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v363 = _v361.orientation
            _x = _v363
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5
            buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        length = len(_v255.reference_trajectories)
        buff.write(_struct_I.pack(length))
        for val3 in _v255.reference_trajectories:
          _v364 = val3.header
          _x = _v364.seq
          buff.write(_get_struct_I().pack(_x))
          _v365 = _v364.stamp
          _x = _v365
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v364.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val3.joint_trajectory)
          buff.write(_struct_I.pack(length))
          for val4 in val3.joint_trajectory:
            _v366 = val4.header
            _x = _v366.seq
            buff.write(_get_struct_I().pack(_x))
            _v367 = _v366.stamp
            _x = _v367
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v366.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            length = len(val4.joint_names)
            buff.write(_struct_I.pack(length))
            for val5 in val4.joint_names:
              length = len(val5)
              if python3 or type(val5) == unicode:
                val5 = val5.encode('utf-8')
                length = len(val5)
              buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
            length = len(val4.points)
            buff.write(_struct_I.pack(length))
            for val5 in val4.points:
              length = len(val5.positions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val5.positions.tostring())
              length = len(val5.velocities)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val5.velocities.tostring())
              length = len(val5.accelerations)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val5.accelerations.tostring())
              length = len(val5.effort)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val5.effort.tostring())
              _v368 = val5.time_from_start
              _x = _v368
              buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          length = len(val3.cartesian_trajectory)
          buff.write(_struct_I.pack(length))
          for val4 in val3.cartesian_trajectory:
            _v369 = val4.header
            _x = _v369.seq
            buff.write(_get_struct_I().pack(_x))
            _v370 = _v369.stamp
            _x = _v370
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v369.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4.tracked_frame
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            length = len(val4.points)
            buff.write(_struct_I.pack(length))
            for val5 in val4.points:
              _v371 = val5.point
              _v372 = _v371.pose
              _v373 = _v372.position
              _x = _v373
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v374 = _v372.orientation
              _x = _v374
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
              _v375 = _v371.velocity
              _v376 = _v375.linear
              _x = _v376
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v377 = _v375.angular
              _x = _v377
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v378 = _v371.acceleration
              _v379 = _v378.linear
              _x = _v379
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v380 = _v378.angular
              _x = _v380
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v381 = val5.time_from_start
              _x = _v381
              buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = _v255.pipeline_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v255.planner_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v255.group_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v255
        buff.write(_get_struct_i3d().pack(_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor, _x.max_acceleration_scaling_factor))
        _x = _v255.cartesian_speed_limited_link
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v255.max_cartesian_speed
        buff.write(_get_struct_d().pack(_x))
        _x = val1.blend_radius
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.items is None:
        self.items = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.items = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.MotionSequenceItem()
        _v382 = val1.req
        _v383 = _v382.workspace_parameters
        _v384 = _v383.header
        start = end
        end += 4
        (_v384.seq,) = _get_struct_I().unpack(str[start:end])
        _v385 = _v384.stamp
        _x = _v385
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v384.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v384.frame_id = str[start:end]
        _v386 = _v383.min_corner
        _x = _v386
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v387 = _v383.max_corner
        _x = _v387
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v388 = _v382.start_state
        _v389 = _v388.joint_state
        _v390 = _v389.header
        start = end
        end += 4
        (_v390.seq,) = _get_struct_I().unpack(str[start:end])
        _v391 = _v390.stamp
        _x = _v391
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v390.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v390.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v389.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v389.name.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v389.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v389.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v389.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v392 = _v388.multi_dof_joint_state
        _v393 = _v392.header
        start = end
        end += 4
        (_v393.seq,) = _get_struct_I().unpack(str[start:end])
        _v394 = _v393.stamp
        _x = _v394
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v393.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v393.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v392.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v392.joint_names.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v392.transforms = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Transform()
          _v395 = val5.translation
          _x = _v395
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v396 = val5.rotation
          _x = _v396
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v392.transforms.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v392.twist = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Twist()
          _v397 = val5.linear
          _x = _v397
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v398 = val5.angular
          _x = _v398
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v392.twist.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v392.wrench = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Wrench()
          _v399 = val5.force
          _x = _v399
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v400 = val5.torque
          _x = _v400
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v392.wrench.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v388.attached_collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AttachedCollisionObject()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v401 = val4.object
          _v402 = _v401.header
          start = end
          end += 4
          (_v402.seq,) = _get_struct_I().unpack(str[start:end])
          _v403 = _v402.stamp
          _x = _v403
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v402.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v402.frame_id = str[start:end]
          _v404 = _v401.pose
          _v405 = _v404.position
          _x = _v405
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v406 = _v404.orientation
          _x = _v406
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v401.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v401.id = str[start:end]
          _v407 = _v401.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v407.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v407.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v407.db = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v407.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v401.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v401.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v401.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v408 = val6.position
            _x = _v408
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v409 = val6.orientation
            _x = _v409
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v401.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v401.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v401.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v401.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v410 = val6.position
            _x = _v410
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v411 = val6.orientation
            _x = _v411
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v401.mesh_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v401.planes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val6.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
            _v401.planes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v401.plane_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v412 = val6.position
            _x = _v412
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v413 = val6.orientation
            _x = _v413
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v401.plane_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v401.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v401.subframe_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v401.subframe_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v414 = val6.position
            _x = _v414
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v415 = val6.orientation
            _x = _v415
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v401.subframe_poses.append(val6)
          start = end
          end += 1
          (_v401.operation,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.touch_links = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5 = str[start:end]
            val4.touch_links.append(val5)
          _v416 = val4.detach_posture
          _v417 = _v416.header
          start = end
          end += 4
          (_v417.seq,) = _get_struct_I().unpack(str[start:end])
          _v418 = _v417.stamp
          _x = _v418
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v417.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v417.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v416.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v416.joint_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v416.points = []
          for i in range(0, length):
            val6 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v419 = val6.time_from_start
            _x = _v419
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v416.points.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v388.attached_collision_objects.append(val4)
        start = end
        end += 1
        (_v388.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v388.is_diff = bool(_v388.is_diff)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v382.goal_constraints = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.Constraints()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.joint_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.JointConstraint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.joint_name = str[start:end]
            _x = val4
            start = end
            end += 32
            (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val3.joint_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.position_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.PositionConstraint()
            _v420 = val4.header
            start = end
            end += 4
            (_v420.seq,) = _get_struct_I().unpack(str[start:end])
            _v421 = _v420.stamp
            _x = _v421
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v420.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v420.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.link_name = str[start:end]
            _v422 = val4.target_point_offset
            _x = _v422
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v423 = val4.constraint_region
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v423.primitives = []
            for i in range(0, length):
              val6 = shape_msgs.msg.SolidPrimitive()
              start = end
              end += 1
              (val6.type,) = _get_struct_B().unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val6.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              _v423.primitives.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v423.primitive_poses = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Pose()
              _v424 = val6.position
              _x = _v424
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v425 = val6.orientation
              _x = _v425
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v423.primitive_poses.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v423.meshes = []
            for i in range(0, length):
              val6 = shape_msgs.msg.Mesh()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val6.triangles = []
              for i in range(0, length):
                val7 = shape_msgs.msg.MeshTriangle()
                start = end
                end += 12
                val7.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
                val6.triangles.append(val7)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val6.vertices = []
              for i in range(0, length):
                val7 = geometry_msgs.msg.Point()
                _x = val7
                start = end
                end += 24
                (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
                val6.vertices.append(val7)
              _v423.meshes.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v423.mesh_poses = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Pose()
              _v426 = val6.position
              _x = _v426
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v427 = val6.orientation
              _x = _v427
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v423.mesh_poses.append(val6)
            start = end
            end += 8
            (val4.weight,) = _get_struct_d().unpack(str[start:end])
            val3.position_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.orientation_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.OrientationConstraint()
            _v428 = val4.header
            start = end
            end += 4
            (_v428.seq,) = _get_struct_I().unpack(str[start:end])
            _v429 = _v428.stamp
            _x = _v429
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v428.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v428.frame_id = str[start:end]
            _v430 = val4.orientation
            _x = _v430
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.link_name = str[start:end]
            _x = val4
            start = end
            end += 33
            (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
            val3.orientation_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.visibility_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.VisibilityConstraint()
            start = end
            end += 8
            (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
            _v431 = val4.target_pose
            _v432 = _v431.header
            start = end
            end += 4
            (_v432.seq,) = _get_struct_I().unpack(str[start:end])
            _v433 = _v432.stamp
            _x = _v433
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v432.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v432.frame_id = str[start:end]
            _v434 = _v431.pose
            _v435 = _v434.position
            _x = _v435
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v436 = _v434.orientation
            _x = _v436
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
            _v437 = val4.sensor_pose
            _v438 = _v437.header
            start = end
            end += 4
            (_v438.seq,) = _get_struct_I().unpack(str[start:end])
            _v439 = _v438.stamp
            _x = _v439
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v438.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v438.frame_id = str[start:end]
            _v440 = _v437.pose
            _v441 = _v440.position
            _x = _v441
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v442 = _v440.orientation
            _x = _v442
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _x = val4
            start = end
            end += 25
            (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
            val3.visibility_constraints.append(val4)
          _v382.goal_constraints.append(val3)
        _v443 = _v382.path_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v443.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v443.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v443.joint_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.joint_name = str[start:end]
          _x = val4
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          _v443.joint_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v443.position_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.PositionConstraint()
          _v444 = val4.header
          start = end
          end += 4
          (_v444.seq,) = _get_struct_I().unpack(str[start:end])
          _v445 = _v444.stamp
          _x = _v445
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v444.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v444.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v446 = val4.target_point_offset
          _x = _v446
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v447 = val4.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v447.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v447.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v447.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v448 = val6.position
            _x = _v448
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v449 = val6.orientation
            _x = _v449
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v447.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v447.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v447.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v447.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v450 = val6.position
            _x = _v450
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v451 = val6.orientation
            _x = _v451
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v447.mesh_poses.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v443.position_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v443.orientation_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.OrientationConstraint()
          _v452 = val4.header
          start = end
          end += 4
          (_v452.seq,) = _get_struct_I().unpack(str[start:end])
          _v453 = _v452.stamp
          _x = _v453
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v452.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v452.frame_id = str[start:end]
          _v454 = val4.orientation
          _x = _v454
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _x = val4
          start = end
          end += 33
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
          _v443.orientation_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v443.visibility_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v455 = val4.target_pose
          _v456 = _v455.header
          start = end
          end += 4
          (_v456.seq,) = _get_struct_I().unpack(str[start:end])
          _v457 = _v456.stamp
          _x = _v457
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v456.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v456.frame_id = str[start:end]
          _v458 = _v455.pose
          _v459 = _v458.position
          _x = _v459
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v460 = _v458.orientation
          _x = _v460
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v461 = val4.sensor_pose
          _v462 = _v461.header
          start = end
          end += 4
          (_v462.seq,) = _get_struct_I().unpack(str[start:end])
          _v463 = _v462.stamp
          _x = _v463
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v462.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v462.frame_id = str[start:end]
          _v464 = _v461.pose
          _v465 = _v464.position
          _x = _v465
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v466 = _v464.orientation
          _x = _v466
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val4
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          _v443.visibility_constraints.append(val4)
        _v467 = _v382.trajectory_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v467.constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.Constraints()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.joint_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.JointConstraint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.joint_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.joint_name = str[start:end]
            _x = val5
            start = end
            end += 32
            (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val4.joint_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.position_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.PositionConstraint()
            _v468 = val5.header
            start = end
            end += 4
            (_v468.seq,) = _get_struct_I().unpack(str[start:end])
            _v469 = _v468.stamp
            _x = _v469
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v468.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v468.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.link_name = str[start:end]
            _v470 = val5.target_point_offset
            _x = _v470
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v471 = val5.constraint_region
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v471.primitives = []
            for i in range(0, length):
              val7 = shape_msgs.msg.SolidPrimitive()
              start = end
              end += 1
              (val7.type,) = _get_struct_B().unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val7.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              _v471.primitives.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v471.primitive_poses = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Pose()
              _v472 = val7.position
              _x = _v472
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v473 = val7.orientation
              _x = _v473
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v471.primitive_poses.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v471.meshes = []
            for i in range(0, length):
              val7 = shape_msgs.msg.Mesh()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val7.triangles = []
              for i in range(0, length):
                val8 = shape_msgs.msg.MeshTriangle()
                start = end
                end += 12
                val8.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
                val7.triangles.append(val8)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val7.vertices = []
              for i in range(0, length):
                val8 = geometry_msgs.msg.Point()
                _x = val8
                start = end
                end += 24
                (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
                val7.vertices.append(val8)
              _v471.meshes.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v471.mesh_poses = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Pose()
              _v474 = val7.position
              _x = _v474
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v475 = val7.orientation
              _x = _v475
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v471.mesh_poses.append(val7)
            start = end
            end += 8
            (val5.weight,) = _get_struct_d().unpack(str[start:end])
            val4.position_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.orientation_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.OrientationConstraint()
            _v476 = val5.header
            start = end
            end += 4
            (_v476.seq,) = _get_struct_I().unpack(str[start:end])
            _v477 = _v476.stamp
            _x = _v477
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v476.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v476.frame_id = str[start:end]
            _v478 = val5.orientation
            _x = _v478
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.link_name = str[start:end]
            _x = val5
            start = end
            end += 33
            (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
            val4.orientation_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.visibility_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.VisibilityConstraint()
            start = end
            end += 8
            (val5.target_radius,) = _get_struct_d().unpack(str[start:end])
            _v479 = val5.target_pose
            _v480 = _v479.header
            start = end
            end += 4
            (_v480.seq,) = _get_struct_I().unpack(str[start:end])
            _v481 = _v480.stamp
            _x = _v481
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v480.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v480.frame_id = str[start:end]
            _v482 = _v479.pose
            _v483 = _v482.position
            _x = _v483
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v484 = _v482.orientation
            _x = _v484
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (val5.cone_sides,) = _get_struct_i().unpack(str[start:end])
            _v485 = val5.sensor_pose
            _v486 = _v485.header
            start = end
            end += 4
            (_v486.seq,) = _get_struct_I().unpack(str[start:end])
            _v487 = _v486.stamp
            _x = _v487
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v486.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v486.frame_id = str[start:end]
            _v488 = _v485.pose
            _v489 = _v488.position
            _x = _v489
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v490 = _v488.orientation
            _x = _v490
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _x = val5
            start = end
            end += 25
            (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
            val4.visibility_constraints.append(val5)
          _v467.constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v382.reference_trajectories = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.GenericTrajectory()
          _v491 = val3.header
          start = end
          end += 4
          (_v491.seq,) = _get_struct_I().unpack(str[start:end])
          _v492 = _v491.stamp
          _x = _v492
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v491.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v491.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.joint_trajectory = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectory()
            _v493 = val4.header
            start = end
            end += 4
            (_v493.seq,) = _get_struct_I().unpack(str[start:end])
            _v494 = _v493.stamp
            _x = _v494
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v493.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v493.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.joint_names = []
            for i in range(0, length):
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              start = end
              end += length
              if python3:
                val5 = str[start:end].decode('utf-8', 'rosmsg')
              else:
                val5 = str[start:end]
              val4.joint_names.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.points = []
            for i in range(0, length):
              val5 = trajectory_msgs.msg.JointTrajectoryPoint()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              _v495 = val5.time_from_start
              _x = _v495
              start = end
              end += 8
              (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
              val4.points.append(val5)
            val3.joint_trajectory.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.cartesian_trajectory = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.CartesianTrajectory()
            _v496 = val4.header
            start = end
            end += 4
            (_v496.seq,) = _get_struct_I().unpack(str[start:end])
            _v497 = _v496.stamp
            _x = _v497
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v496.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v496.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.tracked_frame = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.tracked_frame = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.points = []
            for i in range(0, length):
              val5 = moveit_msgs.msg.CartesianTrajectoryPoint()
              _v498 = val5.point
              _v499 = _v498.pose
              _v500 = _v499.position
              _x = _v500
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v501 = _v499.orientation
              _x = _v501
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v502 = _v498.velocity
              _v503 = _v502.linear
              _x = _v503
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v504 = _v502.angular
              _x = _v504
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v505 = _v498.acceleration
              _v506 = _v505.linear
              _x = _v506
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v507 = _v505.angular
              _x = _v507
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v508 = val5.time_from_start
              _x = _v508
              start = end
              end += 8
              (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
              val4.points.append(val5)
            val3.cartesian_trajectory.append(val4)
          _v382.reference_trajectories.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v382.pipeline_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v382.pipeline_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v382.planner_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v382.planner_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v382.group_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v382.group_name = str[start:end]
        _x = _v382
        start = end
        end += 28
        (_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor, _x.max_acceleration_scaling_factor,) = _get_struct_i3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v382.cartesian_speed_limited_link = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v382.cartesian_speed_limited_link = str[start:end]
        start = end
        end += 8
        (_v382.max_cartesian_speed,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 8
        (val1.blend_radius,) = _get_struct_d().unpack(str[start:end])
        self.items.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2dBd = None
def _get_struct_2dBd():
    global _struct_2dBd
    if _struct_2dBd is None:
        _struct_2dBd = struct.Struct("<2dBd")
    return _struct_2dBd
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3dBd = None
def _get_struct_3dBd():
    global _struct_3dBd
    if _struct_3dBd is None:
        _struct_3dBd = struct.Struct("<3dBd")
    return _struct_3dBd
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i3d = None
def _get_struct_i3d():
    global _struct_i3d
    if _struct_i3d is None:
        _struct_i3d = struct.Struct("<i3d")
    return _struct_i3d
