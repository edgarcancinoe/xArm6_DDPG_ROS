# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveit_msgs/MoveGroupSequenceAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import genpy
import geometry_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import octomap_msgs.msg
import sensor_msgs.msg
import shape_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class MoveGroupSequenceAction(genpy.Message):
  _md5sum = "0d3375f4fb59ed3ba86fa746e5d8e219"
  _type = "moveit_msgs/MoveGroupSequenceAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

MoveGroupSequenceActionGoal action_goal
MoveGroupSequenceActionResult action_result
MoveGroupSequenceActionFeedback action_feedback

================================================================================
MSG: moveit_msgs/MoveGroupSequenceActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
MoveGroupSequenceGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: moveit_msgs/MoveGroupSequenceGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# A list of motion commands - one for each section of the sequence
MotionSequenceRequest request

# Planning options
PlanningOptions planning_options

================================================================================
MSG: moveit_msgs/MotionSequenceRequest
# List of motion planning request with a blend_radius for each.
# In the response of the planner all of these will be executable as one sequence.
MotionSequenceItem[] items

================================================================================
MSG: moveit_msgs/MotionSequenceItem
# The plan request for this item.
# It is the planning request for this segment of the sequence, as if it were a solitary motion.
MotionPlanRequest req

# To blend between sequence items, the motion may be smoothed using a circular motion.
# The blend radius of the circle between this and the next command, where 0 means no blending.
float64 blend_radius

================================================================================
MSG: moveit_msgs/MotionPlanRequest
# This service contains the definition for a request to the motion
# planner and the output it provides

# Parameters for the workspace that the planner should work inside
WorkspaceParameters workspace_parameters

# Starting state updates. If certain joints should be considered
# at positions other than the current ones, these positions should
# be set here
RobotState start_state

# The possible goal states for the model to plan for. Each element of
# the array defines a goal region. The goal is achieved
# if the constraints for a particular region are satisfied
Constraints[] goal_constraints

# No state at any point along the path in the produced motion plan will violate these constraints (this applies to all points, not just waypoints)
Constraints path_constraints

# The constraints the resulting trajectory must satisfy
TrajectoryConstraints trajectory_constraints

# A set of trajectories that may be used as reference or initial trajectories for (typically optimization-based) planners
# These trajectories do not override start_state or goal_constraints
GenericTrajectory[] reference_trajectories

# The name of the planning pipeline to use. If no name is specified,
# the configured planning pipeline will be used
string pipeline_id

# The name of the planning algorithm to use. If no name is specified,
# the default planner of the planning pipeline will be used
string planner_id

# The name of the group of joints on which this planner is operating
string group_name

# The number of times this plan is to be computed. Shortest solution
# will be reported.
int32 num_planning_attempts

# The maximum amount of time the motion planner is allowed to plan for (in seconds)
float64 allowed_planning_time

# Scaling factors for optionally reducing the maximum joint velocities and
# accelerations.  Allowed values are in (0,1].  The maximum joint velocity and
# acceleration specified in the robot model are multiplied by thier respective
# factors.  If either are outside their valid ranges (importantly, this
# includes being set to 0.0), the factor is set to the default value of 1.0
# internally (i.e., maximum joint velocity or maximum joint acceleration).
float64 max_velocity_scaling_factor
float64 max_acceleration_scaling_factor

# Maximum cartesian speed for the given link.
# If max_cartesian_speed <= 0 the trajectory is not modified.
# These fields require the following planning request adapter: default_planner_request_adapters/LimitMaxCartesianLinkSpeed
string cartesian_speed_limited_link
float64 max_cartesian_speed # m/s

================================================================================
MSG: moveit_msgs/WorkspaceParameters
# This message contains a set of parameters useful in
# setting up the volume (a box) in which the robot is allowed to move.
# This is useful only when planning for mobile parts of
# the robot as well.

# Define the frame of reference for the box corners
Header header

# The minumum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 min_corner

# The maximum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 max_corner

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# A header, used for interpreting the poses
Header header

# The object's pose relative to the header frame.
# The shapes and subframe poses are defined relative to this pose.
geometry_msgs/Pose pose

# The id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# The collision geometries associated with the object.
# Their poses are with respect to the object's pose

# Solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# Meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Named subframes on the object. Use these to define points of interest on the object that you want
# to plan with (e.g. "tip", "spout", "handle"). The id of the object will be prepended to the subframe.
# If an object with the id "screwdriver" and a subframe "tip" is in the scene, you can use the frame
# "screwdriver/tip" for planning.
# The length of the subframe_names and subframe_poses has to be identical.
string[] subframe_names
geometry_msgs/Pose[] subframe_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the object does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: moveit_msgs/Constraints
# This message contains a list of motion planning constraints.
# All constraints must be satisfied for a goal to be considered valid

string name

JointConstraint[] joint_constraints

PositionConstraint[] position_constraints

OrientationConstraint[] orientation_constraints

VisibilityConstraint[] visibility_constraints

================================================================================
MSG: moveit_msgs/JointConstraint
# Constrain the position of a joint to be within a certain bound
string joint_name

# the bound to be achieved is [position - tolerance_below, position + tolerance_above]
float64 position
float64 tolerance_above
float64 tolerance_below

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/PositionConstraint
# This message contains the definition of a position constraint.

Header header

# The robot link this constraint refers to
string link_name

# The offset (in the link frame) for the target point on the link we are planning for
geometry_msgs/Vector3 target_point_offset

# The volume this constraint refers to
BoundingVolume constraint_region

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/BoundingVolume
# Define a volume in 3D

# A set of solid geometric primitives that make up the volume to define (as a union)
shape_msgs/SolidPrimitive[] primitives

# The poses at which the primitives are located
geometry_msgs/Pose[] primitive_poses

# In addition to primitives, meshes can be specified to add to the bounding volume (again, as union)
shape_msgs/Mesh[] meshes

# The poses at which the meshes are located
geometry_msgs/Pose[] mesh_poses

================================================================================
MSG: moveit_msgs/OrientationConstraint
# This message contains the definition of an orientation constraint.

Header header

# The desired orientation of the robot link specified as a quaternion
geometry_msgs/Quaternion orientation

# The robot link this constraint refers to
string link_name

# Tolerance on the three vector components of the orientation error (optional)
float64 absolute_x_axis_tolerance
float64 absolute_y_axis_tolerance
float64 absolute_z_axis_tolerance

# Defines how the orientation error is calculated
# The error is compared to the tolerance defined above
uint8 parameterization

# The different options for the orientation error parameterization
# - Intrinsic xyz Euler angles (default value)
uint8 XYZ_EULER_ANGLES=0
# - A rotation vector. This is similar to the angle-axis representation,
# but the magnitude of the vector represents the rotation angle.
uint8 ROTATION_VECTOR=1

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/VisibilityConstraint
# The constraint is useful to maintain visibility to a disc (the target) in a particular frame.
# This disc forms the base of a visibiliy cone whose tip is at the origin of the sensor.
# Maintaining visibility is done by ensuring the robot does not obstruct the visibility cone.
# Note:
# This constraint does NOT enforce minimum or maximum distances between the sensor
# and the target, nor does it enforce the target to be in the field of view of
# the sensor. A PositionConstraint can (and probably should) be used for such purposes.

# The radius of the disc that should be maintained visible
float64 target_radius

# The pose of the disc; as the robot moves, the pose of the disc may change as well
# This can be in the frame of a particular robot link, for example
geometry_msgs/PoseStamped target_pose

# From the sensor origin towards the target, the disc forms a visibility cone
# This cone is approximated using many sides. For example, when using 4 sides,
# that in fact makes the visibility region be a pyramid.
# This value should always be 3 or more.
int32 cone_sides

# The pose in which visibility is to be maintained.
# The frame id should represent the robot link to which the sensor is attached.
# It is assumed the sensor can look directly at the target, in any direction.
# This assumption is usually not true, but additional PositionConstraints
# can resolve this issue.
geometry_msgs/PoseStamped sensor_pose

# Even though the disc is maintained visible, the visibility cone can be very small
# because of the orientation of the disc with respect to the sensor. It is possible
# for example to view the disk almost from a side, in which case the visibility cone
# can end up having close to 0 volume. The view angle is defined to be the angle between
# the normal to the visibility disc and the direction vector from the sensor origin.
# The value below represents the minimum desired view angle. For a perfect view,
# this value will be 0 (the two vectors are exact opposites). For a completely obstructed view
# this value will be Pi/2 (the vectors are perpendicular). This value defined below
# is the maximum view angle to be maintained. This should be a value in the open interval
# (0, Pi/2). If 0 is set, the view angle is NOT enforced.
float64 max_view_angle

# This angle is used similarly to max_view_angle but limits the maximum angle
# between the sensor origin direction vector and the axis that connects the
# sensor origin to the target frame origin. The value is again in the range (0, Pi/2)
# and is NOT enforced if set to 0.
float64 max_range_angle

# The axis that is assumed to indicate the direction of view for the sensor
# X = 2, Y = 1, Z = 0
uint8 SENSOR_Z=0
uint8 SENSOR_Y=1
uint8 SENSOR_X=2
uint8 sensor_view_direction

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: moveit_msgs/TrajectoryConstraints
# The array of constraints to consider along the trajectory
Constraints[] constraints

================================================================================
MSG: moveit_msgs/GenericTrajectory
# A generic trajectory message that may either encode a joint- or cartesian-space trajectory, or both
# Trajectories encoded in this message are considered semantically equivalent
Header header
trajectory_msgs/JointTrajectory[] joint_trajectory
moveit_msgs/CartesianTrajectory[] cartesian_trajectory

================================================================================
MSG: moveit_msgs/CartesianTrajectory
# This message describes the trajectory of a tracked frame in task-space
Header header

# The name of the Cartesian frame being tracked with respect to the base frame provided in header.frame_id
string tracked_frame

CartesianTrajectoryPoint[] points

================================================================================
MSG: moveit_msgs/CartesianTrajectoryPoint
# The definition of a cartesian point in a trajectory. Defines the cartesian state of the point and it's time,
# following the pattern of the JointTrajectory message
CartesianPoint point

duration time_from_start

================================================================================
MSG: moveit_msgs/CartesianPoint
# This message defines a point in a cartesian trajectory
geometry_msgs/Pose pose
geometry_msgs/Twist velocity
geometry_msgs/Accel acceleration

================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: moveit_msgs/PlanningOptions

# The diff to consider for the planning scene (optional)
PlanningScene planning_scene_diff

# If this flag is set to true, the action
# returns an executable plan in the response but does not attempt execution
bool plan_only

# If this flag is set to true, the action of planning &
# executing is allowed to look around  (move sensors) if
# it seems that not enough information is available about
# the environment
bool look_around

# If this value is positive, the action of planning & executing
# is allowed to look around for a maximum number of attempts;
# If the value is left as 0, the default value is used, as set
# with dynamic_reconfigure
int32 look_around_attempts

# If set and if look_around is true, this value is used as
# the maximum cost allowed for a path to be considered executable.
# If the cost of a path is higher than this value, more sensing or
# a new plan needed. If left as 0.0 but look_around is true, then
# the default value set via dynamic_reconfigure is used
float64 max_safe_execution_cost

# If the plan becomes invalidated during execution, it is possible to have
# that plan recomputed and execution restarted. This flag enables this
# functionality
bool replan

# The maximum number of replanning attempts
int32 replan_attempts

# The amount of time to wait in between replanning attempts (in seconds)
float64 replan_delay

================================================================================
MSG: moveit_msgs/PlanningScene
# name of planning scene
string name

# full robot state
RobotState robot_state

# The name of the robot model this scene is for
string robot_model_name

#additional frames for duplicating tf (with respect to the planning frame)
geometry_msgs/TransformStamped[] fixed_frame_transforms

#full allowed collision matrix
AllowedCollisionMatrix allowed_collision_matrix

# all link paddings
LinkPadding[] link_padding

# all link scales
LinkScale[] link_scale

# Attached objects, collision objects, even the octomap or collision map can have
# colors associated to them. This array specifies them.
ObjectColor[] object_colors

# the collision map
PlanningSceneWorld world

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
bool is_diff

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://wiki.ros.org/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: moveit_msgs/AllowedCollisionMatrix
# The list of entry names in the matrix
string[] entry_names

# The individual entries in the allowed collision matrix
# square, symmetric, with same order as entry_names
AllowedCollisionEntry[] entry_values

# In addition to the collision matrix itself, we also have
# the default entry value for each entry name.

# If the allowed collision flag is queried for a pair of names (n1, n2)
# that is not found in the collision matrix itself, the value of
# the collision flag is considered to be that of the entry (n1 or n2)
# specified in the list below. If both n1 and n2 are found in the list
# of defaults, the result is computed with an AND operation

string[] default_entry_names
bool[] default_entry_values

================================================================================
MSG: moveit_msgs/AllowedCollisionEntry
# whether or not collision checking is enabled
bool[] enabled

================================================================================
MSG: moveit_msgs/LinkPadding
#name for the link
string link_name

# padding to apply to the link
float64 padding

================================================================================
MSG: moveit_msgs/LinkScale
#name for the link
string link_name

# scaling to apply to the link
float64 scale

================================================================================
MSG: moveit_msgs/ObjectColor
# The object id for which we specify color
string id

# The value of the color
std_msgs/ColorRGBA color

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: moveit_msgs/PlanningSceneWorld
# collision objects
CollisionObject[] collision_objects

# The octomap that represents additional collision data
octomap_msgs/OctomapWithPose octomap

================================================================================
MSG: octomap_msgs/OctomapWithPose
# A 3D map in binary format, as Octree
Header header

# The pose of the octree with respect to the header frame 
geometry_msgs/Pose origin

# The actual octree msg
octomap_msgs/Octomap octomap

================================================================================
MSG: octomap_msgs/Octomap
# A 3D map in binary format, as Octree
Header header

# Flag to denote a binary (only free/occupied) or full occupancy octree (.bt/.ot file)
bool binary

# Class id of the contained octree 
string id

# Resolution (in m) of the smallest octree nodes
float64 resolution

# binary serialization of octree, use conversions.h to read and write octrees
int8[] data

================================================================================
MSG: moveit_msgs/MoveGroupSequenceActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MoveGroupSequenceResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: moveit_msgs/MoveGroupSequenceResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# Response comprising information on all sections of the sequence
MotionSequenceResponse response


================================================================================
MSG: moveit_msgs/MotionSequenceResponse
# An error code reflecting what went wrong
MoveItErrorCodes error_code

# The full starting state of the robot at the start of the sequence
RobotState sequence_start

# The trajectories that the planner produced for execution
RobotTrajectory[] planned_trajectories

# The amount of time it took to complete the motion plan
float64 planning_time

================================================================================
MSG: moveit_msgs/MoveItErrorCodes
int32 val

# overall behavior
int32 SUCCESS=1
int32 FAILURE=99999

int32 PLANNING_FAILED=-1
int32 INVALID_MOTION_PLAN=-2
int32 MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE=-3
int32 CONTROL_FAILED=-4
int32 UNABLE_TO_AQUIRE_SENSOR_DATA=-5
int32 TIMED_OUT=-6
int32 PREEMPTED=-7

# planning & kinematics request errors
int32 START_STATE_IN_COLLISION=-10
int32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-11
int32 START_STATE_INVALID=-26

int32 GOAL_IN_COLLISION=-12
int32 GOAL_VIOLATES_PATH_CONSTRAINTS=-13
int32 GOAL_CONSTRAINTS_VIOLATED=-14
int32 GOAL_STATE_INVALID=-27
int32 UNRECOGNIZED_GOAL_TYPE=-28

int32 INVALID_GROUP_NAME=-15
int32 INVALID_GOAL_CONSTRAINTS=-16
int32 INVALID_ROBOT_STATE=-17
int32 INVALID_LINK_NAME=-18
int32 INVALID_OBJECT_NAME=-19

# system errors
int32 FRAME_TRANSFORM_FAILURE=-21
int32 COLLISION_CHECKING_UNAVAILABLE=-22
int32 ROBOT_STATE_STALE=-23
int32 SENSOR_INFO_STALE=-24
int32 COMMUNICATION_FAILURE=-25
int32 CRASH=-29
int32 ABORT=-30

# kinematics errors
int32 NO_IK_SOLUTION=-31

================================================================================
MSG: moveit_msgs/RobotTrajectory
trajectory_msgs/JointTrajectory joint_trajectory
trajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectory
# The header is used to specify the coordinate frame and the reference time for the trajectory durations
Header header

# A representation of a multi-dof joint trajectory (each point is a transformation)
# Each point along the trajectory will include an array of positions/velocities/accelerations
# that has the same length as the array of joint names, and has the same order of joints as 
# the joint names array.

string[] joint_names
MultiDOFJointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectoryPoint
# Each multi-dof joint can specify a transform (up to 6 DOF)
geometry_msgs/Transform[] transforms

# There can be a velocity specified for the origin of the joint 
geometry_msgs/Twist[] velocities

# There can be an acceleration specified for the origin of the joint 
geometry_msgs/Twist[] accelerations

duration time_from_start

================================================================================
MSG: moveit_msgs/MoveGroupSequenceActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MoveGroupSequenceFeedback feedback

================================================================================
MSG: moveit_msgs/MoveGroupSequenceFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# The internal state that the move group action currently is in
string state

"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['moveit_msgs/MoveGroupSequenceActionGoal','moveit_msgs/MoveGroupSequenceActionResult','moveit_msgs/MoveGroupSequenceActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveGroupSequenceAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = moveit_msgs.msg.MoveGroupSequenceActionGoal()
      if self.action_result is None:
        self.action_result = moveit_msgs.msg.MoveGroupSequenceActionResult()
      if self.action_feedback is None:
        self.action_feedback = moveit_msgs.msg.MoveGroupSequenceActionFeedback()
    else:
      self.action_goal = moveit_msgs.msg.MoveGroupSequenceActionGoal()
      self.action_result = moveit_msgs.msg.MoveGroupSequenceActionResult()
      self.action_feedback = moveit_msgs.msg.MoveGroupSequenceActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.request.items)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.items:
        _v1 = val1.req
        _v2 = _v1.workspace_parameters
        _v3 = _v2.header
        _x = _v3.seq
        buff.write(_get_struct_I().pack(_x))
        _v4 = _v3.stamp
        _x = _v4
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v3.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v5 = _v2.min_corner
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v2.max_corner
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = _v1.start_state
        _v8 = _v7.joint_state
        _v9 = _v8.header
        _x = _v9.seq
        buff.write(_get_struct_I().pack(_x))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v8.name)
        buff.write(_struct_I.pack(length))
        for val5 in _v8.name:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v8.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v8.position))
        length = len(_v8.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v8.velocity))
        length = len(_v8.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v8.effort))
        _v11 = _v7.multi_dof_joint_state
        _v12 = _v11.header
        _x = _v12.seq
        buff.write(_get_struct_I().pack(_x))
        _v13 = _v12.stamp
        _x = _v13
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v12.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v11.joint_names)
        buff.write(_struct_I.pack(length))
        for val5 in _v11.joint_names:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v11.transforms)
        buff.write(_struct_I.pack(length))
        for val5 in _v11.transforms:
          _v14 = val5.translation
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v15 = val5.rotation
          _x = _v15
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v11.twist)
        buff.write(_struct_I.pack(length))
        for val5 in _v11.twist:
          _v16 = val5.linear
          _x = _v16
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v17 = val5.angular
          _x = _v17
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v11.wrench)
        buff.write(_struct_I.pack(length))
        for val5 in _v11.wrench:
          _v18 = val5.force
          _x = _v18
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v19 = val5.torque
          _x = _v19
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v7.attached_collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v7.attached_collision_objects:
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v20 = val4.object
          _v21 = _v20.header
          _x = _v21.seq
          buff.write(_get_struct_I().pack(_x))
          _v22 = _v21.stamp
          _x = _v22
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v21.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v23 = _v20.pose
          _v24 = _v23.position
          _x = _v24
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v25 = _v23.orientation
          _x = _v25
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v20.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v26 = _v20.type
          _x = _v26.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v26.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v20.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.dimensions))
          length = len(_v20.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.primitive_poses:
            _v27 = val6.position
            _x = _v27
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v28 = val6.orientation
            _x = _v28
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v20.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(_get_struct_3I().pack(*val7.vertex_indices))
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v20.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.mesh_poses:
            _v29 = val6.position
            _x = _v29
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v30 = val6.orientation
            _x = _v30
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v20.planes)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.planes:
            buff.write(_get_struct_4d().pack(*val6.coef))
          length = len(_v20.plane_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.plane_poses:
            _v31 = val6.position
            _x = _v31
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v32 = val6.orientation
            _x = _v32
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v20.subframe_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.subframe_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v20.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.subframe_poses:
            _v33 = val6.position
            _x = _v33
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v34 = val6.orientation
            _x = _v34
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v20.operation
          buff.write(_get_struct_b().pack(_x))
          length = len(val4.touch_links)
          buff.write(_struct_I.pack(length))
          for val5 in val4.touch_links:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
          _v35 = val4.detach_posture
          _v36 = _v35.header
          _x = _v36.seq
          buff.write(_get_struct_I().pack(_x))
          _v37 = _v36.stamp
          _x = _v37
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v36.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v35.joint_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v35.joint_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v35.points)
          buff.write(_struct_I.pack(length))
          for val6 in _v35.points:
            length = len(val6.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.positions))
            length = len(val6.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.velocities))
            length = len(val6.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.accelerations))
            length = len(val6.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.effort))
            _v38 = val6.time_from_start
            _x = _v38
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        _x = _v7.is_diff
        buff.write(_get_struct_B().pack(_x))
        length = len(_v1.goal_constraints)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.goal_constraints:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val3.joint_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.joint_constraints:
            _x = val4.joint_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
          length = len(val3.position_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.position_constraints:
            _v39 = val4.header
            _x = _v39.seq
            buff.write(_get_struct_I().pack(_x))
            _v40 = _v39.stamp
            _x = _v40
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v39.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v41 = val4.target_point_offset
            _x = _v41
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v42 = val4.constraint_region
            length = len(_v42.primitives)
            buff.write(_struct_I.pack(length))
            for val6 in _v42.primitives:
              _x = val6.type
              buff.write(_get_struct_B().pack(_x))
              length = len(val6.dimensions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val6.dimensions))
            length = len(_v42.primitive_poses)
            buff.write(_struct_I.pack(length))
            for val6 in _v42.primitive_poses:
              _v43 = val6.position
              _x = _v43
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v44 = val6.orientation
              _x = _v44
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            length = len(_v42.meshes)
            buff.write(_struct_I.pack(length))
            for val6 in _v42.meshes:
              length = len(val6.triangles)
              buff.write(_struct_I.pack(length))
              for val7 in val6.triangles:
                buff.write(_get_struct_3I().pack(*val7.vertex_indices))
              length = len(val6.vertices)
              buff.write(_struct_I.pack(length))
              for val7 in val6.vertices:
                _x = val7
                buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            length = len(_v42.mesh_poses)
            buff.write(_struct_I.pack(length))
            for val6 in _v42.mesh_poses:
              _v45 = val6.position
              _x = _v45
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v46 = val6.orientation
              _x = _v46
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.weight
            buff.write(_get_struct_d().pack(_x))
          length = len(val3.orientation_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.orientation_constraints:
            _v47 = val4.header
            _x = _v47.seq
            buff.write(_get_struct_I().pack(_x))
            _v48 = _v47.stamp
            _x = _v48
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v47.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v49 = val4.orientation
            _x = _v49
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
          length = len(val3.visibility_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.visibility_constraints:
            _x = val4.target_radius
            buff.write(_get_struct_d().pack(_x))
            _v50 = val4.target_pose
            _v51 = _v50.header
            _x = _v51.seq
            buff.write(_get_struct_I().pack(_x))
            _v52 = _v51.stamp
            _x = _v52
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v51.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v53 = _v50.pose
            _v54 = _v53.position
            _x = _v54
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v55 = _v53.orientation
            _x = _v55
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.cone_sides
            buff.write(_get_struct_i().pack(_x))
            _v56 = val4.sensor_pose
            _v57 = _v56.header
            _x = _v57.seq
            buff.write(_get_struct_I().pack(_x))
            _v58 = _v57.stamp
            _x = _v58
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v57.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v59 = _v56.pose
            _v60 = _v59.position
            _x = _v60
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v61 = _v59.orientation
            _x = _v61
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4
            buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _v62 = _v1.path_constraints
        _x = _v62.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v62.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v62.joint_constraints:
          _x = val4.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(_v62.position_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v62.position_constraints:
          _v63 = val4.header
          _x = _v63.seq
          buff.write(_get_struct_I().pack(_x))
          _v64 = _v63.stamp
          _x = _v64
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v63.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v65 = val4.target_point_offset
          _x = _v65
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v66 = val4.constraint_region
          length = len(_v66.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v66.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.dimensions))
          length = len(_v66.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v66.primitive_poses:
            _v67 = val6.position
            _x = _v67
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v68 = val6.orientation
            _x = _v68
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v66.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v66.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(_get_struct_3I().pack(*val7.vertex_indices))
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v66.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v66.mesh_poses:
            _v69 = val6.position
            _x = _v69
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v70 = val6.orientation
            _x = _v70
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        length = len(_v62.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v62.orientation_constraints:
          _v71 = val4.header
          _x = _v71.seq
          buff.write(_get_struct_I().pack(_x))
          _v72 = _v71.stamp
          _x = _v72
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v71.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v73 = val4.orientation
          _x = _v73
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
        length = len(_v62.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v62.visibility_constraints:
          _x = val4.target_radius
          buff.write(_get_struct_d().pack(_x))
          _v74 = val4.target_pose
          _v75 = _v74.header
          _x = _v75.seq
          buff.write(_get_struct_I().pack(_x))
          _v76 = _v75.stamp
          _x = _v76
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v75.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v77 = _v74.pose
          _v78 = _v77.position
          _x = _v78
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v79 = _v77.orientation
          _x = _v79
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.cone_sides
          buff.write(_get_struct_i().pack(_x))
          _v80 = val4.sensor_pose
          _v81 = _v80.header
          _x = _v81.seq
          buff.write(_get_struct_I().pack(_x))
          _v82 = _v81.stamp
          _x = _v82
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v81.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v83 = _v80.pose
          _v84 = _v83.position
          _x = _v84
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v85 = _v83.orientation
          _x = _v85
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _v86 = _v1.trajectory_constraints
        length = len(_v86.constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v86.constraints:
          _x = val4.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val4.joint_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.joint_constraints:
            _x = val5.joint_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5
            buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
          length = len(val4.position_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.position_constraints:
            _v87 = val5.header
            _x = _v87.seq
            buff.write(_get_struct_I().pack(_x))
            _v88 = _v87.stamp
            _x = _v88
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v87.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v89 = val5.target_point_offset
            _x = _v89
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v90 = val5.constraint_region
            length = len(_v90.primitives)
            buff.write(_struct_I.pack(length))
            for val7 in _v90.primitives:
              _x = val7.type
              buff.write(_get_struct_B().pack(_x))
              length = len(val7.dimensions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val7.dimensions))
            length = len(_v90.primitive_poses)
            buff.write(_struct_I.pack(length))
            for val7 in _v90.primitive_poses:
              _v91 = val7.position
              _x = _v91
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v92 = val7.orientation
              _x = _v92
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            length = len(_v90.meshes)
            buff.write(_struct_I.pack(length))
            for val7 in _v90.meshes:
              length = len(val7.triangles)
              buff.write(_struct_I.pack(length))
              for val8 in val7.triangles:
                buff.write(_get_struct_3I().pack(*val8.vertex_indices))
              length = len(val7.vertices)
              buff.write(_struct_I.pack(length))
              for val8 in val7.vertices:
                _x = val8
                buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            length = len(_v90.mesh_poses)
            buff.write(_struct_I.pack(length))
            for val7 in _v90.mesh_poses:
              _v93 = val7.position
              _x = _v93
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v94 = val7.orientation
              _x = _v94
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.weight
            buff.write(_get_struct_d().pack(_x))
          length = len(val4.orientation_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.orientation_constraints:
            _v95 = val5.header
            _x = _v95.seq
            buff.write(_get_struct_I().pack(_x))
            _v96 = _v95.stamp
            _x = _v96
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v95.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v97 = val5.orientation
            _x = _v97
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5
            buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
          length = len(val4.visibility_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.visibility_constraints:
            _x = val5.target_radius
            buff.write(_get_struct_d().pack(_x))
            _v98 = val5.target_pose
            _v99 = _v98.header
            _x = _v99.seq
            buff.write(_get_struct_I().pack(_x))
            _v100 = _v99.stamp
            _x = _v100
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v99.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v101 = _v98.pose
            _v102 = _v101.position
            _x = _v102
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v103 = _v101.orientation
            _x = _v103
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.cone_sides
            buff.write(_get_struct_i().pack(_x))
            _v104 = val5.sensor_pose
            _v105 = _v104.header
            _x = _v105.seq
            buff.write(_get_struct_I().pack(_x))
            _v106 = _v105.stamp
            _x = _v106
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v105.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v107 = _v104.pose
            _v108 = _v107.position
            _x = _v108
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v109 = _v107.orientation
            _x = _v109
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5
            buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        length = len(_v1.reference_trajectories)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.reference_trajectories:
          _v110 = val3.header
          _x = _v110.seq
          buff.write(_get_struct_I().pack(_x))
          _v111 = _v110.stamp
          _x = _v111
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v110.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val3.joint_trajectory)
          buff.write(_struct_I.pack(length))
          for val4 in val3.joint_trajectory:
            _v112 = val4.header
            _x = _v112.seq
            buff.write(_get_struct_I().pack(_x))
            _v113 = _v112.stamp
            _x = _v113
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v112.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            length = len(val4.joint_names)
            buff.write(_struct_I.pack(length))
            for val5 in val4.joint_names:
              length = len(val5)
              if python3 or type(val5) == unicode:
                val5 = val5.encode('utf-8')
                length = len(val5)
              buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
            length = len(val4.points)
            buff.write(_struct_I.pack(length))
            for val5 in val4.points:
              length = len(val5.positions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val5.positions))
              length = len(val5.velocities)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val5.velocities))
              length = len(val5.accelerations)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val5.accelerations))
              length = len(val5.effort)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val5.effort))
              _v114 = val5.time_from_start
              _x = _v114
              buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          length = len(val3.cartesian_trajectory)
          buff.write(_struct_I.pack(length))
          for val4 in val3.cartesian_trajectory:
            _v115 = val4.header
            _x = _v115.seq
            buff.write(_get_struct_I().pack(_x))
            _v116 = _v115.stamp
            _x = _v116
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v115.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4.tracked_frame
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            length = len(val4.points)
            buff.write(_struct_I.pack(length))
            for val5 in val4.points:
              _v117 = val5.point
              _v118 = _v117.pose
              _v119 = _v118.position
              _x = _v119
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v120 = _v118.orientation
              _x = _v120
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
              _v121 = _v117.velocity
              _v122 = _v121.linear
              _x = _v122
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v123 = _v121.angular
              _x = _v123
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v124 = _v117.acceleration
              _v125 = _v124.linear
              _x = _v125
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v126 = _v124.angular
              _x = _v126
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v127 = val5.time_from_start
              _x = _v127
              buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = _v1.pipeline_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.planner_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.group_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1
        buff.write(_get_struct_i3d().pack(_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor, _x.max_acceleration_scaling_factor))
        _x = _v1.cartesian_speed_limited_link
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.max_cartesian_speed
        buff.write(_get_struct_d().pack(_x))
        _x = val1.blend_radius
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms:
        _v128 = val1.translation
        _x = _v128
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v129 = val1.rotation
        _x = _v129
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist:
        _v130 = val1.linear
        _x = _v130
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v131 = val1.angular
        _x = _v131
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench:
        _v132 = val1.force
        _x = _v132
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v133 = val1.torque
        _x = _v133
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v134 = val1.object
        _v135 = _v134.header
        _x = _v135.seq
        buff.write(_get_struct_I().pack(_x))
        _v136 = _v135.stamp
        _x = _v136
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v135.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v137 = _v134.pose
        _v138 = _v137.position
        _x = _v138
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v139 = _v137.orientation
        _x = _v139
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v134.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v140 = _v134.type
        _x = _v140.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v140.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v134.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v134.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v134.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v134.primitive_poses:
          _v141 = val3.position
          _x = _v141
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v142 = val3.orientation
          _x = _v142
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v134.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v134.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v134.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v134.mesh_poses:
          _v143 = val3.position
          _x = _v143
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v144 = val3.orientation
          _x = _v144
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v134.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v134.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v134.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v134.plane_poses:
          _v145 = val3.position
          _x = _v145
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v146 = val3.orientation
          _x = _v146
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v134.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v134.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v134.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v134.subframe_poses:
          _v147 = val3.position
          _x = _v147
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v148 = val3.orientation
          _x = _v148
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v134.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v149 = val1.detach_posture
        _v150 = _v149.header
        _x = _v150.seq
        buff.write(_get_struct_I().pack(_x))
        _v151 = _v150.stamp
        _x = _v151
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v150.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v149.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v149.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v149.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v149.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v152 = val3.time_from_start
          _x = _v152
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms:
        _v153 = val1.header
        _x = _v153.seq
        buff.write(_get_struct_I().pack(_x))
        _v154 = _v153.stamp
        _x = _v154
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v153.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v155 = val1.transform
        _v156 = _v155.translation
        _x = _v156
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v157 = _v155.rotation
        _x = _v157
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*val1.enabled))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.padding
        buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.scale
        buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v158 = val1.color
        _x = _v158
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects:
        _v159 = val1.header
        _x = _v159.seq
        buff.write(_get_struct_I().pack(_x))
        _v160 = _v159.stamp
        _x = _v160
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v159.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v161 = val1.pose
        _v162 = _v161.position
        _x = _v162
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v163 = _v161.orientation
        _x = _v163
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v164 = val1.type
        _x = _v164.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v164.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          _x = val2.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.dimensions))
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v165 = val2.position
          _x = _v165
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v166 = val2.orientation
          _x = _v166
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(_get_struct_3I().pack(*val3.vertex_indices))
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v167 = val2.position
          _x = _v167
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v168 = val2.orientation
          _x = _v168
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(_get_struct_4d().pack(*val2.coef))
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v169 = val2.position
          _x = _v169
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v170 = val2.orientation
          _x = _v170
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.subframe_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        length = len(val1.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_poses:
          _v171 = val2.position
          _x = _v171
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v172 = val2.orientation
          _x = _v172
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.operation
        buff.write(_get_struct_b().pack(_x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution
      buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data))
      _x = self
      buff.write(_get_struct_3BidBid3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.is_diff, _x.action_goal.goal.planning_options.plan_only, _x.action_goal.goal.planning_options.look_around, _x.action_goal.goal.planning_options.look_around_attempts, _x.action_goal.goal.planning_options.max_safe_execution_cost, _x.action_goal.goal.planning_options.replan, _x.action_goal.goal.planning_options.replan_attempts, _x.action_goal.goal.planning_options.replan_delay, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.action_result.result.response.error_code.val, _x.action_result.result.response.sequence_start.joint_state.header.seq, _x.action_result.result.response.sequence_start.joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.joint_state.header.stamp.nsecs))
      _x = self.action_result.result.response.sequence_start.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.response.sequence_start.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_result.result.response.sequence_start.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_result.result.response.sequence_start.joint_state.position))
      length = len(self.action_result.result.response.sequence_start.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_result.result.response.sequence_start.joint_state.velocity))
      length = len(self.action_result.result.response.sequence_start.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_result.result.response.sequence_start.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.response.sequence_start.multi_dof_joint_state.header.seq, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_result.result.response.sequence_start.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms:
        _v173 = val1.translation
        _x = _v173
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v174 = val1.rotation
        _x = _v174
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.twist:
        _v175 = val1.linear
        _x = _v175
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v176 = val1.angular
        _x = _v176
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench:
        _v177 = val1.force
        _x = _v177
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v178 = val1.torque
        _x = _v178
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.response.sequence_start.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v179 = val1.object
        _v180 = _v179.header
        _x = _v180.seq
        buff.write(_get_struct_I().pack(_x))
        _v181 = _v180.stamp
        _x = _v181
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v180.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v182 = _v179.pose
        _v183 = _v182.position
        _x = _v183
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v184 = _v182.orientation
        _x = _v184
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v179.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v185 = _v179.type
        _x = _v185.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v185.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v179.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v179.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v179.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v179.primitive_poses:
          _v186 = val3.position
          _x = _v186
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v187 = val3.orientation
          _x = _v187
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v179.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v179.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v179.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v179.mesh_poses:
          _v188 = val3.position
          _x = _v188
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v189 = val3.orientation
          _x = _v189
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v179.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v179.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v179.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v179.plane_poses:
          _v190 = val3.position
          _x = _v190
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v191 = val3.orientation
          _x = _v191
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v179.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v179.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v179.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v179.subframe_poses:
          _v192 = val3.position
          _x = _v192
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v193 = val3.orientation
          _x = _v193
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v179.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v194 = val1.detach_posture
        _v195 = _v194.header
        _x = _v195.seq
        buff.write(_get_struct_I().pack(_x))
        _v196 = _v195.stamp
        _x = _v196
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v195.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v194.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v194.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v194.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v194.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v197 = val3.time_from_start
          _x = _v197
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_result.result.response.sequence_start.is_diff
      buff.write(_get_struct_B().pack(_x))
      length = len(self.action_result.result.response.planned_trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.planned_trajectories:
        _v198 = val1.joint_trajectory
        _v199 = _v198.header
        _x = _v199.seq
        buff.write(_get_struct_I().pack(_x))
        _v200 = _v199.stamp
        _x = _v200
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v199.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v198.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v198.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v198.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v198.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v201 = val3.time_from_start
          _x = _v201
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v202 = val1.multi_dof_joint_trajectory
        _v203 = _v202.header
        _x = _v203.seq
        buff.write(_get_struct_I().pack(_x))
        _v204 = _v203.stamp
        _x = _v204
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v203.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v202.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v202.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v202.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v202.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v205 = val4.translation
            _x = _v205
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v206 = val4.rotation
            _x = _v206
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v207 = val4.linear
            _x = _v207
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v208 = val4.angular
            _x = _v208
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v209 = val4.linear
            _x = _v209
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v210 = val4.angular
            _x = _v210
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v211 = val3.time_from_start
          _x = _v211
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_d3I().pack(_x.action_result.result.response.planning_time, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = moveit_msgs.msg.MoveGroupSequenceActionGoal()
      if self.action_result is None:
        self.action_result = moveit_msgs.msg.MoveGroupSequenceActionResult()
      if self.action_feedback is None:
        self.action_feedback = moveit_msgs.msg.MoveGroupSequenceActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.items = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.MotionSequenceItem()
        _v212 = val1.req
        _v213 = _v212.workspace_parameters
        _v214 = _v213.header
        start = end
        end += 4
        (_v214.seq,) = _get_struct_I().unpack(str[start:end])
        _v215 = _v214.stamp
        _x = _v215
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v214.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v214.frame_id = str[start:end]
        _v216 = _v213.min_corner
        _x = _v216
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v217 = _v213.max_corner
        _x = _v217
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v218 = _v212.start_state
        _v219 = _v218.joint_state
        _v220 = _v219.header
        start = end
        end += 4
        (_v220.seq,) = _get_struct_I().unpack(str[start:end])
        _v221 = _v220.stamp
        _x = _v221
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v220.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v220.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v219.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v219.name.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v219.position = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v219.velocity = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v219.effort = s.unpack(str[start:end])
        _v222 = _v218.multi_dof_joint_state
        _v223 = _v222.header
        start = end
        end += 4
        (_v223.seq,) = _get_struct_I().unpack(str[start:end])
        _v224 = _v223.stamp
        _x = _v224
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v223.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v223.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v222.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v222.joint_names.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v222.transforms = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Transform()
          _v225 = val5.translation
          _x = _v225
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v226 = val5.rotation
          _x = _v226
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v222.transforms.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v222.twist = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Twist()
          _v227 = val5.linear
          _x = _v227
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v228 = val5.angular
          _x = _v228
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v222.twist.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v222.wrench = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Wrench()
          _v229 = val5.force
          _x = _v229
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v230 = val5.torque
          _x = _v230
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v222.wrench.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v218.attached_collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AttachedCollisionObject()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v231 = val4.object
          _v232 = _v231.header
          start = end
          end += 4
          (_v232.seq,) = _get_struct_I().unpack(str[start:end])
          _v233 = _v232.stamp
          _x = _v233
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v232.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v232.frame_id = str[start:end]
          _v234 = _v231.pose
          _v235 = _v234.position
          _x = _v235
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v236 = _v234.orientation
          _x = _v236
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v231.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v231.id = str[start:end]
          _v237 = _v231.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v237.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v237.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v237.db = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v237.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v231.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = s.unpack(str[start:end])
            _v231.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v231.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v238 = val6.position
            _x = _v238
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v239 = val6.orientation
            _x = _v239
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v231.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v231.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v231.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v231.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v240 = val6.position
            _x = _v240
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v241 = val6.orientation
            _x = _v241
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v231.mesh_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v231.planes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val6.coef = _get_struct_4d().unpack(str[start:end])
            _v231.planes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v231.plane_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v242 = val6.position
            _x = _v242
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v243 = val6.orientation
            _x = _v243
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v231.plane_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v231.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v231.subframe_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v231.subframe_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v244 = val6.position
            _x = _v244
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v245 = val6.orientation
            _x = _v245
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v231.subframe_poses.append(val6)
          start = end
          end += 1
          (_v231.operation,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.touch_links = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5 = str[start:end]
            val4.touch_links.append(val5)
          _v246 = val4.detach_posture
          _v247 = _v246.header
          start = end
          end += 4
          (_v247.seq,) = _get_struct_I().unpack(str[start:end])
          _v248 = _v247.stamp
          _x = _v248
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v247.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v247.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v246.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v246.joint_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v246.points = []
          for i in range(0, length):
            val6 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.positions = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.velocities = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.accelerations = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.effort = s.unpack(str[start:end])
            _v249 = val6.time_from_start
            _x = _v249
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v246.points.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v218.attached_collision_objects.append(val4)
        start = end
        end += 1
        (_v218.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v218.is_diff = bool(_v218.is_diff)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v212.goal_constraints = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.Constraints()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.joint_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.JointConstraint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.joint_name = str[start:end]
            _x = val4
            start = end
            end += 32
            (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val3.joint_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.position_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.PositionConstraint()
            _v250 = val4.header
            start = end
            end += 4
            (_v250.seq,) = _get_struct_I().unpack(str[start:end])
            _v251 = _v250.stamp
            _x = _v251
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v250.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v250.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.link_name = str[start:end]
            _v252 = val4.target_point_offset
            _x = _v252
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v253 = val4.constraint_region
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v253.primitives = []
            for i in range(0, length):
              val6 = shape_msgs.msg.SolidPrimitive()
              start = end
              end += 1
              (val6.type,) = _get_struct_B().unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val6.dimensions = s.unpack(str[start:end])
              _v253.primitives.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v253.primitive_poses = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Pose()
              _v254 = val6.position
              _x = _v254
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v255 = val6.orientation
              _x = _v255
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v253.primitive_poses.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v253.meshes = []
            for i in range(0, length):
              val6 = shape_msgs.msg.Mesh()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val6.triangles = []
              for i in range(0, length):
                val7 = shape_msgs.msg.MeshTriangle()
                start = end
                end += 12
                val7.vertex_indices = _get_struct_3I().unpack(str[start:end])
                val6.triangles.append(val7)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val6.vertices = []
              for i in range(0, length):
                val7 = geometry_msgs.msg.Point()
                _x = val7
                start = end
                end += 24
                (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
                val6.vertices.append(val7)
              _v253.meshes.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v253.mesh_poses = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Pose()
              _v256 = val6.position
              _x = _v256
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v257 = val6.orientation
              _x = _v257
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v253.mesh_poses.append(val6)
            start = end
            end += 8
            (val4.weight,) = _get_struct_d().unpack(str[start:end])
            val3.position_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.orientation_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.OrientationConstraint()
            _v258 = val4.header
            start = end
            end += 4
            (_v258.seq,) = _get_struct_I().unpack(str[start:end])
            _v259 = _v258.stamp
            _x = _v259
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v258.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v258.frame_id = str[start:end]
            _v260 = val4.orientation
            _x = _v260
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.link_name = str[start:end]
            _x = val4
            start = end
            end += 33
            (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
            val3.orientation_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.visibility_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.VisibilityConstraint()
            start = end
            end += 8
            (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
            _v261 = val4.target_pose
            _v262 = _v261.header
            start = end
            end += 4
            (_v262.seq,) = _get_struct_I().unpack(str[start:end])
            _v263 = _v262.stamp
            _x = _v263
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v262.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v262.frame_id = str[start:end]
            _v264 = _v261.pose
            _v265 = _v264.position
            _x = _v265
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v266 = _v264.orientation
            _x = _v266
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
            _v267 = val4.sensor_pose
            _v268 = _v267.header
            start = end
            end += 4
            (_v268.seq,) = _get_struct_I().unpack(str[start:end])
            _v269 = _v268.stamp
            _x = _v269
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v268.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v268.frame_id = str[start:end]
            _v270 = _v267.pose
            _v271 = _v270.position
            _x = _v271
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v272 = _v270.orientation
            _x = _v272
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _x = val4
            start = end
            end += 25
            (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
            val3.visibility_constraints.append(val4)
          _v212.goal_constraints.append(val3)
        _v273 = _v212.path_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v273.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v273.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v273.joint_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.joint_name = str[start:end]
          _x = val4
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          _v273.joint_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v273.position_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.PositionConstraint()
          _v274 = val4.header
          start = end
          end += 4
          (_v274.seq,) = _get_struct_I().unpack(str[start:end])
          _v275 = _v274.stamp
          _x = _v275
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v274.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v274.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v276 = val4.target_point_offset
          _x = _v276
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v277 = val4.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v277.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = s.unpack(str[start:end])
            _v277.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v277.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v278 = val6.position
            _x = _v278
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v279 = val6.orientation
            _x = _v279
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v277.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v277.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v277.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v277.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v280 = val6.position
            _x = _v280
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v281 = val6.orientation
            _x = _v281
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v277.mesh_poses.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v273.position_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v273.orientation_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.OrientationConstraint()
          _v282 = val4.header
          start = end
          end += 4
          (_v282.seq,) = _get_struct_I().unpack(str[start:end])
          _v283 = _v282.stamp
          _x = _v283
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v282.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v282.frame_id = str[start:end]
          _v284 = val4.orientation
          _x = _v284
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _x = val4
          start = end
          end += 33
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
          _v273.orientation_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v273.visibility_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v285 = val4.target_pose
          _v286 = _v285.header
          start = end
          end += 4
          (_v286.seq,) = _get_struct_I().unpack(str[start:end])
          _v287 = _v286.stamp
          _x = _v287
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v286.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v286.frame_id = str[start:end]
          _v288 = _v285.pose
          _v289 = _v288.position
          _x = _v289
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v290 = _v288.orientation
          _x = _v290
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v291 = val4.sensor_pose
          _v292 = _v291.header
          start = end
          end += 4
          (_v292.seq,) = _get_struct_I().unpack(str[start:end])
          _v293 = _v292.stamp
          _x = _v293
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v292.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v292.frame_id = str[start:end]
          _v294 = _v291.pose
          _v295 = _v294.position
          _x = _v295
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v296 = _v294.orientation
          _x = _v296
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val4
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          _v273.visibility_constraints.append(val4)
        _v297 = _v212.trajectory_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v297.constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.Constraints()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.joint_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.JointConstraint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.joint_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.joint_name = str[start:end]
            _x = val5
            start = end
            end += 32
            (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val4.joint_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.position_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.PositionConstraint()
            _v298 = val5.header
            start = end
            end += 4
            (_v298.seq,) = _get_struct_I().unpack(str[start:end])
            _v299 = _v298.stamp
            _x = _v299
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v298.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v298.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.link_name = str[start:end]
            _v300 = val5.target_point_offset
            _x = _v300
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v301 = val5.constraint_region
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v301.primitives = []
            for i in range(0, length):
              val7 = shape_msgs.msg.SolidPrimitive()
              start = end
              end += 1
              (val7.type,) = _get_struct_B().unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val7.dimensions = s.unpack(str[start:end])
              _v301.primitives.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v301.primitive_poses = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Pose()
              _v302 = val7.position
              _x = _v302
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v303 = val7.orientation
              _x = _v303
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v301.primitive_poses.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v301.meshes = []
            for i in range(0, length):
              val7 = shape_msgs.msg.Mesh()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val7.triangles = []
              for i in range(0, length):
                val8 = shape_msgs.msg.MeshTriangle()
                start = end
                end += 12
                val8.vertex_indices = _get_struct_3I().unpack(str[start:end])
                val7.triangles.append(val8)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val7.vertices = []
              for i in range(0, length):
                val8 = geometry_msgs.msg.Point()
                _x = val8
                start = end
                end += 24
                (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
                val7.vertices.append(val8)
              _v301.meshes.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v301.mesh_poses = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Pose()
              _v304 = val7.position
              _x = _v304
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v305 = val7.orientation
              _x = _v305
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v301.mesh_poses.append(val7)
            start = end
            end += 8
            (val5.weight,) = _get_struct_d().unpack(str[start:end])
            val4.position_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.orientation_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.OrientationConstraint()
            _v306 = val5.header
            start = end
            end += 4
            (_v306.seq,) = _get_struct_I().unpack(str[start:end])
            _v307 = _v306.stamp
            _x = _v307
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v306.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v306.frame_id = str[start:end]
            _v308 = val5.orientation
            _x = _v308
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.link_name = str[start:end]
            _x = val5
            start = end
            end += 33
            (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
            val4.orientation_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.visibility_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.VisibilityConstraint()
            start = end
            end += 8
            (val5.target_radius,) = _get_struct_d().unpack(str[start:end])
            _v309 = val5.target_pose
            _v310 = _v309.header
            start = end
            end += 4
            (_v310.seq,) = _get_struct_I().unpack(str[start:end])
            _v311 = _v310.stamp
            _x = _v311
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v310.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v310.frame_id = str[start:end]
            _v312 = _v309.pose
            _v313 = _v312.position
            _x = _v313
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v314 = _v312.orientation
            _x = _v314
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (val5.cone_sides,) = _get_struct_i().unpack(str[start:end])
            _v315 = val5.sensor_pose
            _v316 = _v315.header
            start = end
            end += 4
            (_v316.seq,) = _get_struct_I().unpack(str[start:end])
            _v317 = _v316.stamp
            _x = _v317
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v316.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v316.frame_id = str[start:end]
            _v318 = _v315.pose
            _v319 = _v318.position
            _x = _v319
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v320 = _v318.orientation
            _x = _v320
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _x = val5
            start = end
            end += 25
            (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
            val4.visibility_constraints.append(val5)
          _v297.constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v212.reference_trajectories = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.GenericTrajectory()
          _v321 = val3.header
          start = end
          end += 4
          (_v321.seq,) = _get_struct_I().unpack(str[start:end])
          _v322 = _v321.stamp
          _x = _v322
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v321.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v321.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.joint_trajectory = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectory()
            _v323 = val4.header
            start = end
            end += 4
            (_v323.seq,) = _get_struct_I().unpack(str[start:end])
            _v324 = _v323.stamp
            _x = _v324
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v323.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v323.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.joint_names = []
            for i in range(0, length):
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              start = end
              end += length
              if python3:
                val5 = str[start:end].decode('utf-8', 'rosmsg')
              else:
                val5 = str[start:end]
              val4.joint_names.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.points = []
            for i in range(0, length):
              val5 = trajectory_msgs.msg.JointTrajectoryPoint()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.positions = s.unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.velocities = s.unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.accelerations = s.unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.effort = s.unpack(str[start:end])
              _v325 = val5.time_from_start
              _x = _v325
              start = end
              end += 8
              (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
              val4.points.append(val5)
            val3.joint_trajectory.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.cartesian_trajectory = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.CartesianTrajectory()
            _v326 = val4.header
            start = end
            end += 4
            (_v326.seq,) = _get_struct_I().unpack(str[start:end])
            _v327 = _v326.stamp
            _x = _v327
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v326.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v326.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.tracked_frame = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.tracked_frame = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.points = []
            for i in range(0, length):
              val5 = moveit_msgs.msg.CartesianTrajectoryPoint()
              _v328 = val5.point
              _v329 = _v328.pose
              _v330 = _v329.position
              _x = _v330
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v331 = _v329.orientation
              _x = _v331
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v332 = _v328.velocity
              _v333 = _v332.linear
              _x = _v333
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v334 = _v332.angular
              _x = _v334
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v335 = _v328.acceleration
              _v336 = _v335.linear
              _x = _v336
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v337 = _v335.angular
              _x = _v337
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v338 = val5.time_from_start
              _x = _v338
              start = end
              end += 8
              (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
              val4.points.append(val5)
            val3.cartesian_trajectory.append(val4)
          _v212.reference_trajectories.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v212.pipeline_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v212.pipeline_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v212.planner_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v212.planner_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v212.group_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v212.group_name = str[start:end]
        _x = _v212
        start = end
        end += 28
        (_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor, _x.max_acceleration_scaling_factor,) = _get_struct_i3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v212.cartesian_speed_limited_link = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v212.cartesian_speed_limited_link = str[start:end]
        start = end
        end += 8
        (_v212.max_cartesian_speed,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 8
        (val1.blend_radius,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.request.items.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v339 = val1.translation
        _x = _v339
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v340 = val1.rotation
        _x = _v340
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v341 = val1.linear
        _x = _v341
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v342 = val1.angular
        _x = _v342
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v343 = val1.force
        _x = _v343
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v344 = val1.torque
        _x = _v344
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v345 = val1.object
        _v346 = _v345.header
        start = end
        end += 4
        (_v346.seq,) = _get_struct_I().unpack(str[start:end])
        _v347 = _v346.stamp
        _x = _v347
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v346.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v346.frame_id = str[start:end]
        _v348 = _v345.pose
        _v349 = _v348.position
        _x = _v349
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v350 = _v348.orientation
        _x = _v350
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v345.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v345.id = str[start:end]
        _v351 = _v345.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v351.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v351.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v351.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v351.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v345.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v345.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v345.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v352 = val3.position
          _x = _v352
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v353 = val3.orientation
          _x = _v353
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v345.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v345.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v345.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v345.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v354 = val3.position
          _x = _v354
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v355 = val3.orientation
          _x = _v355
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v345.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v345.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v345.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v345.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v356 = val3.position
          _x = _v356
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v357 = val3.orientation
          _x = _v357
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v345.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v345.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v345.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v345.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v358 = val3.position
          _x = _v358
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v359 = val3.orientation
          _x = _v359
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v345.subframe_poses.append(val3)
        start = end
        end += 1
        (_v345.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v360 = val1.detach_posture
        _v361 = _v360.header
        start = end
        end += 4
        (_v361.seq,) = _get_struct_I().unpack(str[start:end])
        _v362 = _v361.stamp
        _x = _v362
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v361.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v361.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v360.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v360.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v360.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v363 = val3.time_from_start
          _x = _v363
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v360.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff = bool(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v364 = val1.header
        start = end
        end += 4
        (_v364.seq,) = _get_struct_I().unpack(str[start:end])
        _v365 = _v364.stamp
        _x = _v365
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v364.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v364.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.child_frame_id = str[start:end]
        _v366 = val1.transform
        _v367 = _v366.translation
        _x = _v367
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v368 = _v366.rotation
        _x = _v368
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.enabled = s.unpack(str[start:end])
        val1.enabled = list(map(bool, val1.enabled))
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = s.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = list(map(bool, self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v369 = val1.color
        _x = _v369
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v370 = val1.header
        start = end
        end += 4
        (_v370.seq,) = _get_struct_I().unpack(str[start:end])
        _v371 = _v370.stamp
        _x = _v371
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v370.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v370.frame_id = str[start:end]
        _v372 = val1.pose
        _v373 = _v372.position
        _x = _v373
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v374 = _v372.orientation
        _x = _v374
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v375 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v375.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v375.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v375.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v375.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.dimensions = s.unpack(str[start:end])
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v376 = val2.position
          _x = _v376
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v377 = val2.orientation
          _x = _v377
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v378 = val2.position
          _x = _v378
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v379 = val2.orientation
          _x = _v379
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = _get_struct_4d().unpack(str[start:end])
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v380 = val2.position
          _x = _v380
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v381 = val2.orientation
          _x = _v381
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.subframe_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v382 = val2.position
          _x = _v382
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v383 = val2.orientation
          _x = _v383
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.subframe_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary = bool(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data = s.unpack(str[start:end])
      _x = self
      start = end
      end += 40
      (_x.action_goal.goal.planning_options.planning_scene_diff.is_diff, _x.action_goal.goal.planning_options.plan_only, _x.action_goal.goal.planning_options.look_around, _x.action_goal.goal.planning_options.look_around_attempts, _x.action_goal.goal.planning_options.max_safe_execution_cost, _x.action_goal.goal.planning_options.replan, _x.action_goal.goal.planning_options.replan_attempts, _x.action_goal.goal.planning_options.replan_delay, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3BidBid3I().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.is_diff = bool(self.action_goal.goal.planning_options.planning_scene_diff.is_diff)
      self.action_goal.goal.planning_options.plan_only = bool(self.action_goal.goal.planning_options.plan_only)
      self.action_goal.goal.planning_options.look_around = bool(self.action_goal.goal.planning_options.look_around)
      self.action_goal.goal.planning_options.replan = bool(self.action_goal.goal.planning_options.replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.action_result.result.response.error_code.val, _x.action_result.result.response.sequence_start.joint_state.header.seq, _x.action_result.result.response.sequence_start.joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.joint_state.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.response.sequence_start.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.response.sequence_start.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_result.result.response.sequence_start.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_result.result.response.sequence_start.joint_state.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_result.result.response.sequence_start.joint_state.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_result.result.response.sequence_start.joint_state.effort = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.action_result.result.response.sequence_start.multi_dof_joint_state.header.seq, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.response.sequence_start.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.response.sequence_start.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v384 = val1.translation
        _x = _v384
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v385 = val1.rotation
        _x = _v385
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v386 = val1.linear
        _x = _v386
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v387 = val1.angular
        _x = _v387
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v388 = val1.force
        _x = _v388
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v389 = val1.torque
        _x = _v389
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v390 = val1.object
        _v391 = _v390.header
        start = end
        end += 4
        (_v391.seq,) = _get_struct_I().unpack(str[start:end])
        _v392 = _v391.stamp
        _x = _v392
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v391.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v391.frame_id = str[start:end]
        _v393 = _v390.pose
        _v394 = _v393.position
        _x = _v394
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v395 = _v393.orientation
        _x = _v395
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v390.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v390.id = str[start:end]
        _v396 = _v390.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v396.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v396.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v396.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v396.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v390.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v390.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v390.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v397 = val3.position
          _x = _v397
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v398 = val3.orientation
          _x = _v398
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v390.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v390.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v390.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v390.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v399 = val3.position
          _x = _v399
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v400 = val3.orientation
          _x = _v400
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v390.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v390.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v390.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v390.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v401 = val3.position
          _x = _v401
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v402 = val3.orientation
          _x = _v402
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v390.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v390.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v390.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v390.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v403 = val3.position
          _x = _v403
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v404 = val3.orientation
          _x = _v404
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v390.subframe_poses.append(val3)
        start = end
        end += 1
        (_v390.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v405 = val1.detach_posture
        _v406 = _v405.header
        start = end
        end += 4
        (_v406.seq,) = _get_struct_I().unpack(str[start:end])
        _v407 = _v406.stamp
        _x = _v407
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v406.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v406.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v405.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v405.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v405.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v408 = val3.time_from_start
          _x = _v408
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v405.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_result.result.response.sequence_start.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_result.result.response.sequence_start.is_diff = bool(self.action_result.result.response.sequence_start.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.planned_trajectories = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v409 = val1.joint_trajectory
        _v410 = _v409.header
        start = end
        end += 4
        (_v410.seq,) = _get_struct_I().unpack(str[start:end])
        _v411 = _v410.stamp
        _x = _v411
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v410.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v410.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v409.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v409.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v409.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v412 = val3.time_from_start
          _x = _v412
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v409.points.append(val3)
        _v413 = val1.multi_dof_joint_trajectory
        _v414 = _v413.header
        start = end
        end += 4
        (_v414.seq,) = _get_struct_I().unpack(str[start:end])
        _v415 = _v414.stamp
        _x = _v415
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v414.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v414.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v413.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v413.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v413.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v416 = val4.translation
            _x = _v416
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v417 = val4.rotation
            _x = _v417
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v418 = val4.linear
            _x = _v418
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v419 = val4.angular
            _x = _v419
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v420 = val4.linear
            _x = _v420
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v421 = val4.angular
            _x = _v421
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v422 = val3.time_from_start
          _x = _v422
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v413.points.append(val3)
        self.action_result.result.response.planned_trajectories.append(val1)
      _x = self
      start = end
      end += 20
      (_x.action_result.result.response.planning_time, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.request.items)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.items:
        _v423 = val1.req
        _v424 = _v423.workspace_parameters
        _v425 = _v424.header
        _x = _v425.seq
        buff.write(_get_struct_I().pack(_x))
        _v426 = _v425.stamp
        _x = _v426
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v425.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v427 = _v424.min_corner
        _x = _v427
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v428 = _v424.max_corner
        _x = _v428
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v429 = _v423.start_state
        _v430 = _v429.joint_state
        _v431 = _v430.header
        _x = _v431.seq
        buff.write(_get_struct_I().pack(_x))
        _v432 = _v431.stamp
        _x = _v432
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v431.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v430.name)
        buff.write(_struct_I.pack(length))
        for val5 in _v430.name:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v430.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v430.position.tostring())
        length = len(_v430.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v430.velocity.tostring())
        length = len(_v430.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v430.effort.tostring())
        _v433 = _v429.multi_dof_joint_state
        _v434 = _v433.header
        _x = _v434.seq
        buff.write(_get_struct_I().pack(_x))
        _v435 = _v434.stamp
        _x = _v435
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v434.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v433.joint_names)
        buff.write(_struct_I.pack(length))
        for val5 in _v433.joint_names:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v433.transforms)
        buff.write(_struct_I.pack(length))
        for val5 in _v433.transforms:
          _v436 = val5.translation
          _x = _v436
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v437 = val5.rotation
          _x = _v437
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v433.twist)
        buff.write(_struct_I.pack(length))
        for val5 in _v433.twist:
          _v438 = val5.linear
          _x = _v438
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v439 = val5.angular
          _x = _v439
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v433.wrench)
        buff.write(_struct_I.pack(length))
        for val5 in _v433.wrench:
          _v440 = val5.force
          _x = _v440
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v441 = val5.torque
          _x = _v441
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v429.attached_collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v429.attached_collision_objects:
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v442 = val4.object
          _v443 = _v442.header
          _x = _v443.seq
          buff.write(_get_struct_I().pack(_x))
          _v444 = _v443.stamp
          _x = _v444
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v443.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v445 = _v442.pose
          _v446 = _v445.position
          _x = _v446
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v447 = _v445.orientation
          _x = _v447
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v442.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v448 = _v442.type
          _x = _v448.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v448.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v442.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v442.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.dimensions.tostring())
          length = len(_v442.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v442.primitive_poses:
            _v449 = val6.position
            _x = _v449
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v450 = val6.orientation
            _x = _v450
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v442.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v442.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(val7.vertex_indices.tostring())
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v442.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v442.mesh_poses:
            _v451 = val6.position
            _x = _v451
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v452 = val6.orientation
            _x = _v452
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v442.planes)
          buff.write(_struct_I.pack(length))
          for val6 in _v442.planes:
            buff.write(val6.coef.tostring())
          length = len(_v442.plane_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v442.plane_poses:
            _v453 = val6.position
            _x = _v453
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v454 = val6.orientation
            _x = _v454
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v442.subframe_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v442.subframe_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v442.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v442.subframe_poses:
            _v455 = val6.position
            _x = _v455
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v456 = val6.orientation
            _x = _v456
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v442.operation
          buff.write(_get_struct_b().pack(_x))
          length = len(val4.touch_links)
          buff.write(_struct_I.pack(length))
          for val5 in val4.touch_links:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
          _v457 = val4.detach_posture
          _v458 = _v457.header
          _x = _v458.seq
          buff.write(_get_struct_I().pack(_x))
          _v459 = _v458.stamp
          _x = _v459
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v458.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v457.joint_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v457.joint_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v457.points)
          buff.write(_struct_I.pack(length))
          for val6 in _v457.points:
            length = len(val6.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.positions.tostring())
            length = len(val6.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.velocities.tostring())
            length = len(val6.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.accelerations.tostring())
            length = len(val6.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.effort.tostring())
            _v460 = val6.time_from_start
            _x = _v460
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        _x = _v429.is_diff
        buff.write(_get_struct_B().pack(_x))
        length = len(_v423.goal_constraints)
        buff.write(_struct_I.pack(length))
        for val3 in _v423.goal_constraints:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val3.joint_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.joint_constraints:
            _x = val4.joint_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
          length = len(val3.position_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.position_constraints:
            _v461 = val4.header
            _x = _v461.seq
            buff.write(_get_struct_I().pack(_x))
            _v462 = _v461.stamp
            _x = _v462
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v461.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v463 = val4.target_point_offset
            _x = _v463
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v464 = val4.constraint_region
            length = len(_v464.primitives)
            buff.write(_struct_I.pack(length))
            for val6 in _v464.primitives:
              _x = val6.type
              buff.write(_get_struct_B().pack(_x))
              length = len(val6.dimensions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val6.dimensions.tostring())
            length = len(_v464.primitive_poses)
            buff.write(_struct_I.pack(length))
            for val6 in _v464.primitive_poses:
              _v465 = val6.position
              _x = _v465
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v466 = val6.orientation
              _x = _v466
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            length = len(_v464.meshes)
            buff.write(_struct_I.pack(length))
            for val6 in _v464.meshes:
              length = len(val6.triangles)
              buff.write(_struct_I.pack(length))
              for val7 in val6.triangles:
                buff.write(val7.vertex_indices.tostring())
              length = len(val6.vertices)
              buff.write(_struct_I.pack(length))
              for val7 in val6.vertices:
                _x = val7
                buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            length = len(_v464.mesh_poses)
            buff.write(_struct_I.pack(length))
            for val6 in _v464.mesh_poses:
              _v467 = val6.position
              _x = _v467
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v468 = val6.orientation
              _x = _v468
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.weight
            buff.write(_get_struct_d().pack(_x))
          length = len(val3.orientation_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.orientation_constraints:
            _v469 = val4.header
            _x = _v469.seq
            buff.write(_get_struct_I().pack(_x))
            _v470 = _v469.stamp
            _x = _v470
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v469.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v471 = val4.orientation
            _x = _v471
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
          length = len(val3.visibility_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.visibility_constraints:
            _x = val4.target_radius
            buff.write(_get_struct_d().pack(_x))
            _v472 = val4.target_pose
            _v473 = _v472.header
            _x = _v473.seq
            buff.write(_get_struct_I().pack(_x))
            _v474 = _v473.stamp
            _x = _v474
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v473.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v475 = _v472.pose
            _v476 = _v475.position
            _x = _v476
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v477 = _v475.orientation
            _x = _v477
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.cone_sides
            buff.write(_get_struct_i().pack(_x))
            _v478 = val4.sensor_pose
            _v479 = _v478.header
            _x = _v479.seq
            buff.write(_get_struct_I().pack(_x))
            _v480 = _v479.stamp
            _x = _v480
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v479.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v481 = _v478.pose
            _v482 = _v481.position
            _x = _v482
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v483 = _v481.orientation
            _x = _v483
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4
            buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _v484 = _v423.path_constraints
        _x = _v484.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v484.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v484.joint_constraints:
          _x = val4.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(_v484.position_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v484.position_constraints:
          _v485 = val4.header
          _x = _v485.seq
          buff.write(_get_struct_I().pack(_x))
          _v486 = _v485.stamp
          _x = _v486
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v485.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v487 = val4.target_point_offset
          _x = _v487
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v488 = val4.constraint_region
          length = len(_v488.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v488.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.dimensions.tostring())
          length = len(_v488.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v488.primitive_poses:
            _v489 = val6.position
            _x = _v489
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v490 = val6.orientation
            _x = _v490
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v488.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v488.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(val7.vertex_indices.tostring())
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v488.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v488.mesh_poses:
            _v491 = val6.position
            _x = _v491
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v492 = val6.orientation
            _x = _v492
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        length = len(_v484.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v484.orientation_constraints:
          _v493 = val4.header
          _x = _v493.seq
          buff.write(_get_struct_I().pack(_x))
          _v494 = _v493.stamp
          _x = _v494
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v493.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v495 = val4.orientation
          _x = _v495
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
        length = len(_v484.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v484.visibility_constraints:
          _x = val4.target_radius
          buff.write(_get_struct_d().pack(_x))
          _v496 = val4.target_pose
          _v497 = _v496.header
          _x = _v497.seq
          buff.write(_get_struct_I().pack(_x))
          _v498 = _v497.stamp
          _x = _v498
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v497.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v499 = _v496.pose
          _v500 = _v499.position
          _x = _v500
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v501 = _v499.orientation
          _x = _v501
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.cone_sides
          buff.write(_get_struct_i().pack(_x))
          _v502 = val4.sensor_pose
          _v503 = _v502.header
          _x = _v503.seq
          buff.write(_get_struct_I().pack(_x))
          _v504 = _v503.stamp
          _x = _v504
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v503.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v505 = _v502.pose
          _v506 = _v505.position
          _x = _v506
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v507 = _v505.orientation
          _x = _v507
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _v508 = _v423.trajectory_constraints
        length = len(_v508.constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v508.constraints:
          _x = val4.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val4.joint_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.joint_constraints:
            _x = val5.joint_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5
            buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
          length = len(val4.position_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.position_constraints:
            _v509 = val5.header
            _x = _v509.seq
            buff.write(_get_struct_I().pack(_x))
            _v510 = _v509.stamp
            _x = _v510
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v509.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v511 = val5.target_point_offset
            _x = _v511
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v512 = val5.constraint_region
            length = len(_v512.primitives)
            buff.write(_struct_I.pack(length))
            for val7 in _v512.primitives:
              _x = val7.type
              buff.write(_get_struct_B().pack(_x))
              length = len(val7.dimensions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val7.dimensions.tostring())
            length = len(_v512.primitive_poses)
            buff.write(_struct_I.pack(length))
            for val7 in _v512.primitive_poses:
              _v513 = val7.position
              _x = _v513
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v514 = val7.orientation
              _x = _v514
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            length = len(_v512.meshes)
            buff.write(_struct_I.pack(length))
            for val7 in _v512.meshes:
              length = len(val7.triangles)
              buff.write(_struct_I.pack(length))
              for val8 in val7.triangles:
                buff.write(val8.vertex_indices.tostring())
              length = len(val7.vertices)
              buff.write(_struct_I.pack(length))
              for val8 in val7.vertices:
                _x = val8
                buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            length = len(_v512.mesh_poses)
            buff.write(_struct_I.pack(length))
            for val7 in _v512.mesh_poses:
              _v515 = val7.position
              _x = _v515
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v516 = val7.orientation
              _x = _v516
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.weight
            buff.write(_get_struct_d().pack(_x))
          length = len(val4.orientation_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.orientation_constraints:
            _v517 = val5.header
            _x = _v517.seq
            buff.write(_get_struct_I().pack(_x))
            _v518 = _v517.stamp
            _x = _v518
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v517.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v519 = val5.orientation
            _x = _v519
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5
            buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
          length = len(val4.visibility_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.visibility_constraints:
            _x = val5.target_radius
            buff.write(_get_struct_d().pack(_x))
            _v520 = val5.target_pose
            _v521 = _v520.header
            _x = _v521.seq
            buff.write(_get_struct_I().pack(_x))
            _v522 = _v521.stamp
            _x = _v522
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v521.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v523 = _v520.pose
            _v524 = _v523.position
            _x = _v524
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v525 = _v523.orientation
            _x = _v525
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.cone_sides
            buff.write(_get_struct_i().pack(_x))
            _v526 = val5.sensor_pose
            _v527 = _v526.header
            _x = _v527.seq
            buff.write(_get_struct_I().pack(_x))
            _v528 = _v527.stamp
            _x = _v528
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v527.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v529 = _v526.pose
            _v530 = _v529.position
            _x = _v530
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v531 = _v529.orientation
            _x = _v531
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5
            buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        length = len(_v423.reference_trajectories)
        buff.write(_struct_I.pack(length))
        for val3 in _v423.reference_trajectories:
          _v532 = val3.header
          _x = _v532.seq
          buff.write(_get_struct_I().pack(_x))
          _v533 = _v532.stamp
          _x = _v533
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v532.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val3.joint_trajectory)
          buff.write(_struct_I.pack(length))
          for val4 in val3.joint_trajectory:
            _v534 = val4.header
            _x = _v534.seq
            buff.write(_get_struct_I().pack(_x))
            _v535 = _v534.stamp
            _x = _v535
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v534.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            length = len(val4.joint_names)
            buff.write(_struct_I.pack(length))
            for val5 in val4.joint_names:
              length = len(val5)
              if python3 or type(val5) == unicode:
                val5 = val5.encode('utf-8')
                length = len(val5)
              buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
            length = len(val4.points)
            buff.write(_struct_I.pack(length))
            for val5 in val4.points:
              length = len(val5.positions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val5.positions.tostring())
              length = len(val5.velocities)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val5.velocities.tostring())
              length = len(val5.accelerations)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val5.accelerations.tostring())
              length = len(val5.effort)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val5.effort.tostring())
              _v536 = val5.time_from_start
              _x = _v536
              buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          length = len(val3.cartesian_trajectory)
          buff.write(_struct_I.pack(length))
          for val4 in val3.cartesian_trajectory:
            _v537 = val4.header
            _x = _v537.seq
            buff.write(_get_struct_I().pack(_x))
            _v538 = _v537.stamp
            _x = _v538
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v537.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4.tracked_frame
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            length = len(val4.points)
            buff.write(_struct_I.pack(length))
            for val5 in val4.points:
              _v539 = val5.point
              _v540 = _v539.pose
              _v541 = _v540.position
              _x = _v541
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v542 = _v540.orientation
              _x = _v542
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
              _v543 = _v539.velocity
              _v544 = _v543.linear
              _x = _v544
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v545 = _v543.angular
              _x = _v545
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v546 = _v539.acceleration
              _v547 = _v546.linear
              _x = _v547
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v548 = _v546.angular
              _x = _v548
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v549 = val5.time_from_start
              _x = _v549
              buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = _v423.pipeline_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v423.planner_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v423.group_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v423
        buff.write(_get_struct_i3d().pack(_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor, _x.max_acceleration_scaling_factor))
        _x = _v423.cartesian_speed_limited_link
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v423.max_cartesian_speed
        buff.write(_get_struct_d().pack(_x))
        _x = val1.blend_radius
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position.tostring())
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity.tostring())
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms:
        _v550 = val1.translation
        _x = _v550
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v551 = val1.rotation
        _x = _v551
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist:
        _v552 = val1.linear
        _x = _v552
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v553 = val1.angular
        _x = _v553
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench:
        _v554 = val1.force
        _x = _v554
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v555 = val1.torque
        _x = _v555
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v556 = val1.object
        _v557 = _v556.header
        _x = _v557.seq
        buff.write(_get_struct_I().pack(_x))
        _v558 = _v557.stamp
        _x = _v558
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v557.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v559 = _v556.pose
        _v560 = _v559.position
        _x = _v560
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v561 = _v559.orientation
        _x = _v561
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v556.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v562 = _v556.type
        _x = _v562.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v562.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v556.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v556.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v556.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v556.primitive_poses:
          _v563 = val3.position
          _x = _v563
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v564 = val3.orientation
          _x = _v564
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v556.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v556.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v556.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v556.mesh_poses:
          _v565 = val3.position
          _x = _v565
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v566 = val3.orientation
          _x = _v566
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v556.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v556.planes:
          buff.write(val3.coef.tostring())
        length = len(_v556.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v556.plane_poses:
          _v567 = val3.position
          _x = _v567
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v568 = val3.orientation
          _x = _v568
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v556.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v556.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v556.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v556.subframe_poses:
          _v569 = val3.position
          _x = _v569
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v570 = val3.orientation
          _x = _v570
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v556.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v571 = val1.detach_posture
        _v572 = _v571.header
        _x = _v572.seq
        buff.write(_get_struct_I().pack(_x))
        _v573 = _v572.stamp
        _x = _v573
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v572.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v571.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v571.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v571.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v571.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v574 = val3.time_from_start
          _x = _v574
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms:
        _v575 = val1.header
        _x = _v575.seq
        buff.write(_get_struct_I().pack(_x))
        _v576 = _v575.stamp
        _x = _v576
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v575.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v577 = val1.transform
        _v578 = _v577.translation
        _x = _v578
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v579 = _v577.rotation
        _x = _v579
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(val1.enabled.tostring())
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values.tostring())
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.padding
        buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.scale
        buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v580 = val1.color
        _x = _v580
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects:
        _v581 = val1.header
        _x = _v581.seq
        buff.write(_get_struct_I().pack(_x))
        _v582 = _v581.stamp
        _x = _v582
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v581.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v583 = val1.pose
        _v584 = _v583.position
        _x = _v584
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v585 = _v583.orientation
        _x = _v585
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v586 = val1.type
        _x = _v586.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v586.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          _x = val2.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.dimensions.tostring())
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v587 = val2.position
          _x = _v587
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v588 = val2.orientation
          _x = _v588
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(val3.vertex_indices.tostring())
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v589 = val2.position
          _x = _v589
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v590 = val2.orientation
          _x = _v590
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(val2.coef.tostring())
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v591 = val2.position
          _x = _v591
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v592 = val2.orientation
          _x = _v592
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.subframe_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        length = len(val1.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_poses:
          _v593 = val2.position
          _x = _v593
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v594 = val2.orientation
          _x = _v594
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.operation
        buff.write(_get_struct_b().pack(_x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution
      buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data.tostring())
      _x = self
      buff.write(_get_struct_3BidBid3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.is_diff, _x.action_goal.goal.planning_options.plan_only, _x.action_goal.goal.planning_options.look_around, _x.action_goal.goal.planning_options.look_around_attempts, _x.action_goal.goal.planning_options.max_safe_execution_cost, _x.action_goal.goal.planning_options.replan, _x.action_goal.goal.planning_options.replan_attempts, _x.action_goal.goal.planning_options.replan_delay, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.action_result.result.response.error_code.val, _x.action_result.result.response.sequence_start.joint_state.header.seq, _x.action_result.result.response.sequence_start.joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.joint_state.header.stamp.nsecs))
      _x = self.action_result.result.response.sequence_start.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.response.sequence_start.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_result.result.response.sequence_start.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.response.sequence_start.joint_state.position.tostring())
      length = len(self.action_result.result.response.sequence_start.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.response.sequence_start.joint_state.velocity.tostring())
      length = len(self.action_result.result.response.sequence_start.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.response.sequence_start.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.response.sequence_start.multi_dof_joint_state.header.seq, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_result.result.response.sequence_start.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms:
        _v595 = val1.translation
        _x = _v595
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v596 = val1.rotation
        _x = _v596
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.twist:
        _v597 = val1.linear
        _x = _v597
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v598 = val1.angular
        _x = _v598
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench:
        _v599 = val1.force
        _x = _v599
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v600 = val1.torque
        _x = _v600
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.response.sequence_start.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v601 = val1.object
        _v602 = _v601.header
        _x = _v602.seq
        buff.write(_get_struct_I().pack(_x))
        _v603 = _v602.stamp
        _x = _v603
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v602.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v604 = _v601.pose
        _v605 = _v604.position
        _x = _v605
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v606 = _v604.orientation
        _x = _v606
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v601.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v607 = _v601.type
        _x = _v607.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v607.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v601.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v601.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v601.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v601.primitive_poses:
          _v608 = val3.position
          _x = _v608
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v609 = val3.orientation
          _x = _v609
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v601.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v601.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v601.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v601.mesh_poses:
          _v610 = val3.position
          _x = _v610
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v611 = val3.orientation
          _x = _v611
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v601.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v601.planes:
          buff.write(val3.coef.tostring())
        length = len(_v601.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v601.plane_poses:
          _v612 = val3.position
          _x = _v612
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v613 = val3.orientation
          _x = _v613
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v601.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v601.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v601.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v601.subframe_poses:
          _v614 = val3.position
          _x = _v614
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v615 = val3.orientation
          _x = _v615
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v601.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v616 = val1.detach_posture
        _v617 = _v616.header
        _x = _v617.seq
        buff.write(_get_struct_I().pack(_x))
        _v618 = _v617.stamp
        _x = _v618
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v617.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v616.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v616.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v616.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v616.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v619 = val3.time_from_start
          _x = _v619
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_result.result.response.sequence_start.is_diff
      buff.write(_get_struct_B().pack(_x))
      length = len(self.action_result.result.response.planned_trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.planned_trajectories:
        _v620 = val1.joint_trajectory
        _v621 = _v620.header
        _x = _v621.seq
        buff.write(_get_struct_I().pack(_x))
        _v622 = _v621.stamp
        _x = _v622
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v621.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v620.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v620.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v620.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v620.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v623 = val3.time_from_start
          _x = _v623
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v624 = val1.multi_dof_joint_trajectory
        _v625 = _v624.header
        _x = _v625.seq
        buff.write(_get_struct_I().pack(_x))
        _v626 = _v625.stamp
        _x = _v626
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v625.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v624.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v624.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v624.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v624.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v627 = val4.translation
            _x = _v627
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v628 = val4.rotation
            _x = _v628
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v629 = val4.linear
            _x = _v629
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v630 = val4.angular
            _x = _v630
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v631 = val4.linear
            _x = _v631
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v632 = val4.angular
            _x = _v632
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v633 = val3.time_from_start
          _x = _v633
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_d3I().pack(_x.action_result.result.response.planning_time, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = moveit_msgs.msg.MoveGroupSequenceActionGoal()
      if self.action_result is None:
        self.action_result = moveit_msgs.msg.MoveGroupSequenceActionResult()
      if self.action_feedback is None:
        self.action_feedback = moveit_msgs.msg.MoveGroupSequenceActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.items = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.MotionSequenceItem()
        _v634 = val1.req
        _v635 = _v634.workspace_parameters
        _v636 = _v635.header
        start = end
        end += 4
        (_v636.seq,) = _get_struct_I().unpack(str[start:end])
        _v637 = _v636.stamp
        _x = _v637
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v636.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v636.frame_id = str[start:end]
        _v638 = _v635.min_corner
        _x = _v638
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v639 = _v635.max_corner
        _x = _v639
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v640 = _v634.start_state
        _v641 = _v640.joint_state
        _v642 = _v641.header
        start = end
        end += 4
        (_v642.seq,) = _get_struct_I().unpack(str[start:end])
        _v643 = _v642.stamp
        _x = _v643
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v642.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v642.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v641.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v641.name.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v641.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v641.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v641.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v644 = _v640.multi_dof_joint_state
        _v645 = _v644.header
        start = end
        end += 4
        (_v645.seq,) = _get_struct_I().unpack(str[start:end])
        _v646 = _v645.stamp
        _x = _v646
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v645.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v645.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v644.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v644.joint_names.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v644.transforms = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Transform()
          _v647 = val5.translation
          _x = _v647
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v648 = val5.rotation
          _x = _v648
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v644.transforms.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v644.twist = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Twist()
          _v649 = val5.linear
          _x = _v649
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v650 = val5.angular
          _x = _v650
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v644.twist.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v644.wrench = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Wrench()
          _v651 = val5.force
          _x = _v651
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v652 = val5.torque
          _x = _v652
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v644.wrench.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v640.attached_collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AttachedCollisionObject()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v653 = val4.object
          _v654 = _v653.header
          start = end
          end += 4
          (_v654.seq,) = _get_struct_I().unpack(str[start:end])
          _v655 = _v654.stamp
          _x = _v655
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v654.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v654.frame_id = str[start:end]
          _v656 = _v653.pose
          _v657 = _v656.position
          _x = _v657
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v658 = _v656.orientation
          _x = _v658
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v653.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v653.id = str[start:end]
          _v659 = _v653.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v659.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v659.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v659.db = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v659.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v653.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v653.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v653.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v660 = val6.position
            _x = _v660
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v661 = val6.orientation
            _x = _v661
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v653.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v653.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v653.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v653.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v662 = val6.position
            _x = _v662
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v663 = val6.orientation
            _x = _v663
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v653.mesh_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v653.planes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val6.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
            _v653.planes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v653.plane_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v664 = val6.position
            _x = _v664
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v665 = val6.orientation
            _x = _v665
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v653.plane_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v653.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v653.subframe_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v653.subframe_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v666 = val6.position
            _x = _v666
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v667 = val6.orientation
            _x = _v667
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v653.subframe_poses.append(val6)
          start = end
          end += 1
          (_v653.operation,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.touch_links = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5 = str[start:end]
            val4.touch_links.append(val5)
          _v668 = val4.detach_posture
          _v669 = _v668.header
          start = end
          end += 4
          (_v669.seq,) = _get_struct_I().unpack(str[start:end])
          _v670 = _v669.stamp
          _x = _v670
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v669.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v669.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v668.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v668.joint_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v668.points = []
          for i in range(0, length):
            val6 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v671 = val6.time_from_start
            _x = _v671
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v668.points.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v640.attached_collision_objects.append(val4)
        start = end
        end += 1
        (_v640.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v640.is_diff = bool(_v640.is_diff)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v634.goal_constraints = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.Constraints()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.joint_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.JointConstraint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.joint_name = str[start:end]
            _x = val4
            start = end
            end += 32
            (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val3.joint_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.position_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.PositionConstraint()
            _v672 = val4.header
            start = end
            end += 4
            (_v672.seq,) = _get_struct_I().unpack(str[start:end])
            _v673 = _v672.stamp
            _x = _v673
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v672.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v672.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.link_name = str[start:end]
            _v674 = val4.target_point_offset
            _x = _v674
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v675 = val4.constraint_region
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v675.primitives = []
            for i in range(0, length):
              val6 = shape_msgs.msg.SolidPrimitive()
              start = end
              end += 1
              (val6.type,) = _get_struct_B().unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val6.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              _v675.primitives.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v675.primitive_poses = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Pose()
              _v676 = val6.position
              _x = _v676
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v677 = val6.orientation
              _x = _v677
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v675.primitive_poses.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v675.meshes = []
            for i in range(0, length):
              val6 = shape_msgs.msg.Mesh()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val6.triangles = []
              for i in range(0, length):
                val7 = shape_msgs.msg.MeshTriangle()
                start = end
                end += 12
                val7.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
                val6.triangles.append(val7)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val6.vertices = []
              for i in range(0, length):
                val7 = geometry_msgs.msg.Point()
                _x = val7
                start = end
                end += 24
                (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
                val6.vertices.append(val7)
              _v675.meshes.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v675.mesh_poses = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Pose()
              _v678 = val6.position
              _x = _v678
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v679 = val6.orientation
              _x = _v679
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v675.mesh_poses.append(val6)
            start = end
            end += 8
            (val4.weight,) = _get_struct_d().unpack(str[start:end])
            val3.position_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.orientation_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.OrientationConstraint()
            _v680 = val4.header
            start = end
            end += 4
            (_v680.seq,) = _get_struct_I().unpack(str[start:end])
            _v681 = _v680.stamp
            _x = _v681
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v680.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v680.frame_id = str[start:end]
            _v682 = val4.orientation
            _x = _v682
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.link_name = str[start:end]
            _x = val4
            start = end
            end += 33
            (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
            val3.orientation_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.visibility_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.VisibilityConstraint()
            start = end
            end += 8
            (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
            _v683 = val4.target_pose
            _v684 = _v683.header
            start = end
            end += 4
            (_v684.seq,) = _get_struct_I().unpack(str[start:end])
            _v685 = _v684.stamp
            _x = _v685
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v684.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v684.frame_id = str[start:end]
            _v686 = _v683.pose
            _v687 = _v686.position
            _x = _v687
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v688 = _v686.orientation
            _x = _v688
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
            _v689 = val4.sensor_pose
            _v690 = _v689.header
            start = end
            end += 4
            (_v690.seq,) = _get_struct_I().unpack(str[start:end])
            _v691 = _v690.stamp
            _x = _v691
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v690.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v690.frame_id = str[start:end]
            _v692 = _v689.pose
            _v693 = _v692.position
            _x = _v693
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v694 = _v692.orientation
            _x = _v694
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _x = val4
            start = end
            end += 25
            (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
            val3.visibility_constraints.append(val4)
          _v634.goal_constraints.append(val3)
        _v695 = _v634.path_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v695.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v695.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v695.joint_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.joint_name = str[start:end]
          _x = val4
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          _v695.joint_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v695.position_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.PositionConstraint()
          _v696 = val4.header
          start = end
          end += 4
          (_v696.seq,) = _get_struct_I().unpack(str[start:end])
          _v697 = _v696.stamp
          _x = _v697
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v696.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v696.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v698 = val4.target_point_offset
          _x = _v698
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v699 = val4.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v699.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v699.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v699.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v700 = val6.position
            _x = _v700
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v701 = val6.orientation
            _x = _v701
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v699.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v699.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v699.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v699.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v702 = val6.position
            _x = _v702
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v703 = val6.orientation
            _x = _v703
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v699.mesh_poses.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v695.position_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v695.orientation_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.OrientationConstraint()
          _v704 = val4.header
          start = end
          end += 4
          (_v704.seq,) = _get_struct_I().unpack(str[start:end])
          _v705 = _v704.stamp
          _x = _v705
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v704.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v704.frame_id = str[start:end]
          _v706 = val4.orientation
          _x = _v706
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _x = val4
          start = end
          end += 33
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
          _v695.orientation_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v695.visibility_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v707 = val4.target_pose
          _v708 = _v707.header
          start = end
          end += 4
          (_v708.seq,) = _get_struct_I().unpack(str[start:end])
          _v709 = _v708.stamp
          _x = _v709
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v708.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v708.frame_id = str[start:end]
          _v710 = _v707.pose
          _v711 = _v710.position
          _x = _v711
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v712 = _v710.orientation
          _x = _v712
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v713 = val4.sensor_pose
          _v714 = _v713.header
          start = end
          end += 4
          (_v714.seq,) = _get_struct_I().unpack(str[start:end])
          _v715 = _v714.stamp
          _x = _v715
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v714.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v714.frame_id = str[start:end]
          _v716 = _v713.pose
          _v717 = _v716.position
          _x = _v717
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v718 = _v716.orientation
          _x = _v718
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val4
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          _v695.visibility_constraints.append(val4)
        _v719 = _v634.trajectory_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v719.constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.Constraints()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.joint_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.JointConstraint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.joint_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.joint_name = str[start:end]
            _x = val5
            start = end
            end += 32
            (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val4.joint_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.position_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.PositionConstraint()
            _v720 = val5.header
            start = end
            end += 4
            (_v720.seq,) = _get_struct_I().unpack(str[start:end])
            _v721 = _v720.stamp
            _x = _v721
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v720.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v720.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.link_name = str[start:end]
            _v722 = val5.target_point_offset
            _x = _v722
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v723 = val5.constraint_region
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v723.primitives = []
            for i in range(0, length):
              val7 = shape_msgs.msg.SolidPrimitive()
              start = end
              end += 1
              (val7.type,) = _get_struct_B().unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val7.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              _v723.primitives.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v723.primitive_poses = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Pose()
              _v724 = val7.position
              _x = _v724
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v725 = val7.orientation
              _x = _v725
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v723.primitive_poses.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v723.meshes = []
            for i in range(0, length):
              val7 = shape_msgs.msg.Mesh()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val7.triangles = []
              for i in range(0, length):
                val8 = shape_msgs.msg.MeshTriangle()
                start = end
                end += 12
                val8.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
                val7.triangles.append(val8)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val7.vertices = []
              for i in range(0, length):
                val8 = geometry_msgs.msg.Point()
                _x = val8
                start = end
                end += 24
                (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
                val7.vertices.append(val8)
              _v723.meshes.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v723.mesh_poses = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Pose()
              _v726 = val7.position
              _x = _v726
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v727 = val7.orientation
              _x = _v727
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v723.mesh_poses.append(val7)
            start = end
            end += 8
            (val5.weight,) = _get_struct_d().unpack(str[start:end])
            val4.position_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.orientation_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.OrientationConstraint()
            _v728 = val5.header
            start = end
            end += 4
            (_v728.seq,) = _get_struct_I().unpack(str[start:end])
            _v729 = _v728.stamp
            _x = _v729
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v728.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v728.frame_id = str[start:end]
            _v730 = val5.orientation
            _x = _v730
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.link_name = str[start:end]
            _x = val5
            start = end
            end += 33
            (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
            val4.orientation_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.visibility_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.VisibilityConstraint()
            start = end
            end += 8
            (val5.target_radius,) = _get_struct_d().unpack(str[start:end])
            _v731 = val5.target_pose
            _v732 = _v731.header
            start = end
            end += 4
            (_v732.seq,) = _get_struct_I().unpack(str[start:end])
            _v733 = _v732.stamp
            _x = _v733
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v732.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v732.frame_id = str[start:end]
            _v734 = _v731.pose
            _v735 = _v734.position
            _x = _v735
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v736 = _v734.orientation
            _x = _v736
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (val5.cone_sides,) = _get_struct_i().unpack(str[start:end])
            _v737 = val5.sensor_pose
            _v738 = _v737.header
            start = end
            end += 4
            (_v738.seq,) = _get_struct_I().unpack(str[start:end])
            _v739 = _v738.stamp
            _x = _v739
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v738.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v738.frame_id = str[start:end]
            _v740 = _v737.pose
            _v741 = _v740.position
            _x = _v741
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v742 = _v740.orientation
            _x = _v742
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _x = val5
            start = end
            end += 25
            (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
            val4.visibility_constraints.append(val5)
          _v719.constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v634.reference_trajectories = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.GenericTrajectory()
          _v743 = val3.header
          start = end
          end += 4
          (_v743.seq,) = _get_struct_I().unpack(str[start:end])
          _v744 = _v743.stamp
          _x = _v744
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v743.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v743.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.joint_trajectory = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectory()
            _v745 = val4.header
            start = end
            end += 4
            (_v745.seq,) = _get_struct_I().unpack(str[start:end])
            _v746 = _v745.stamp
            _x = _v746
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v745.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v745.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.joint_names = []
            for i in range(0, length):
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              start = end
              end += length
              if python3:
                val5 = str[start:end].decode('utf-8', 'rosmsg')
              else:
                val5 = str[start:end]
              val4.joint_names.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.points = []
            for i in range(0, length):
              val5 = trajectory_msgs.msg.JointTrajectoryPoint()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val5.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              _v747 = val5.time_from_start
              _x = _v747
              start = end
              end += 8
              (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
              val4.points.append(val5)
            val3.joint_trajectory.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.cartesian_trajectory = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.CartesianTrajectory()
            _v748 = val4.header
            start = end
            end += 4
            (_v748.seq,) = _get_struct_I().unpack(str[start:end])
            _v749 = _v748.stamp
            _x = _v749
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v748.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v748.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.tracked_frame = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.tracked_frame = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.points = []
            for i in range(0, length):
              val5 = moveit_msgs.msg.CartesianTrajectoryPoint()
              _v750 = val5.point
              _v751 = _v750.pose
              _v752 = _v751.position
              _x = _v752
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v753 = _v751.orientation
              _x = _v753
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v754 = _v750.velocity
              _v755 = _v754.linear
              _x = _v755
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v756 = _v754.angular
              _x = _v756
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v757 = _v750.acceleration
              _v758 = _v757.linear
              _x = _v758
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v759 = _v757.angular
              _x = _v759
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v760 = val5.time_from_start
              _x = _v760
              start = end
              end += 8
              (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
              val4.points.append(val5)
            val3.cartesian_trajectory.append(val4)
          _v634.reference_trajectories.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v634.pipeline_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v634.pipeline_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v634.planner_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v634.planner_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v634.group_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v634.group_name = str[start:end]
        _x = _v634
        start = end
        end += 28
        (_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor, _x.max_acceleration_scaling_factor,) = _get_struct_i3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v634.cartesian_speed_limited_link = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v634.cartesian_speed_limited_link = str[start:end]
        start = end
        end += 8
        (_v634.max_cartesian_speed,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 8
        (val1.blend_radius,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.request.items.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v761 = val1.translation
        _x = _v761
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v762 = val1.rotation
        _x = _v762
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v763 = val1.linear
        _x = _v763
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v764 = val1.angular
        _x = _v764
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v765 = val1.force
        _x = _v765
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v766 = val1.torque
        _x = _v766
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v767 = val1.object
        _v768 = _v767.header
        start = end
        end += 4
        (_v768.seq,) = _get_struct_I().unpack(str[start:end])
        _v769 = _v768.stamp
        _x = _v769
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v768.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v768.frame_id = str[start:end]
        _v770 = _v767.pose
        _v771 = _v770.position
        _x = _v771
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v772 = _v770.orientation
        _x = _v772
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v767.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v767.id = str[start:end]
        _v773 = _v767.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v773.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v773.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v773.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v773.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v767.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v767.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v767.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v774 = val3.position
          _x = _v774
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v775 = val3.orientation
          _x = _v775
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v767.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v767.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v767.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v767.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v776 = val3.position
          _x = _v776
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v777 = val3.orientation
          _x = _v777
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v767.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v767.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v767.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v767.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v778 = val3.position
          _x = _v778
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v779 = val3.orientation
          _x = _v779
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v767.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v767.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v767.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v767.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v780 = val3.position
          _x = _v780
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v781 = val3.orientation
          _x = _v781
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v767.subframe_poses.append(val3)
        start = end
        end += 1
        (_v767.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v782 = val1.detach_posture
        _v783 = _v782.header
        start = end
        end += 4
        (_v783.seq,) = _get_struct_I().unpack(str[start:end])
        _v784 = _v783.stamp
        _x = _v784
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v783.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v783.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v782.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v782.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v782.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v785 = val3.time_from_start
          _x = _v785
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v782.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff = bool(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v786 = val1.header
        start = end
        end += 4
        (_v786.seq,) = _get_struct_I().unpack(str[start:end])
        _v787 = _v786.stamp
        _x = _v787
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v786.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v786.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.child_frame_id = str[start:end]
        _v788 = val1.transform
        _v789 = _v788.translation
        _x = _v789
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v790 = _v788.rotation
        _x = _v790
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.enabled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        val1.enabled = list(map(bool, val1.enabled))
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = list(map(bool, self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v791 = val1.color
        _x = _v791
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v792 = val1.header
        start = end
        end += 4
        (_v792.seq,) = _get_struct_I().unpack(str[start:end])
        _v793 = _v792.stamp
        _x = _v793
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v792.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v792.frame_id = str[start:end]
        _v794 = val1.pose
        _v795 = _v794.position
        _x = _v795
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v796 = _v794.orientation
        _x = _v796
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v797 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v797.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v797.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v797.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v797.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v798 = val2.position
          _x = _v798
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v799 = val2.orientation
          _x = _v799
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v800 = val2.position
          _x = _v800
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v801 = val2.orientation
          _x = _v801
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v802 = val2.position
          _x = _v802
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v803 = val2.orientation
          _x = _v803
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.subframe_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v804 = val2.position
          _x = _v804
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v805 = val2.orientation
          _x = _v805
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.subframe_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary = bool(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      _x = self
      start = end
      end += 40
      (_x.action_goal.goal.planning_options.planning_scene_diff.is_diff, _x.action_goal.goal.planning_options.plan_only, _x.action_goal.goal.planning_options.look_around, _x.action_goal.goal.planning_options.look_around_attempts, _x.action_goal.goal.planning_options.max_safe_execution_cost, _x.action_goal.goal.planning_options.replan, _x.action_goal.goal.planning_options.replan_attempts, _x.action_goal.goal.planning_options.replan_delay, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3BidBid3I().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.is_diff = bool(self.action_goal.goal.planning_options.planning_scene_diff.is_diff)
      self.action_goal.goal.planning_options.plan_only = bool(self.action_goal.goal.planning_options.plan_only)
      self.action_goal.goal.planning_options.look_around = bool(self.action_goal.goal.planning_options.look_around)
      self.action_goal.goal.planning_options.replan = bool(self.action_goal.goal.planning_options.replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.action_result.result.response.error_code.val, _x.action_result.result.response.sequence_start.joint_state.header.seq, _x.action_result.result.response.sequence_start.joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.joint_state.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.response.sequence_start.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.response.sequence_start.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_result.result.response.sequence_start.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_result.result.response.sequence_start.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_result.result.response.sequence_start.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_result.result.response.sequence_start.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.response.sequence_start.multi_dof_joint_state.header.seq, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.response.sequence_start.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.response.sequence_start.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v806 = val1.translation
        _x = _v806
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v807 = val1.rotation
        _x = _v807
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v808 = val1.linear
        _x = _v808
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v809 = val1.angular
        _x = _v809
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v810 = val1.force
        _x = _v810
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v811 = val1.torque
        _x = _v811
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v812 = val1.object
        _v813 = _v812.header
        start = end
        end += 4
        (_v813.seq,) = _get_struct_I().unpack(str[start:end])
        _v814 = _v813.stamp
        _x = _v814
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v813.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v813.frame_id = str[start:end]
        _v815 = _v812.pose
        _v816 = _v815.position
        _x = _v816
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v817 = _v815.orientation
        _x = _v817
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v812.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v812.id = str[start:end]
        _v818 = _v812.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v818.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v818.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v818.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v818.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v812.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v812.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v812.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v819 = val3.position
          _x = _v819
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v820 = val3.orientation
          _x = _v820
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v812.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v812.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v812.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v812.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v821 = val3.position
          _x = _v821
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v822 = val3.orientation
          _x = _v822
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v812.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v812.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v812.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v812.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v823 = val3.position
          _x = _v823
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v824 = val3.orientation
          _x = _v824
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v812.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v812.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v812.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v812.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v825 = val3.position
          _x = _v825
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v826 = val3.orientation
          _x = _v826
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v812.subframe_poses.append(val3)
        start = end
        end += 1
        (_v812.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v827 = val1.detach_posture
        _v828 = _v827.header
        start = end
        end += 4
        (_v828.seq,) = _get_struct_I().unpack(str[start:end])
        _v829 = _v828.stamp
        _x = _v829
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v828.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v828.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v827.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v827.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v827.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v830 = val3.time_from_start
          _x = _v830
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v827.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_result.result.response.sequence_start.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_result.result.response.sequence_start.is_diff = bool(self.action_result.result.response.sequence_start.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.planned_trajectories = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v831 = val1.joint_trajectory
        _v832 = _v831.header
        start = end
        end += 4
        (_v832.seq,) = _get_struct_I().unpack(str[start:end])
        _v833 = _v832.stamp
        _x = _v833
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v832.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v832.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v831.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v831.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v831.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v834 = val3.time_from_start
          _x = _v834
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v831.points.append(val3)
        _v835 = val1.multi_dof_joint_trajectory
        _v836 = _v835.header
        start = end
        end += 4
        (_v836.seq,) = _get_struct_I().unpack(str[start:end])
        _v837 = _v836.stamp
        _x = _v837
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v836.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v836.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v835.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v835.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v835.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v838 = val4.translation
            _x = _v838
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v839 = val4.rotation
            _x = _v839
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v840 = val4.linear
            _x = _v840
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v841 = val4.angular
            _x = _v841
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v842 = val4.linear
            _x = _v842
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v843 = val4.angular
            _x = _v843
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v844 = val3.time_from_start
          _x = _v844
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v835.points.append(val3)
        self.action_result.result.response.planned_trajectories.append(val1)
      _x = self
      start = end
      end += 20
      (_x.action_result.result.response.planning_time, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2dBd = None
def _get_struct_2dBd():
    global _struct_2dBd
    if _struct_2dBd is None:
        _struct_2dBd = struct.Struct("<2dBd")
    return _struct_2dBd
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3BidBid3I = None
def _get_struct_3BidBid3I():
    global _struct_3BidBid3I
    if _struct_3BidBid3I is None:
        _struct_3BidBid3I = struct.Struct("<3BidBid3I")
    return _struct_3BidBid3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3dBd = None
def _get_struct_3dBd():
    global _struct_3dBd
    if _struct_3dBd is None:
        _struct_3dBd = struct.Struct("<3dBd")
    return _struct_3dBd
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_d3I = None
def _get_struct_d3I():
    global _struct_d3I
    if _struct_d3I is None:
        _struct_d3I = struct.Struct("<d3I")
    return _struct_d3I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i3I = None
def _get_struct_i3I():
    global _struct_i3I
    if _struct_i3I is None:
        _struct_i3I = struct.Struct("<i3I")
    return _struct_i3I
_struct_i3d = None
def _get_struct_i3d():
    global _struct_i3d
    if _struct_i3d is None:
        _struct_i3d = struct.Struct("<i3d")
    return _struct_i3d
