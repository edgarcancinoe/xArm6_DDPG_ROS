# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveit_msgs/MoveGroupGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import octomap_msgs.msg
import sensor_msgs.msg
import shape_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class MoveGroupGoal(genpy.Message):
  _md5sum = "ce7f9820670af166b2faa14c475891b0"
  _type = "moveit_msgs/MoveGroupGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Motion planning request to pass to planner
MotionPlanRequest request

# Planning options
PlanningOptions planning_options


================================================================================
MSG: moveit_msgs/MotionPlanRequest
# This service contains the definition for a request to the motion
# planner and the output it provides

# Parameters for the workspace that the planner should work inside
WorkspaceParameters workspace_parameters

# Starting state updates. If certain joints should be considered
# at positions other than the current ones, these positions should
# be set here
RobotState start_state

# The possible goal states for the model to plan for. Each element of
# the array defines a goal region. The goal is achieved
# if the constraints for a particular region are satisfied
Constraints[] goal_constraints

# No state at any point along the path in the produced motion plan will violate these constraints (this applies to all points, not just waypoints)
Constraints path_constraints

# The constraints the resulting trajectory must satisfy
TrajectoryConstraints trajectory_constraints

# A set of trajectories that may be used as reference or initial trajectories for (typically optimization-based) planners
# These trajectories do not override start_state or goal_constraints
GenericTrajectory[] reference_trajectories

# The name of the planning pipeline to use. If no name is specified,
# the configured planning pipeline will be used
string pipeline_id

# The name of the planning algorithm to use. If no name is specified,
# the default planner of the planning pipeline will be used
string planner_id

# The name of the group of joints on which this planner is operating
string group_name

# The number of times this plan is to be computed. Shortest solution
# will be reported.
int32 num_planning_attempts

# The maximum amount of time the motion planner is allowed to plan for (in seconds)
float64 allowed_planning_time

# Scaling factors for optionally reducing the maximum joint velocities and
# accelerations.  Allowed values are in (0,1].  The maximum joint velocity and
# acceleration specified in the robot model are multiplied by thier respective
# factors.  If either are outside their valid ranges (importantly, this
# includes being set to 0.0), the factor is set to the default value of 1.0
# internally (i.e., maximum joint velocity or maximum joint acceleration).
float64 max_velocity_scaling_factor
float64 max_acceleration_scaling_factor

# Maximum cartesian speed for the given link.
# If max_cartesian_speed <= 0 the trajectory is not modified.
# These fields require the following planning request adapter: default_planner_request_adapters/LimitMaxCartesianLinkSpeed
string cartesian_speed_limited_link
float64 max_cartesian_speed # m/s

================================================================================
MSG: moveit_msgs/WorkspaceParameters
# This message contains a set of parameters useful in
# setting up the volume (a box) in which the robot is allowed to move.
# This is useful only when planning for mobile parts of
# the robot as well.

# Define the frame of reference for the box corners
Header header

# The minumum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 min_corner

# The maximum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 max_corner

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# A header, used for interpreting the poses
Header header

# The object's pose relative to the header frame.
# The shapes and subframe poses are defined relative to this pose.
geometry_msgs/Pose pose

# The id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# The collision geometries associated with the object.
# Their poses are with respect to the object's pose

# Solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# Meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Named subframes on the object. Use these to define points of interest on the object that you want
# to plan with (e.g. "tip", "spout", "handle"). The id of the object will be prepended to the subframe.
# If an object with the id "screwdriver" and a subframe "tip" is in the scene, you can use the frame
# "screwdriver/tip" for planning.
# The length of the subframe_names and subframe_poses has to be identical.
string[] subframe_names
geometry_msgs/Pose[] subframe_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the object does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: moveit_msgs/Constraints
# This message contains a list of motion planning constraints.
# All constraints must be satisfied for a goal to be considered valid

string name

JointConstraint[] joint_constraints

PositionConstraint[] position_constraints

OrientationConstraint[] orientation_constraints

VisibilityConstraint[] visibility_constraints

================================================================================
MSG: moveit_msgs/JointConstraint
# Constrain the position of a joint to be within a certain bound
string joint_name

# the bound to be achieved is [position - tolerance_below, position + tolerance_above]
float64 position
float64 tolerance_above
float64 tolerance_below

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/PositionConstraint
# This message contains the definition of a position constraint.

Header header

# The robot link this constraint refers to
string link_name

# The offset (in the link frame) for the target point on the link we are planning for
geometry_msgs/Vector3 target_point_offset

# The volume this constraint refers to
BoundingVolume constraint_region

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/BoundingVolume
# Define a volume in 3D

# A set of solid geometric primitives that make up the volume to define (as a union)
shape_msgs/SolidPrimitive[] primitives

# The poses at which the primitives are located
geometry_msgs/Pose[] primitive_poses

# In addition to primitives, meshes can be specified to add to the bounding volume (again, as union)
shape_msgs/Mesh[] meshes

# The poses at which the meshes are located
geometry_msgs/Pose[] mesh_poses

================================================================================
MSG: moveit_msgs/OrientationConstraint
# This message contains the definition of an orientation constraint.

Header header

# The desired orientation of the robot link specified as a quaternion
geometry_msgs/Quaternion orientation

# The robot link this constraint refers to
string link_name

# Tolerance on the three vector components of the orientation error (optional)
float64 absolute_x_axis_tolerance
float64 absolute_y_axis_tolerance
float64 absolute_z_axis_tolerance

# Defines how the orientation error is calculated
# The error is compared to the tolerance defined above
uint8 parameterization

# The different options for the orientation error parameterization
# - Intrinsic xyz Euler angles (default value)
uint8 XYZ_EULER_ANGLES=0
# - A rotation vector. This is similar to the angle-axis representation,
# but the magnitude of the vector represents the rotation angle.
uint8 ROTATION_VECTOR=1

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/VisibilityConstraint
# The constraint is useful to maintain visibility to a disc (the target) in a particular frame.
# This disc forms the base of a visibiliy cone whose tip is at the origin of the sensor.
# Maintaining visibility is done by ensuring the robot does not obstruct the visibility cone.
# Note:
# This constraint does NOT enforce minimum or maximum distances between the sensor
# and the target, nor does it enforce the target to be in the field of view of
# the sensor. A PositionConstraint can (and probably should) be used for such purposes.

# The radius of the disc that should be maintained visible
float64 target_radius

# The pose of the disc; as the robot moves, the pose of the disc may change as well
# This can be in the frame of a particular robot link, for example
geometry_msgs/PoseStamped target_pose

# From the sensor origin towards the target, the disc forms a visibility cone
# This cone is approximated using many sides. For example, when using 4 sides,
# that in fact makes the visibility region be a pyramid.
# This value should always be 3 or more.
int32 cone_sides

# The pose in which visibility is to be maintained.
# The frame id should represent the robot link to which the sensor is attached.
# It is assumed the sensor can look directly at the target, in any direction.
# This assumption is usually not true, but additional PositionConstraints
# can resolve this issue.
geometry_msgs/PoseStamped sensor_pose

# Even though the disc is maintained visible, the visibility cone can be very small
# because of the orientation of the disc with respect to the sensor. It is possible
# for example to view the disk almost from a side, in which case the visibility cone
# can end up having close to 0 volume. The view angle is defined to be the angle between
# the normal to the visibility disc and the direction vector from the sensor origin.
# The value below represents the minimum desired view angle. For a perfect view,
# this value will be 0 (the two vectors are exact opposites). For a completely obstructed view
# this value will be Pi/2 (the vectors are perpendicular). This value defined below
# is the maximum view angle to be maintained. This should be a value in the open interval
# (0, Pi/2). If 0 is set, the view angle is NOT enforced.
float64 max_view_angle

# This angle is used similarly to max_view_angle but limits the maximum angle
# between the sensor origin direction vector and the axis that connects the
# sensor origin to the target frame origin. The value is again in the range (0, Pi/2)
# and is NOT enforced if set to 0.
float64 max_range_angle

# The axis that is assumed to indicate the direction of view for the sensor
# X = 2, Y = 1, Z = 0
uint8 SENSOR_Z=0
uint8 SENSOR_Y=1
uint8 SENSOR_X=2
uint8 sensor_view_direction

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: moveit_msgs/TrajectoryConstraints
# The array of constraints to consider along the trajectory
Constraints[] constraints

================================================================================
MSG: moveit_msgs/GenericTrajectory
# A generic trajectory message that may either encode a joint- or cartesian-space trajectory, or both
# Trajectories encoded in this message are considered semantically equivalent
Header header
trajectory_msgs/JointTrajectory[] joint_trajectory
moveit_msgs/CartesianTrajectory[] cartesian_trajectory

================================================================================
MSG: moveit_msgs/CartesianTrajectory
# This message describes the trajectory of a tracked frame in task-space
Header header

# The name of the Cartesian frame being tracked with respect to the base frame provided in header.frame_id
string tracked_frame

CartesianTrajectoryPoint[] points

================================================================================
MSG: moveit_msgs/CartesianTrajectoryPoint
# The definition of a cartesian point in a trajectory. Defines the cartesian state of the point and it's time,
# following the pattern of the JointTrajectory message
CartesianPoint point

duration time_from_start

================================================================================
MSG: moveit_msgs/CartesianPoint
# This message defines a point in a cartesian trajectory
geometry_msgs/Pose pose
geometry_msgs/Twist velocity
geometry_msgs/Accel acceleration

================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: moveit_msgs/PlanningOptions

# The diff to consider for the planning scene (optional)
PlanningScene planning_scene_diff

# If this flag is set to true, the action
# returns an executable plan in the response but does not attempt execution
bool plan_only

# If this flag is set to true, the action of planning &
# executing is allowed to look around  (move sensors) if
# it seems that not enough information is available about
# the environment
bool look_around

# If this value is positive, the action of planning & executing
# is allowed to look around for a maximum number of attempts;
# If the value is left as 0, the default value is used, as set
# with dynamic_reconfigure
int32 look_around_attempts

# If set and if look_around is true, this value is used as
# the maximum cost allowed for a path to be considered executable.
# If the cost of a path is higher than this value, more sensing or
# a new plan needed. If left as 0.0 but look_around is true, then
# the default value set via dynamic_reconfigure is used
float64 max_safe_execution_cost

# If the plan becomes invalidated during execution, it is possible to have
# that plan recomputed and execution restarted. This flag enables this
# functionality
bool replan

# The maximum number of replanning attempts
int32 replan_attempts

# The amount of time to wait in between replanning attempts (in seconds)
float64 replan_delay

================================================================================
MSG: moveit_msgs/PlanningScene
# name of planning scene
string name

# full robot state
RobotState robot_state

# The name of the robot model this scene is for
string robot_model_name

#additional frames for duplicating tf (with respect to the planning frame)
geometry_msgs/TransformStamped[] fixed_frame_transforms

#full allowed collision matrix
AllowedCollisionMatrix allowed_collision_matrix

# all link paddings
LinkPadding[] link_padding

# all link scales
LinkScale[] link_scale

# Attached objects, collision objects, even the octomap or collision map can have
# colors associated to them. This array specifies them.
ObjectColor[] object_colors

# the collision map
PlanningSceneWorld world

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
bool is_diff

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://wiki.ros.org/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: moveit_msgs/AllowedCollisionMatrix
# The list of entry names in the matrix
string[] entry_names

# The individual entries in the allowed collision matrix
# square, symmetric, with same order as entry_names
AllowedCollisionEntry[] entry_values

# In addition to the collision matrix itself, we also have
# the default entry value for each entry name.

# If the allowed collision flag is queried for a pair of names (n1, n2)
# that is not found in the collision matrix itself, the value of
# the collision flag is considered to be that of the entry (n1 or n2)
# specified in the list below. If both n1 and n2 are found in the list
# of defaults, the result is computed with an AND operation

string[] default_entry_names
bool[] default_entry_values

================================================================================
MSG: moveit_msgs/AllowedCollisionEntry
# whether or not collision checking is enabled
bool[] enabled

================================================================================
MSG: moveit_msgs/LinkPadding
#name for the link
string link_name

# padding to apply to the link
float64 padding

================================================================================
MSG: moveit_msgs/LinkScale
#name for the link
string link_name

# scaling to apply to the link
float64 scale

================================================================================
MSG: moveit_msgs/ObjectColor
# The object id for which we specify color
string id

# The value of the color
std_msgs/ColorRGBA color

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: moveit_msgs/PlanningSceneWorld
# collision objects
CollisionObject[] collision_objects

# The octomap that represents additional collision data
octomap_msgs/OctomapWithPose octomap

================================================================================
MSG: octomap_msgs/OctomapWithPose
# A 3D map in binary format, as Octree
Header header

# The pose of the octree with respect to the header frame 
geometry_msgs/Pose origin

# The actual octree msg
octomap_msgs/Octomap octomap

================================================================================
MSG: octomap_msgs/Octomap
# A 3D map in binary format, as Octree
Header header

# Flag to denote a binary (only free/occupied) or full occupancy octree (.bt/.ot file)
bool binary

# Class id of the contained octree 
string id

# Resolution (in m) of the smallest octree nodes
float64 resolution

# binary serialization of octree, use conversions.h to read and write octrees
int8[] data
"""
  __slots__ = ['request','planning_options']
  _slot_types = ['moveit_msgs/MotionPlanRequest','moveit_msgs/PlanningOptions']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request,planning_options

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveGroupGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.request is None:
        self.request = moveit_msgs.msg.MotionPlanRequest()
      if self.planning_options is None:
        self.planning_options = moveit_msgs.msg.PlanningOptions()
    else:
      self.request = moveit_msgs.msg.MotionPlanRequest()
      self.planning_options = moveit_msgs.msg.PlanningOptions()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.request.workspace_parameters.header.seq, _x.request.workspace_parameters.header.stamp.secs, _x.request.workspace_parameters.header.stamp.nsecs))
      _x = self.request.workspace_parameters.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d3I().pack(_x.request.workspace_parameters.min_corner.x, _x.request.workspace_parameters.min_corner.y, _x.request.workspace_parameters.min_corner.z, _x.request.workspace_parameters.max_corner.x, _x.request.workspace_parameters.max_corner.y, _x.request.workspace_parameters.max_corner.z, _x.request.start_state.joint_state.header.seq, _x.request.start_state.joint_state.header.stamp.secs, _x.request.start_state.joint_state.header.stamp.nsecs))
      _x = self.request.start_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.request.start_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.request.start_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.request.start_state.joint_state.position))
      length = len(self.request.start_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.request.start_state.joint_state.velocity))
      length = len(self.request.start_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.request.start_state.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.request.start_state.multi_dof_joint_state.header.seq, _x.request.start_state.multi_dof_joint_state.header.stamp.secs, _x.request.start_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.request.start_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.request.start_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.request.start_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.transforms:
        _v1 = val1.translation
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.request.start_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.twist:
        _v3 = val1.linear
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.angular
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.request.start_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.wrench:
        _v5 = val1.force
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.torque
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.request.start_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v7 = val1.object
        _v8 = _v7.header
        _x = _v8.seq
        buff.write(_get_struct_I().pack(_x))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v10 = _v7.pose
        _v11 = _v10.position
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = _v10.orientation
        _x = _v12
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v7.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v13 = _v7.type
        _x = _v13.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v13.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v7.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v7.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitive_poses:
          _v14 = val3.position
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v15 = val3.orientation
          _x = _v15
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v7.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.mesh_poses:
          _v16 = val3.position
          _x = _v16
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v17 = val3.orientation
          _x = _v17
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v7.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.plane_poses:
          _v18 = val3.position
          _x = _v18
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v19 = val3.orientation
          _x = _v19
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v7.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.subframe_poses:
          _v20 = val3.position
          _x = _v20
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v21 = val3.orientation
          _x = _v21
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v7.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v22 = val1.detach_posture
        _v23 = _v22.header
        _x = _v23.seq
        buff.write(_get_struct_I().pack(_x))
        _v24 = _v23.stamp
        _x = _v24
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v23.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v22.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v22.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v22.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v22.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v25 = val3.time_from_start
          _x = _v25
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.request.start_state.is_diff
      buff.write(_get_struct_B().pack(_x))
      length = len(self.request.goal_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.goal_constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v26 = val2.header
          _x = _v26.seq
          buff.write(_get_struct_I().pack(_x))
          _v27 = _v26.stamp
          _x = _v27
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v26.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v28 = val2.target_point_offset
          _x = _v28
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v29 = val2.constraint_region
          length = len(_v29.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v29.primitives:
            _x = val4.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val4.dimensions))
          length = len(_v29.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v29.primitive_poses:
            _v30 = val4.position
            _x = _v30
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v31 = val4.orientation
            _x = _v31
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v29.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v29.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(_get_struct_3I().pack(*val5.vertex_indices))
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v29.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v29.mesh_poses:
            _v32 = val4.position
            _x = _v32
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v33 = val4.orientation
            _x = _v33
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.weight
          buff.write(_get_struct_d().pack(_x))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v34 = val2.header
          _x = _v34.seq
          buff.write(_get_struct_I().pack(_x))
          _v35 = _v34.stamp
          _x = _v35
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v34.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v36 = val2.orientation
          _x = _v36
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          _x = val2.target_radius
          buff.write(_get_struct_d().pack(_x))
          _v37 = val2.target_pose
          _v38 = _v37.header
          _x = _v38.seq
          buff.write(_get_struct_I().pack(_x))
          _v39 = _v38.stamp
          _x = _v39
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v38.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v40 = _v37.pose
          _v41 = _v40.position
          _x = _v41
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v42 = _v40.orientation
          _x = _v42
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.cone_sides
          buff.write(_get_struct_i().pack(_x))
          _v43 = val2.sensor_pose
          _v44 = _v43.header
          _x = _v44.seq
          buff.write(_get_struct_I().pack(_x))
          _v45 = _v44.stamp
          _x = _v45
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v44.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v46 = _v43.pose
          _v47 = _v46.position
          _x = _v47
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v48 = _v46.orientation
          _x = _v48
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.request.path_constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.request.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.request.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.position_constraints:
        _v49 = val1.header
        _x = _v49.seq
        buff.write(_get_struct_I().pack(_x))
        _v50 = _v49.stamp
        _x = _v50
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v49.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v51 = val1.target_point_offset
        _x = _v51
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v52 = val1.constraint_region
        length = len(_v52.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v52.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v52.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v52.primitive_poses:
          _v53 = val3.position
          _x = _v53
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v54 = val3.orientation
          _x = _v54
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v52.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v52.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v52.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v52.mesh_poses:
          _v55 = val3.position
          _x = _v55
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v56 = val3.orientation
          _x = _v56
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      length = len(self.request.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.orientation_constraints:
        _v57 = val1.header
        _x = _v57.seq
        buff.write(_get_struct_I().pack(_x))
        _v58 = _v57.stamp
        _x = _v58
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v57.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v59 = val1.orientation
        _x = _v59
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
      length = len(self.request.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.visibility_constraints:
        _x = val1.target_radius
        buff.write(_get_struct_d().pack(_x))
        _v60 = val1.target_pose
        _v61 = _v60.header
        _x = _v61.seq
        buff.write(_get_struct_I().pack(_x))
        _v62 = _v61.stamp
        _x = _v62
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v61.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v63 = _v60.pose
        _v64 = _v63.position
        _x = _v64
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v65 = _v63.orientation
        _x = _v65
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.cone_sides
        buff.write(_get_struct_i().pack(_x))
        _v66 = val1.sensor_pose
        _v67 = _v66.header
        _x = _v67.seq
        buff.write(_get_struct_I().pack(_x))
        _v68 = _v67.stamp
        _x = _v68
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v67.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v69 = _v66.pose
        _v70 = _v69.position
        _x = _v70
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v71 = _v69.orientation
        _x = _v71
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.request.trajectory_constraints.constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.trajectory_constraints.constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v72 = val2.header
          _x = _v72.seq
          buff.write(_get_struct_I().pack(_x))
          _v73 = _v72.stamp
          _x = _v73
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v72.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v74 = val2.target_point_offset
          _x = _v74
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v75 = val2.constraint_region
          length = len(_v75.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v75.primitives:
            _x = val4.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val4.dimensions))
          length = len(_v75.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v75.primitive_poses:
            _v76 = val4.position
            _x = _v76
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v77 = val4.orientation
            _x = _v77
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v75.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v75.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(_get_struct_3I().pack(*val5.vertex_indices))
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v75.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v75.mesh_poses:
            _v78 = val4.position
            _x = _v78
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v79 = val4.orientation
            _x = _v79
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.weight
          buff.write(_get_struct_d().pack(_x))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v80 = val2.header
          _x = _v80.seq
          buff.write(_get_struct_I().pack(_x))
          _v81 = _v80.stamp
          _x = _v81
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v80.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v82 = val2.orientation
          _x = _v82
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          _x = val2.target_radius
          buff.write(_get_struct_d().pack(_x))
          _v83 = val2.target_pose
          _v84 = _v83.header
          _x = _v84.seq
          buff.write(_get_struct_I().pack(_x))
          _v85 = _v84.stamp
          _x = _v85
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v84.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v86 = _v83.pose
          _v87 = _v86.position
          _x = _v87
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v88 = _v86.orientation
          _x = _v88
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.cone_sides
          buff.write(_get_struct_i().pack(_x))
          _v89 = val2.sensor_pose
          _v90 = _v89.header
          _x = _v90.seq
          buff.write(_get_struct_I().pack(_x))
          _v91 = _v90.stamp
          _x = _v91
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v90.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v92 = _v89.pose
          _v93 = _v92.position
          _x = _v93
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v94 = _v92.orientation
          _x = _v94
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.request.reference_trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.reference_trajectories:
        _v95 = val1.header
        _x = _v95.seq
        buff.write(_get_struct_I().pack(_x))
        _v96 = _v95.stamp
        _x = _v96
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v95.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.joint_trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_trajectory:
          _v97 = val2.header
          _x = _v97.seq
          buff.write(_get_struct_I().pack(_x))
          _v98 = _v97.stamp
          _x = _v98
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v97.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.joint_names)
          buff.write(_struct_I.pack(length))
          for val3 in val2.joint_names:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.positions))
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.velocities))
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.accelerations))
            length = len(val3.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val3.effort))
            _v99 = val3.time_from_start
            _x = _v99
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(val1.cartesian_trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.cartesian_trajectory:
          _v100 = val2.header
          _x = _v100.seq
          buff.write(_get_struct_I().pack(_x))
          _v101 = _v100.stamp
          _x = _v101
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v100.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.tracked_frame
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _v102 = val3.point
            _v103 = _v102.pose
            _v104 = _v103.position
            _x = _v104
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v105 = _v103.orientation
            _x = _v105
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _v106 = _v102.velocity
            _v107 = _v106.linear
            _x = _v107
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v108 = _v106.angular
            _x = _v108
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v109 = _v102.acceleration
            _v110 = _v109.linear
            _x = _v110
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v111 = _v109.angular
            _x = _v111
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v112 = val3.time_from_start
            _x = _v112
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self.request.pipeline_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.request.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.request.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i3d().pack(_x.request.num_planning_attempts, _x.request.allowed_planning_time, _x.request.max_velocity_scaling_factor, _x.request.max_acceleration_scaling_factor))
      _x = self.request.cartesian_speed_limited_link
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.request.max_cartesian_speed
      buff.write(_get_struct_d().pack(_x))
      _x = self.planning_options.planning_scene_diff.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.planning_options.planning_scene_diff.robot_state.joint_state.position))
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.planning_options.planning_scene_diff.robot_state.joint_state.velocity))
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.planning_options.planning_scene_diff.robot_state.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms:
        _v113 = val1.translation
        _x = _v113
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v114 = val1.rotation
        _x = _v114
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist:
        _v115 = val1.linear
        _x = _v115
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v116 = val1.angular
        _x = _v116
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench:
        _v117 = val1.force
        _x = _v117
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v118 = val1.torque
        _x = _v118
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.planning_options.planning_scene_diff.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v119 = val1.object
        _v120 = _v119.header
        _x = _v120.seq
        buff.write(_get_struct_I().pack(_x))
        _v121 = _v120.stamp
        _x = _v121
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v120.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v122 = _v119.pose
        _v123 = _v122.position
        _x = _v123
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v124 = _v122.orientation
        _x = _v124
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v119.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v125 = _v119.type
        _x = _v125.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v125.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v119.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v119.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v119.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v119.primitive_poses:
          _v126 = val3.position
          _x = _v126
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v127 = val3.orientation
          _x = _v127
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v119.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v119.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v119.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v119.mesh_poses:
          _v128 = val3.position
          _x = _v128
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v129 = val3.orientation
          _x = _v129
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v119.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v119.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v119.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v119.plane_poses:
          _v130 = val3.position
          _x = _v130
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v131 = val3.orientation
          _x = _v131
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v119.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v119.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v119.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v119.subframe_poses:
          _v132 = val3.position
          _x = _v132
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v133 = val3.orientation
          _x = _v133
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v119.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v134 = val1.detach_posture
        _v135 = _v134.header
        _x = _v135.seq
        buff.write(_get_struct_I().pack(_x))
        _v136 = _v135.stamp
        _x = _v136
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v135.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v134.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v134.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v134.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v134.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v137 = val3.time_from_start
          _x = _v137
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.planning_options.planning_scene_diff.robot_state.is_diff
      buff.write(_get_struct_B().pack(_x))
      _x = self.planning_options.planning_scene_diff.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.planning_options.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.fixed_frame_transforms:
        _v138 = val1.header
        _x = _v138.seq
        buff.write(_get_struct_I().pack(_x))
        _v139 = _v138.stamp
        _x = _v139
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v138.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v140 = val1.transform
        _v141 = _v140.translation
        _x = _v141
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v142 = _v140.rotation
        _x = _v142
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*val1.enabled))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      length = len(self.planning_options.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.padding
        buff.write(_get_struct_d().pack(_x))
      length = len(self.planning_options.planning_scene_diff.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.scale
        buff.write(_get_struct_d().pack(_x))
      length = len(self.planning_options.planning_scene_diff.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v143 = val1.color
        _x = _v143
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.planning_options.planning_scene_diff.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.world.collision_objects:
        _v144 = val1.header
        _x = _v144.seq
        buff.write(_get_struct_I().pack(_x))
        _v145 = _v144.stamp
        _x = _v145
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v144.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v146 = val1.pose
        _v147 = _v146.position
        _x = _v147
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v148 = _v146.orientation
        _x = _v148
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v149 = val1.type
        _x = _v149.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v149.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          _x = val2.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.dimensions))
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v150 = val2.position
          _x = _v150
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v151 = val2.orientation
          _x = _v151
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(_get_struct_3I().pack(*val3.vertex_indices))
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v152 = val2.position
          _x = _v152
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v153 = val2.orientation
          _x = _v153
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(_get_struct_4d().pack(*val2.coef))
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v154 = val2.position
          _x = _v154
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v155 = val2.orientation
          _x = _v155
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.subframe_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        length = len(val1.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_poses:
          _v156 = val2.position
          _x = _v156
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v157 = val2.orientation
          _x = _v157
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.operation
        buff.write(_get_struct_b().pack(_x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.planning_options.planning_scene_diff.world.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.planning_options.planning_scene_diff.world.octomap.octomap.binary
      buff.write(_get_struct_B().pack(_x))
      _x = self.planning_options.planning_scene_diff.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.planning_options.planning_scene_diff.world.octomap.octomap.resolution
      buff.write(_get_struct_d().pack(_x))
      length = len(self.planning_options.planning_scene_diff.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.planning_options.planning_scene_diff.world.octomap.octomap.data))
      _x = self
      buff.write(_get_struct_3BidBid().pack(_x.planning_options.planning_scene_diff.is_diff, _x.planning_options.plan_only, _x.planning_options.look_around, _x.planning_options.look_around_attempts, _x.planning_options.max_safe_execution_cost, _x.planning_options.replan, _x.planning_options.replan_attempts, _x.planning_options.replan_delay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.request is None:
        self.request = moveit_msgs.msg.MotionPlanRequest()
      if self.planning_options is None:
        self.planning_options = moveit_msgs.msg.PlanningOptions()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.request.workspace_parameters.header.seq, _x.request.workspace_parameters.header.stamp.secs, _x.request.workspace_parameters.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.workspace_parameters.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.workspace_parameters.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.request.workspace_parameters.min_corner.x, _x.request.workspace_parameters.min_corner.y, _x.request.workspace_parameters.min_corner.z, _x.request.workspace_parameters.max_corner.x, _x.request.workspace_parameters.max_corner.y, _x.request.workspace_parameters.max_corner.z, _x.request.start_state.joint_state.header.seq, _x.request.start_state.joint_state.header.stamp.secs, _x.request.start_state.joint_state.header.stamp.nsecs,) = _get_struct_6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.start_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.start_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.request.start_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.request.start_state.joint_state.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.request.start_state.joint_state.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.request.start_state.joint_state.effort = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.request.start_state.multi_dof_joint_state.header.seq, _x.request.start_state.multi_dof_joint_state.header.stamp.secs, _x.request.start_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.start_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.start_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.request.start_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v158 = val1.translation
        _x = _v158
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v159 = val1.rotation
        _x = _v159
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.request.start_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v160 = val1.linear
        _x = _v160
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v161 = val1.angular
        _x = _v161
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.request.start_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v162 = val1.force
        _x = _v162
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v163 = val1.torque
        _x = _v163
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.request.start_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v164 = val1.object
        _v165 = _v164.header
        start = end
        end += 4
        (_v165.seq,) = _get_struct_I().unpack(str[start:end])
        _v166 = _v165.stamp
        _x = _v166
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v165.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v165.frame_id = str[start:end]
        _v167 = _v164.pose
        _v168 = _v167.position
        _x = _v168
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v169 = _v167.orientation
        _x = _v169
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v164.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v164.id = str[start:end]
        _v170 = _v164.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v170.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v170.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v170.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v170.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v164.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v164.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v164.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v171 = val3.position
          _x = _v171
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v172 = val3.orientation
          _x = _v172
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v164.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v164.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v164.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v164.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v173 = val3.position
          _x = _v173
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v174 = val3.orientation
          _x = _v174
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v164.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v164.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v164.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v164.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v175 = val3.position
          _x = _v175
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v176 = val3.orientation
          _x = _v176
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v164.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v164.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v164.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v164.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v177 = val3.position
          _x = _v177
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v178 = val3.orientation
          _x = _v178
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v164.subframe_poses.append(val3)
        start = end
        end += 1
        (_v164.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v179 = val1.detach_posture
        _v180 = _v179.header
        start = end
        end += 4
        (_v180.seq,) = _get_struct_I().unpack(str[start:end])
        _v181 = _v180.stamp
        _x = _v181
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v180.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v180.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v179.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v179.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v179.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v182 = val3.time_from_start
          _x = _v182
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v179.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.request.start_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.request.start_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.request.start_state.is_diff = bool(self.request.start_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.goal_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v183 = val2.header
          start = end
          end += 4
          (_v183.seq,) = _get_struct_I().unpack(str[start:end])
          _v184 = _v183.stamp
          _x = _v184
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v183.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v183.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.link_name = str[start:end]
          _v185 = val2.target_point_offset
          _x = _v185
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v186 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v186.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.dimensions = s.unpack(str[start:end])
            _v186.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v186.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v187 = val4.position
            _x = _v187
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v188 = val4.orientation
            _x = _v188
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v186.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v186.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v186.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v186.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v189 = val4.position
            _x = _v189
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v190 = val4.orientation
            _x = _v190
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v186.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v191 = val2.header
          start = end
          end += 4
          (_v191.seq,) = _get_struct_I().unpack(str[start:end])
          _v192 = _v191.stamp
          _x = _v192
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v191.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v191.frame_id = str[start:end]
          _v193 = val2.orientation
          _x = _v193
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 33
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v194 = val2.target_pose
          _v195 = _v194.header
          start = end
          end += 4
          (_v195.seq,) = _get_struct_I().unpack(str[start:end])
          _v196 = _v195.stamp
          _x = _v196
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v195.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v195.frame_id = str[start:end]
          _v197 = _v194.pose
          _v198 = _v197.position
          _x = _v198
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v199 = _v197.orientation
          _x = _v199
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v200 = val2.sensor_pose
          _v201 = _v200.header
          start = end
          end += 4
          (_v201.seq,) = _get_struct_I().unpack(str[start:end])
          _v202 = _v201.stamp
          _x = _v202
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v201.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v201.frame_id = str[start:end]
          _v203 = _v200.pose
          _v204 = _v203.position
          _x = _v204
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v205 = _v203.orientation
          _x = _v205
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.request.goal_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.path_constraints.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.path_constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.request.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v206 = val1.header
        start = end
        end += 4
        (_v206.seq,) = _get_struct_I().unpack(str[start:end])
        _v207 = _v206.stamp
        _x = _v207
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v206.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v206.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v208 = val1.target_point_offset
        _x = _v208
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v209 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v209.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v209.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v209.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v210 = val3.position
          _x = _v210
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v211 = val3.orientation
          _x = _v211
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v209.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v209.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v209.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v209.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v212 = val3.position
          _x = _v212
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v213 = val3.orientation
          _x = _v213
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v209.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.request.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v214 = val1.header
        start = end
        end += 4
        (_v214.seq,) = _get_struct_I().unpack(str[start:end])
        _v215 = _v214.stamp
        _x = _v215
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v214.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v214.frame_id = str[start:end]
        _v216 = val1.orientation
        _x = _v216
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 33
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
        self.request.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _get_struct_d().unpack(str[start:end])
        _v217 = val1.target_pose
        _v218 = _v217.header
        start = end
        end += 4
        (_v218.seq,) = _get_struct_I().unpack(str[start:end])
        _v219 = _v218.stamp
        _x = _v219
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v218.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v218.frame_id = str[start:end]
        _v220 = _v217.pose
        _v221 = _v220.position
        _x = _v221
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v222 = _v220.orientation
        _x = _v222
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _get_struct_i().unpack(str[start:end])
        _v223 = val1.sensor_pose
        _v224 = _v223.header
        start = end
        end += 4
        (_v224.seq,) = _get_struct_I().unpack(str[start:end])
        _v225 = _v224.stamp
        _x = _v225
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v224.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v224.frame_id = str[start:end]
        _v226 = _v223.pose
        _v227 = _v226.position
        _x = _v227
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v228 = _v226.orientation
        _x = _v228
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
        self.request.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.trajectory_constraints.constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v229 = val2.header
          start = end
          end += 4
          (_v229.seq,) = _get_struct_I().unpack(str[start:end])
          _v230 = _v229.stamp
          _x = _v230
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v229.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v229.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.link_name = str[start:end]
          _v231 = val2.target_point_offset
          _x = _v231
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v232 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v232.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.dimensions = s.unpack(str[start:end])
            _v232.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v232.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v233 = val4.position
            _x = _v233
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v234 = val4.orientation
            _x = _v234
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v232.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v232.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v232.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v232.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v235 = val4.position
            _x = _v235
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v236 = val4.orientation
            _x = _v236
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v232.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v237 = val2.header
          start = end
          end += 4
          (_v237.seq,) = _get_struct_I().unpack(str[start:end])
          _v238 = _v237.stamp
          _x = _v238
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v237.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v237.frame_id = str[start:end]
          _v239 = val2.orientation
          _x = _v239
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 33
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v240 = val2.target_pose
          _v241 = _v240.header
          start = end
          end += 4
          (_v241.seq,) = _get_struct_I().unpack(str[start:end])
          _v242 = _v241.stamp
          _x = _v242
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v241.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v241.frame_id = str[start:end]
          _v243 = _v240.pose
          _v244 = _v243.position
          _x = _v244
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v245 = _v243.orientation
          _x = _v245
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v246 = val2.sensor_pose
          _v247 = _v246.header
          start = end
          end += 4
          (_v247.seq,) = _get_struct_I().unpack(str[start:end])
          _v248 = _v247.stamp
          _x = _v248
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v247.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v247.frame_id = str[start:end]
          _v249 = _v246.pose
          _v250 = _v249.position
          _x = _v250
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v251 = _v249.orientation
          _x = _v251
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.request.trajectory_constraints.constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.reference_trajectories = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.GenericTrajectory()
        _v252 = val1.header
        start = end
        end += 4
        (_v252.seq,) = _get_struct_I().unpack(str[start:end])
        _v253 = _v252.stamp
        _x = _v253
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v252.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v252.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_trajectory = []
        for i in range(0, length):
          val2 = trajectory_msgs.msg.JointTrajectory()
          _v254 = val2.header
          start = end
          end += 4
          (_v254.seq,) = _get_struct_I().unpack(str[start:end])
          _v255 = _v254.stamp
          _x = _v255
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v254.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v254.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3 = str[start:end]
            val2.joint_names.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.positions = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.velocities = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.accelerations = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.effort = s.unpack(str[start:end])
            _v256 = val3.time_from_start
            _x = _v256
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            val2.points.append(val3)
          val1.joint_trajectory.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.cartesian_trajectory = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.CartesianTrajectory()
          _v257 = val2.header
          start = end
          end += 4
          (_v257.seq,) = _get_struct_I().unpack(str[start:end])
          _v258 = _v257.stamp
          _x = _v258
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v257.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v257.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.tracked_frame = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.tracked_frame = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = moveit_msgs.msg.CartesianTrajectoryPoint()
            _v259 = val3.point
            _v260 = _v259.pose
            _v261 = _v260.position
            _x = _v261
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v262 = _v260.orientation
            _x = _v262
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v263 = _v259.velocity
            _v264 = _v263.linear
            _x = _v264
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v265 = _v263.angular
            _x = _v265
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v266 = _v259.acceleration
            _v267 = _v266.linear
            _x = _v267
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v268 = _v266.angular
            _x = _v268
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v269 = val3.time_from_start
            _x = _v269
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            val2.points.append(val3)
          val1.cartesian_trajectory.append(val2)
        self.request.reference_trajectories.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.pipeline_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.pipeline_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.planner_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.group_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.group_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.request.num_planning_attempts, _x.request.allowed_planning_time, _x.request.max_velocity_scaling_factor, _x.request.max_acceleration_scaling_factor,) = _get_struct_i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.cartesian_speed_limited_link = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.cartesian_speed_limited_link = str[start:end]
      start = end
      end += 8
      (self.request.max_cartesian_speed,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.planning_options.planning_scene_diff.robot_state.joint_state.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.planning_options.planning_scene_diff.robot_state.joint_state.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.planning_options.planning_scene_diff.robot_state.joint_state.effort = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v270 = val1.translation
        _x = _v270
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v271 = val1.rotation
        _x = _v271
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v272 = val1.linear
        _x = _v272
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v273 = val1.angular
        _x = _v273
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v274 = val1.force
        _x = _v274
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v275 = val1.torque
        _x = _v275
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v276 = val1.object
        _v277 = _v276.header
        start = end
        end += 4
        (_v277.seq,) = _get_struct_I().unpack(str[start:end])
        _v278 = _v277.stamp
        _x = _v278
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v277.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v277.frame_id = str[start:end]
        _v279 = _v276.pose
        _v280 = _v279.position
        _x = _v280
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v281 = _v279.orientation
        _x = _v281
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v276.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v276.id = str[start:end]
        _v282 = _v276.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v282.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v282.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v282.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v282.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v276.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v276.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v276.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v283 = val3.position
          _x = _v283
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v284 = val3.orientation
          _x = _v284
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v276.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v276.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v276.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v276.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v285 = val3.position
          _x = _v285
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v286 = val3.orientation
          _x = _v286
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v276.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v276.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v276.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v276.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v287 = val3.position
          _x = _v287
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v288 = val3.orientation
          _x = _v288
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v276.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v276.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v276.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v276.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v289 = val3.position
          _x = _v289
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v290 = val3.orientation
          _x = _v290
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v276.subframe_poses.append(val3)
        start = end
        end += 1
        (_v276.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v291 = val1.detach_posture
        _v292 = _v291.header
        start = end
        end += 4
        (_v292.seq,) = _get_struct_I().unpack(str[start:end])
        _v293 = _v292.stamp
        _x = _v293
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v292.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v292.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v291.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v291.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v291.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v294 = val3.time_from_start
          _x = _v294
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v291.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.planning_options.planning_scene_diff.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.is_diff = bool(self.planning_options.planning_scene_diff.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.robot_model_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v295 = val1.header
        start = end
        end += 4
        (_v295.seq,) = _get_struct_I().unpack(str[start:end])
        _v296 = _v295.stamp
        _x = _v296
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v295.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v295.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.child_frame_id = str[start:end]
        _v297 = val1.transform
        _v298 = _v297.translation
        _x = _v298
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v299 = _v297.rotation
        _x = _v299
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.enabled = s.unpack(str[start:end])
        val1.enabled = list(map(bool, val1.enabled))
        self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = s.unpack(str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = list(map(bool, self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v300 = val1.color
        _x = _v300
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.planning_options.planning_scene_diff.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v301 = val1.header
        start = end
        end += 4
        (_v301.seq,) = _get_struct_I().unpack(str[start:end])
        _v302 = _v301.stamp
        _x = _v302
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v301.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v301.frame_id = str[start:end]
        _v303 = val1.pose
        _v304 = _v303.position
        _x = _v304
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v305 = _v303.orientation
        _x = _v305
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v306 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v306.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v306.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v306.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v306.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.dimensions = s.unpack(str[start:end])
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v307 = val2.position
          _x = _v307
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v308 = val2.orientation
          _x = _v308
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v309 = val2.position
          _x = _v309
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v310 = val2.orientation
          _x = _v310
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = _get_struct_4d().unpack(str[start:end])
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v311 = val2.position
          _x = _v311
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v312 = val2.orientation
          _x = _v312
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.subframe_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v313 = val2.position
          _x = _v313
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v314 = val2.orientation
          _x = _v314
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.subframe_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.planning_options.planning_scene_diff.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.planning_options.planning_scene_diff.world.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.planning_options.planning_scene_diff.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.planning_options.planning_scene_diff.world.octomap.octomap.binary = bool(self.planning_options.planning_scene_diff.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.planning_options.planning_scene_diff.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.planning_options.planning_scene_diff.world.octomap.octomap.data = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.planning_options.planning_scene_diff.is_diff, _x.planning_options.plan_only, _x.planning_options.look_around, _x.planning_options.look_around_attempts, _x.planning_options.max_safe_execution_cost, _x.planning_options.replan, _x.planning_options.replan_attempts, _x.planning_options.replan_delay,) = _get_struct_3BidBid().unpack(str[start:end])
      self.planning_options.planning_scene_diff.is_diff = bool(self.planning_options.planning_scene_diff.is_diff)
      self.planning_options.plan_only = bool(self.planning_options.plan_only)
      self.planning_options.look_around = bool(self.planning_options.look_around)
      self.planning_options.replan = bool(self.planning_options.replan)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.request.workspace_parameters.header.seq, _x.request.workspace_parameters.header.stamp.secs, _x.request.workspace_parameters.header.stamp.nsecs))
      _x = self.request.workspace_parameters.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d3I().pack(_x.request.workspace_parameters.min_corner.x, _x.request.workspace_parameters.min_corner.y, _x.request.workspace_parameters.min_corner.z, _x.request.workspace_parameters.max_corner.x, _x.request.workspace_parameters.max_corner.y, _x.request.workspace_parameters.max_corner.z, _x.request.start_state.joint_state.header.seq, _x.request.start_state.joint_state.header.stamp.secs, _x.request.start_state.joint_state.header.stamp.nsecs))
      _x = self.request.start_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.request.start_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.request.start_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.request.start_state.joint_state.position.tostring())
      length = len(self.request.start_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.request.start_state.joint_state.velocity.tostring())
      length = len(self.request.start_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.request.start_state.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.request.start_state.multi_dof_joint_state.header.seq, _x.request.start_state.multi_dof_joint_state.header.stamp.secs, _x.request.start_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.request.start_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.request.start_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.request.start_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.transforms:
        _v315 = val1.translation
        _x = _v315
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v316 = val1.rotation
        _x = _v316
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.request.start_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.twist:
        _v317 = val1.linear
        _x = _v317
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v318 = val1.angular
        _x = _v318
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.request.start_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.wrench:
        _v319 = val1.force
        _x = _v319
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v320 = val1.torque
        _x = _v320
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.request.start_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v321 = val1.object
        _v322 = _v321.header
        _x = _v322.seq
        buff.write(_get_struct_I().pack(_x))
        _v323 = _v322.stamp
        _x = _v323
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v322.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v324 = _v321.pose
        _v325 = _v324.position
        _x = _v325
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v326 = _v324.orientation
        _x = _v326
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v321.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v327 = _v321.type
        _x = _v327.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v327.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v321.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v321.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v321.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v321.primitive_poses:
          _v328 = val3.position
          _x = _v328
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v329 = val3.orientation
          _x = _v329
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v321.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v321.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v321.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v321.mesh_poses:
          _v330 = val3.position
          _x = _v330
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v331 = val3.orientation
          _x = _v331
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v321.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v321.planes:
          buff.write(val3.coef.tostring())
        length = len(_v321.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v321.plane_poses:
          _v332 = val3.position
          _x = _v332
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v333 = val3.orientation
          _x = _v333
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v321.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v321.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v321.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v321.subframe_poses:
          _v334 = val3.position
          _x = _v334
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v335 = val3.orientation
          _x = _v335
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v321.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v336 = val1.detach_posture
        _v337 = _v336.header
        _x = _v337.seq
        buff.write(_get_struct_I().pack(_x))
        _v338 = _v337.stamp
        _x = _v338
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v337.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v336.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v336.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v336.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v336.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v339 = val3.time_from_start
          _x = _v339
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.request.start_state.is_diff
      buff.write(_get_struct_B().pack(_x))
      length = len(self.request.goal_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.goal_constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v340 = val2.header
          _x = _v340.seq
          buff.write(_get_struct_I().pack(_x))
          _v341 = _v340.stamp
          _x = _v341
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v340.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v342 = val2.target_point_offset
          _x = _v342
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v343 = val2.constraint_region
          length = len(_v343.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v343.primitives:
            _x = val4.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.dimensions.tostring())
          length = len(_v343.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v343.primitive_poses:
            _v344 = val4.position
            _x = _v344
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v345 = val4.orientation
            _x = _v345
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v343.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v343.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(val5.vertex_indices.tostring())
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v343.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v343.mesh_poses:
            _v346 = val4.position
            _x = _v346
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v347 = val4.orientation
            _x = _v347
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.weight
          buff.write(_get_struct_d().pack(_x))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v348 = val2.header
          _x = _v348.seq
          buff.write(_get_struct_I().pack(_x))
          _v349 = _v348.stamp
          _x = _v349
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v348.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v350 = val2.orientation
          _x = _v350
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          _x = val2.target_radius
          buff.write(_get_struct_d().pack(_x))
          _v351 = val2.target_pose
          _v352 = _v351.header
          _x = _v352.seq
          buff.write(_get_struct_I().pack(_x))
          _v353 = _v352.stamp
          _x = _v353
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v352.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v354 = _v351.pose
          _v355 = _v354.position
          _x = _v355
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v356 = _v354.orientation
          _x = _v356
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.cone_sides
          buff.write(_get_struct_i().pack(_x))
          _v357 = val2.sensor_pose
          _v358 = _v357.header
          _x = _v358.seq
          buff.write(_get_struct_I().pack(_x))
          _v359 = _v358.stamp
          _x = _v359
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v358.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v360 = _v357.pose
          _v361 = _v360.position
          _x = _v361
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v362 = _v360.orientation
          _x = _v362
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.request.path_constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.request.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.request.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.position_constraints:
        _v363 = val1.header
        _x = _v363.seq
        buff.write(_get_struct_I().pack(_x))
        _v364 = _v363.stamp
        _x = _v364
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v363.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v365 = val1.target_point_offset
        _x = _v365
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v366 = val1.constraint_region
        length = len(_v366.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v366.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v366.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v366.primitive_poses:
          _v367 = val3.position
          _x = _v367
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v368 = val3.orientation
          _x = _v368
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v366.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v366.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v366.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v366.mesh_poses:
          _v369 = val3.position
          _x = _v369
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v370 = val3.orientation
          _x = _v370
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      length = len(self.request.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.orientation_constraints:
        _v371 = val1.header
        _x = _v371.seq
        buff.write(_get_struct_I().pack(_x))
        _v372 = _v371.stamp
        _x = _v372
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v371.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v373 = val1.orientation
        _x = _v373
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
      length = len(self.request.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.visibility_constraints:
        _x = val1.target_radius
        buff.write(_get_struct_d().pack(_x))
        _v374 = val1.target_pose
        _v375 = _v374.header
        _x = _v375.seq
        buff.write(_get_struct_I().pack(_x))
        _v376 = _v375.stamp
        _x = _v376
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v375.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v377 = _v374.pose
        _v378 = _v377.position
        _x = _v378
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v379 = _v377.orientation
        _x = _v379
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.cone_sides
        buff.write(_get_struct_i().pack(_x))
        _v380 = val1.sensor_pose
        _v381 = _v380.header
        _x = _v381.seq
        buff.write(_get_struct_I().pack(_x))
        _v382 = _v381.stamp
        _x = _v382
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v381.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v383 = _v380.pose
        _v384 = _v383.position
        _x = _v384
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v385 = _v383.orientation
        _x = _v385
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.request.trajectory_constraints.constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.trajectory_constraints.constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v386 = val2.header
          _x = _v386.seq
          buff.write(_get_struct_I().pack(_x))
          _v387 = _v386.stamp
          _x = _v387
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v386.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v388 = val2.target_point_offset
          _x = _v388
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v389 = val2.constraint_region
          length = len(_v389.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v389.primitives:
            _x = val4.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.dimensions.tostring())
          length = len(_v389.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v389.primitive_poses:
            _v390 = val4.position
            _x = _v390
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v391 = val4.orientation
            _x = _v391
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v389.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v389.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(val5.vertex_indices.tostring())
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v389.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v389.mesh_poses:
            _v392 = val4.position
            _x = _v392
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v393 = val4.orientation
            _x = _v393
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.weight
          buff.write(_get_struct_d().pack(_x))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v394 = val2.header
          _x = _v394.seq
          buff.write(_get_struct_I().pack(_x))
          _v395 = _v394.stamp
          _x = _v395
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v394.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v396 = val2.orientation
          _x = _v396
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          _x = val2.target_radius
          buff.write(_get_struct_d().pack(_x))
          _v397 = val2.target_pose
          _v398 = _v397.header
          _x = _v398.seq
          buff.write(_get_struct_I().pack(_x))
          _v399 = _v398.stamp
          _x = _v399
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v398.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v400 = _v397.pose
          _v401 = _v400.position
          _x = _v401
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v402 = _v400.orientation
          _x = _v402
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.cone_sides
          buff.write(_get_struct_i().pack(_x))
          _v403 = val2.sensor_pose
          _v404 = _v403.header
          _x = _v404.seq
          buff.write(_get_struct_I().pack(_x))
          _v405 = _v404.stamp
          _x = _v405
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v404.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v406 = _v403.pose
          _v407 = _v406.position
          _x = _v407
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v408 = _v406.orientation
          _x = _v408
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.request.reference_trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.reference_trajectories:
        _v409 = val1.header
        _x = _v409.seq
        buff.write(_get_struct_I().pack(_x))
        _v410 = _v409.stamp
        _x = _v410
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v409.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.joint_trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_trajectory:
          _v411 = val2.header
          _x = _v411.seq
          buff.write(_get_struct_I().pack(_x))
          _v412 = _v411.stamp
          _x = _v412
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v411.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.joint_names)
          buff.write(_struct_I.pack(length))
          for val3 in val2.joint_names:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.positions.tostring())
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.velocities.tostring())
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.accelerations.tostring())
            length = len(val3.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.effort.tostring())
            _v413 = val3.time_from_start
            _x = _v413
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(val1.cartesian_trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.cartesian_trajectory:
          _v414 = val2.header
          _x = _v414.seq
          buff.write(_get_struct_I().pack(_x))
          _v415 = _v414.stamp
          _x = _v415
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v414.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.tracked_frame
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _v416 = val3.point
            _v417 = _v416.pose
            _v418 = _v417.position
            _x = _v418
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v419 = _v417.orientation
            _x = _v419
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _v420 = _v416.velocity
            _v421 = _v420.linear
            _x = _v421
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v422 = _v420.angular
            _x = _v422
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v423 = _v416.acceleration
            _v424 = _v423.linear
            _x = _v424
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v425 = _v423.angular
            _x = _v425
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v426 = val3.time_from_start
            _x = _v426
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self.request.pipeline_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.request.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.request.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i3d().pack(_x.request.num_planning_attempts, _x.request.allowed_planning_time, _x.request.max_velocity_scaling_factor, _x.request.max_acceleration_scaling_factor))
      _x = self.request.cartesian_speed_limited_link
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.request.max_cartesian_speed
      buff.write(_get_struct_d().pack(_x))
      _x = self.planning_options.planning_scene_diff.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.planning_options.planning_scene_diff.robot_state.joint_state.position.tostring())
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.planning_options.planning_scene_diff.robot_state.joint_state.velocity.tostring())
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.planning_options.planning_scene_diff.robot_state.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms:
        _v427 = val1.translation
        _x = _v427
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v428 = val1.rotation
        _x = _v428
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist:
        _v429 = val1.linear
        _x = _v429
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v430 = val1.angular
        _x = _v430
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench:
        _v431 = val1.force
        _x = _v431
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v432 = val1.torque
        _x = _v432
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.planning_options.planning_scene_diff.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v433 = val1.object
        _v434 = _v433.header
        _x = _v434.seq
        buff.write(_get_struct_I().pack(_x))
        _v435 = _v434.stamp
        _x = _v435
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v434.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v436 = _v433.pose
        _v437 = _v436.position
        _x = _v437
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v438 = _v436.orientation
        _x = _v438
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v433.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v439 = _v433.type
        _x = _v439.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v439.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v433.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v433.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v433.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v433.primitive_poses:
          _v440 = val3.position
          _x = _v440
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v441 = val3.orientation
          _x = _v441
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v433.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v433.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v433.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v433.mesh_poses:
          _v442 = val3.position
          _x = _v442
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v443 = val3.orientation
          _x = _v443
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v433.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v433.planes:
          buff.write(val3.coef.tostring())
        length = len(_v433.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v433.plane_poses:
          _v444 = val3.position
          _x = _v444
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v445 = val3.orientation
          _x = _v445
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v433.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v433.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v433.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v433.subframe_poses:
          _v446 = val3.position
          _x = _v446
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v447 = val3.orientation
          _x = _v447
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v433.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v448 = val1.detach_posture
        _v449 = _v448.header
        _x = _v449.seq
        buff.write(_get_struct_I().pack(_x))
        _v450 = _v449.stamp
        _x = _v450
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v449.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v448.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v448.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v448.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v448.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v451 = val3.time_from_start
          _x = _v451
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.planning_options.planning_scene_diff.robot_state.is_diff
      buff.write(_get_struct_B().pack(_x))
      _x = self.planning_options.planning_scene_diff.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.planning_options.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.fixed_frame_transforms:
        _v452 = val1.header
        _x = _v452.seq
        buff.write(_get_struct_I().pack(_x))
        _v453 = _v452.stamp
        _x = _v453
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v452.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v454 = val1.transform
        _v455 = _v454.translation
        _x = _v455
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v456 = _v454.rotation
        _x = _v456
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(val1.enabled.tostring())
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values.tostring())
      length = len(self.planning_options.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.padding
        buff.write(_get_struct_d().pack(_x))
      length = len(self.planning_options.planning_scene_diff.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.scale
        buff.write(_get_struct_d().pack(_x))
      length = len(self.planning_options.planning_scene_diff.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v457 = val1.color
        _x = _v457
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.planning_options.planning_scene_diff.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.world.collision_objects:
        _v458 = val1.header
        _x = _v458.seq
        buff.write(_get_struct_I().pack(_x))
        _v459 = _v458.stamp
        _x = _v459
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v458.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v460 = val1.pose
        _v461 = _v460.position
        _x = _v461
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v462 = _v460.orientation
        _x = _v462
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v463 = val1.type
        _x = _v463.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v463.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          _x = val2.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.dimensions.tostring())
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v464 = val2.position
          _x = _v464
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v465 = val2.orientation
          _x = _v465
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(val3.vertex_indices.tostring())
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v466 = val2.position
          _x = _v466
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v467 = val2.orientation
          _x = _v467
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(val2.coef.tostring())
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v468 = val2.position
          _x = _v468
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v469 = val2.orientation
          _x = _v469
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.subframe_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        length = len(val1.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_poses:
          _v470 = val2.position
          _x = _v470
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v471 = val2.orientation
          _x = _v471
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.operation
        buff.write(_get_struct_b().pack(_x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.planning_options.planning_scene_diff.world.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.planning_options.planning_scene_diff.world.octomap.octomap.binary
      buff.write(_get_struct_B().pack(_x))
      _x = self.planning_options.planning_scene_diff.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.planning_options.planning_scene_diff.world.octomap.octomap.resolution
      buff.write(_get_struct_d().pack(_x))
      length = len(self.planning_options.planning_scene_diff.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.planning_options.planning_scene_diff.world.octomap.octomap.data.tostring())
      _x = self
      buff.write(_get_struct_3BidBid().pack(_x.planning_options.planning_scene_diff.is_diff, _x.planning_options.plan_only, _x.planning_options.look_around, _x.planning_options.look_around_attempts, _x.planning_options.max_safe_execution_cost, _x.planning_options.replan, _x.planning_options.replan_attempts, _x.planning_options.replan_delay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.request is None:
        self.request = moveit_msgs.msg.MotionPlanRequest()
      if self.planning_options is None:
        self.planning_options = moveit_msgs.msg.PlanningOptions()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.request.workspace_parameters.header.seq, _x.request.workspace_parameters.header.stamp.secs, _x.request.workspace_parameters.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.workspace_parameters.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.workspace_parameters.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.request.workspace_parameters.min_corner.x, _x.request.workspace_parameters.min_corner.y, _x.request.workspace_parameters.min_corner.z, _x.request.workspace_parameters.max_corner.x, _x.request.workspace_parameters.max_corner.y, _x.request.workspace_parameters.max_corner.z, _x.request.start_state.joint_state.header.seq, _x.request.start_state.joint_state.header.stamp.secs, _x.request.start_state.joint_state.header.stamp.nsecs,) = _get_struct_6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.start_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.start_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.request.start_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.request.start_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.request.start_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.request.start_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.request.start_state.multi_dof_joint_state.header.seq, _x.request.start_state.multi_dof_joint_state.header.stamp.secs, _x.request.start_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.start_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.start_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.request.start_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v472 = val1.translation
        _x = _v472
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v473 = val1.rotation
        _x = _v473
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.request.start_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v474 = val1.linear
        _x = _v474
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v475 = val1.angular
        _x = _v475
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.request.start_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v476 = val1.force
        _x = _v476
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v477 = val1.torque
        _x = _v477
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.request.start_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v478 = val1.object
        _v479 = _v478.header
        start = end
        end += 4
        (_v479.seq,) = _get_struct_I().unpack(str[start:end])
        _v480 = _v479.stamp
        _x = _v480
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v479.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v479.frame_id = str[start:end]
        _v481 = _v478.pose
        _v482 = _v481.position
        _x = _v482
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v483 = _v481.orientation
        _x = _v483
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v478.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v478.id = str[start:end]
        _v484 = _v478.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v484.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v484.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v484.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v484.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v478.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v478.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v478.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v485 = val3.position
          _x = _v485
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v486 = val3.orientation
          _x = _v486
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v478.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v478.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v478.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v478.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v487 = val3.position
          _x = _v487
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v488 = val3.orientation
          _x = _v488
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v478.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v478.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v478.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v478.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v489 = val3.position
          _x = _v489
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v490 = val3.orientation
          _x = _v490
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v478.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v478.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v478.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v478.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v491 = val3.position
          _x = _v491
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v492 = val3.orientation
          _x = _v492
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v478.subframe_poses.append(val3)
        start = end
        end += 1
        (_v478.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v493 = val1.detach_posture
        _v494 = _v493.header
        start = end
        end += 4
        (_v494.seq,) = _get_struct_I().unpack(str[start:end])
        _v495 = _v494.stamp
        _x = _v495
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v494.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v494.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v493.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v493.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v493.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v496 = val3.time_from_start
          _x = _v496
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v493.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.request.start_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.request.start_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.request.start_state.is_diff = bool(self.request.start_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.goal_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v497 = val2.header
          start = end
          end += 4
          (_v497.seq,) = _get_struct_I().unpack(str[start:end])
          _v498 = _v497.stamp
          _x = _v498
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v497.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v497.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.link_name = str[start:end]
          _v499 = val2.target_point_offset
          _x = _v499
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v500 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v500.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v500.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v500.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v501 = val4.position
            _x = _v501
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v502 = val4.orientation
            _x = _v502
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v500.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v500.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v500.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v500.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v503 = val4.position
            _x = _v503
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v504 = val4.orientation
            _x = _v504
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v500.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v505 = val2.header
          start = end
          end += 4
          (_v505.seq,) = _get_struct_I().unpack(str[start:end])
          _v506 = _v505.stamp
          _x = _v506
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v505.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v505.frame_id = str[start:end]
          _v507 = val2.orientation
          _x = _v507
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 33
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v508 = val2.target_pose
          _v509 = _v508.header
          start = end
          end += 4
          (_v509.seq,) = _get_struct_I().unpack(str[start:end])
          _v510 = _v509.stamp
          _x = _v510
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v509.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v509.frame_id = str[start:end]
          _v511 = _v508.pose
          _v512 = _v511.position
          _x = _v512
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v513 = _v511.orientation
          _x = _v513
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v514 = val2.sensor_pose
          _v515 = _v514.header
          start = end
          end += 4
          (_v515.seq,) = _get_struct_I().unpack(str[start:end])
          _v516 = _v515.stamp
          _x = _v516
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v515.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v515.frame_id = str[start:end]
          _v517 = _v514.pose
          _v518 = _v517.position
          _x = _v518
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v519 = _v517.orientation
          _x = _v519
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.request.goal_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.path_constraints.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.path_constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.request.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v520 = val1.header
        start = end
        end += 4
        (_v520.seq,) = _get_struct_I().unpack(str[start:end])
        _v521 = _v520.stamp
        _x = _v521
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v520.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v520.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v522 = val1.target_point_offset
        _x = _v522
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v523 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v523.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v523.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v523.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v524 = val3.position
          _x = _v524
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v525 = val3.orientation
          _x = _v525
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v523.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v523.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v523.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v523.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v526 = val3.position
          _x = _v526
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v527 = val3.orientation
          _x = _v527
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v523.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.request.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v528 = val1.header
        start = end
        end += 4
        (_v528.seq,) = _get_struct_I().unpack(str[start:end])
        _v529 = _v528.stamp
        _x = _v529
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v528.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v528.frame_id = str[start:end]
        _v530 = val1.orientation
        _x = _v530
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 33
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
        self.request.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _get_struct_d().unpack(str[start:end])
        _v531 = val1.target_pose
        _v532 = _v531.header
        start = end
        end += 4
        (_v532.seq,) = _get_struct_I().unpack(str[start:end])
        _v533 = _v532.stamp
        _x = _v533
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v532.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v532.frame_id = str[start:end]
        _v534 = _v531.pose
        _v535 = _v534.position
        _x = _v535
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v536 = _v534.orientation
        _x = _v536
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _get_struct_i().unpack(str[start:end])
        _v537 = val1.sensor_pose
        _v538 = _v537.header
        start = end
        end += 4
        (_v538.seq,) = _get_struct_I().unpack(str[start:end])
        _v539 = _v538.stamp
        _x = _v539
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v538.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v538.frame_id = str[start:end]
        _v540 = _v537.pose
        _v541 = _v540.position
        _x = _v541
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v542 = _v540.orientation
        _x = _v542
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
        self.request.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.trajectory_constraints.constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v543 = val2.header
          start = end
          end += 4
          (_v543.seq,) = _get_struct_I().unpack(str[start:end])
          _v544 = _v543.stamp
          _x = _v544
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v543.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v543.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.link_name = str[start:end]
          _v545 = val2.target_point_offset
          _x = _v545
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v546 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v546.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v546.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v546.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v547 = val4.position
            _x = _v547
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v548 = val4.orientation
            _x = _v548
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v546.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v546.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v546.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v546.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v549 = val4.position
            _x = _v549
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v550 = val4.orientation
            _x = _v550
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v546.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v551 = val2.header
          start = end
          end += 4
          (_v551.seq,) = _get_struct_I().unpack(str[start:end])
          _v552 = _v551.stamp
          _x = _v552
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v551.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v551.frame_id = str[start:end]
          _v553 = val2.orientation
          _x = _v553
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 33
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v554 = val2.target_pose
          _v555 = _v554.header
          start = end
          end += 4
          (_v555.seq,) = _get_struct_I().unpack(str[start:end])
          _v556 = _v555.stamp
          _x = _v556
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v555.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v555.frame_id = str[start:end]
          _v557 = _v554.pose
          _v558 = _v557.position
          _x = _v558
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v559 = _v557.orientation
          _x = _v559
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v560 = val2.sensor_pose
          _v561 = _v560.header
          start = end
          end += 4
          (_v561.seq,) = _get_struct_I().unpack(str[start:end])
          _v562 = _v561.stamp
          _x = _v562
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v561.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v561.frame_id = str[start:end]
          _v563 = _v560.pose
          _v564 = _v563.position
          _x = _v564
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v565 = _v563.orientation
          _x = _v565
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.request.trajectory_constraints.constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.reference_trajectories = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.GenericTrajectory()
        _v566 = val1.header
        start = end
        end += 4
        (_v566.seq,) = _get_struct_I().unpack(str[start:end])
        _v567 = _v566.stamp
        _x = _v567
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v566.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v566.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_trajectory = []
        for i in range(0, length):
          val2 = trajectory_msgs.msg.JointTrajectory()
          _v568 = val2.header
          start = end
          end += 4
          (_v568.seq,) = _get_struct_I().unpack(str[start:end])
          _v569 = _v568.stamp
          _x = _v569
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v568.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v568.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3 = str[start:end]
            val2.joint_names.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v570 = val3.time_from_start
            _x = _v570
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            val2.points.append(val3)
          val1.joint_trajectory.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.cartesian_trajectory = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.CartesianTrajectory()
          _v571 = val2.header
          start = end
          end += 4
          (_v571.seq,) = _get_struct_I().unpack(str[start:end])
          _v572 = _v571.stamp
          _x = _v572
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v571.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v571.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.tracked_frame = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.tracked_frame = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = moveit_msgs.msg.CartesianTrajectoryPoint()
            _v573 = val3.point
            _v574 = _v573.pose
            _v575 = _v574.position
            _x = _v575
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v576 = _v574.orientation
            _x = _v576
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v577 = _v573.velocity
            _v578 = _v577.linear
            _x = _v578
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v579 = _v577.angular
            _x = _v579
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v580 = _v573.acceleration
            _v581 = _v580.linear
            _x = _v581
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v582 = _v580.angular
            _x = _v582
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v583 = val3.time_from_start
            _x = _v583
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            val2.points.append(val3)
          val1.cartesian_trajectory.append(val2)
        self.request.reference_trajectories.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.pipeline_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.pipeline_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.planner_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.group_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.group_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.request.num_planning_attempts, _x.request.allowed_planning_time, _x.request.max_velocity_scaling_factor, _x.request.max_acceleration_scaling_factor,) = _get_struct_i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.cartesian_speed_limited_link = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.cartesian_speed_limited_link = str[start:end]
      start = end
      end += 8
      (self.request.max_cartesian_speed,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.planning_options.planning_scene_diff.robot_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.planning_options.planning_scene_diff.robot_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.planning_options.planning_scene_diff.robot_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v584 = val1.translation
        _x = _v584
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v585 = val1.rotation
        _x = _v585
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v586 = val1.linear
        _x = _v586
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v587 = val1.angular
        _x = _v587
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v588 = val1.force
        _x = _v588
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v589 = val1.torque
        _x = _v589
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v590 = val1.object
        _v591 = _v590.header
        start = end
        end += 4
        (_v591.seq,) = _get_struct_I().unpack(str[start:end])
        _v592 = _v591.stamp
        _x = _v592
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v591.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v591.frame_id = str[start:end]
        _v593 = _v590.pose
        _v594 = _v593.position
        _x = _v594
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v595 = _v593.orientation
        _x = _v595
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v590.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v590.id = str[start:end]
        _v596 = _v590.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v596.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v596.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v596.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v596.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v590.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v590.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v590.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v597 = val3.position
          _x = _v597
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v598 = val3.orientation
          _x = _v598
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v590.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v590.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v590.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v590.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v599 = val3.position
          _x = _v599
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v600 = val3.orientation
          _x = _v600
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v590.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v590.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v590.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v590.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v601 = val3.position
          _x = _v601
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v602 = val3.orientation
          _x = _v602
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v590.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v590.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v590.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v590.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v603 = val3.position
          _x = _v603
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v604 = val3.orientation
          _x = _v604
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v590.subframe_poses.append(val3)
        start = end
        end += 1
        (_v590.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v605 = val1.detach_posture
        _v606 = _v605.header
        start = end
        end += 4
        (_v606.seq,) = _get_struct_I().unpack(str[start:end])
        _v607 = _v606.stamp
        _x = _v607
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v606.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v606.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v605.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v605.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v605.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v608 = val3.time_from_start
          _x = _v608
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v605.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.planning_options.planning_scene_diff.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.is_diff = bool(self.planning_options.planning_scene_diff.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.robot_model_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v609 = val1.header
        start = end
        end += 4
        (_v609.seq,) = _get_struct_I().unpack(str[start:end])
        _v610 = _v609.stamp
        _x = _v610
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v609.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v609.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.child_frame_id = str[start:end]
        _v611 = val1.transform
        _v612 = _v611.translation
        _x = _v612
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v613 = _v611.rotation
        _x = _v613
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.enabled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        val1.enabled = list(map(bool, val1.enabled))
        self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = list(map(bool, self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v614 = val1.color
        _x = _v614
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.planning_options.planning_scene_diff.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v615 = val1.header
        start = end
        end += 4
        (_v615.seq,) = _get_struct_I().unpack(str[start:end])
        _v616 = _v615.stamp
        _x = _v616
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v615.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v615.frame_id = str[start:end]
        _v617 = val1.pose
        _v618 = _v617.position
        _x = _v618
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v619 = _v617.orientation
        _x = _v619
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v620 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v620.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v620.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v620.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v620.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v621 = val2.position
          _x = _v621
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v622 = val2.orientation
          _x = _v622
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v623 = val2.position
          _x = _v623
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v624 = val2.orientation
          _x = _v624
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v625 = val2.position
          _x = _v625
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v626 = val2.orientation
          _x = _v626
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.subframe_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v627 = val2.position
          _x = _v627
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v628 = val2.orientation
          _x = _v628
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.subframe_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.planning_options.planning_scene_diff.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.planning_options.planning_scene_diff.world.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.planning_options.planning_scene_diff.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.planning_options.planning_scene_diff.world.octomap.octomap.binary = bool(self.planning_options.planning_scene_diff.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.planning_options.planning_scene_diff.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.planning_options.planning_scene_diff.world.octomap.octomap.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      _x = self
      start = end
      end += 28
      (_x.planning_options.planning_scene_diff.is_diff, _x.planning_options.plan_only, _x.planning_options.look_around, _x.planning_options.look_around_attempts, _x.planning_options.max_safe_execution_cost, _x.planning_options.replan, _x.planning_options.replan_attempts, _x.planning_options.replan_delay,) = _get_struct_3BidBid().unpack(str[start:end])
      self.planning_options.planning_scene_diff.is_diff = bool(self.planning_options.planning_scene_diff.is_diff)
      self.planning_options.plan_only = bool(self.planning_options.plan_only)
      self.planning_options.look_around = bool(self.planning_options.look_around)
      self.planning_options.replan = bool(self.planning_options.replan)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2dBd = None
def _get_struct_2dBd():
    global _struct_2dBd
    if _struct_2dBd is None:
        _struct_2dBd = struct.Struct("<2dBd")
    return _struct_2dBd
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3BidBid = None
def _get_struct_3BidBid():
    global _struct_3BidBid
    if _struct_3BidBid is None:
        _struct_3BidBid = struct.Struct("<3BidBid")
    return _struct_3BidBid
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3dBd = None
def _get_struct_3dBd():
    global _struct_3dBd
    if _struct_3dBd is None:
        _struct_3dBd = struct.Struct("<3dBd")
    return _struct_3dBd
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_6d3I = None
def _get_struct_6d3I():
    global _struct_6d3I
    if _struct_6d3I is None:
        _struct_6d3I = struct.Struct("<6d3I")
    return _struct_6d3I
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i3d = None
def _get_struct_i3d():
    global _struct_i3d
    if _struct_i3d is None:
        _struct_i3d = struct.Struct("<i3d")
    return _struct_i3d
