# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveit_msgs/GetPositionIKRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import sensor_msgs.msg
import shape_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class GetPositionIKRequest(genpy.Message):
  _md5sum = "8388b54598336654bca82763f918a740"
  _type = "moveit_msgs/GetPositionIKRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# A service call to carry out an inverse kinematics computation
# The inverse kinematics request
PositionIKRequest ik_request


================================================================================
MSG: moveit_msgs/PositionIKRequest
# A Position IK request message

# The name of the group which will be used to compute IK
# e.g. "right_arm", or "arms" - see IK specification for multiple-groups below
# Information from the SRDF will be used to automatically determine which link
# to solve IK for, unless ik_link_name is also specified
string group_name

# A RobotState consisting of hint/seed positions for the IK computation and positions
# for all the other joints in the robot. Additional state information provided here is
# used to specify starting positions for other joints/links on the robot.
# This state MUST contain state for all joints to be used by the IK solver
# to compute IK. The list of joints that the IK solver deals with can be
# found using the SRDF for the corresponding group
moveit_msgs/RobotState robot_state

# A set of constraints that the IK must obey; by default, this set of constraints is empty
Constraints constraints

# Find an IK solution that avoids collisions. By default, this is false
bool avoid_collisions

# (OPTIONAL) The name of the link for which we are computing IK
# If not specified, the link name will be inferred from a combination
# of the group name and the SRDF. If any values are specified for ik_link_names,
# this value is ignored
string ik_link_name

# The stamped pose of the link, when the IK solver computes the joint values
# for all the joints in a group. This value is ignored if pose_stamped_vector
# has any elements specified.
geometry_msgs/PoseStamped pose_stamped

# Multi-group parameters

# (OPTIONAL) The names of the links for which we are computing IK
# If not specified, the link name will be inferred from a combination
# of the group name and the SRDF
string[] ik_link_names

# (OPTIONAL) The (stamped) poses of the links we are computing IK for (when a group has more than one end effector)
# e.g. The "arms" group might consist of both the "right_arm" and the "left_arm"
# The order of the groups referred to is the same as the order setup in the SRDF
geometry_msgs/PoseStamped[] pose_stamped_vector

# Maximum allowed time for IK calculation
duration timeout

================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# A header, used for interpreting the poses
Header header

# The object's pose relative to the header frame.
# The shapes and subframe poses are defined relative to this pose.
geometry_msgs/Pose pose

# The id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# The collision geometries associated with the object.
# Their poses are with respect to the object's pose

# Solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# Meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Named subframes on the object. Use these to define points of interest on the object that you want
# to plan with (e.g. "tip", "spout", "handle"). The id of the object will be prepended to the subframe.
# If an object with the id "screwdriver" and a subframe "tip" is in the scene, you can use the frame
# "screwdriver/tip" for planning.
# The length of the subframe_names and subframe_poses has to be identical.
string[] subframe_names
geometry_msgs/Pose[] subframe_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the object does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: moveit_msgs/Constraints
# This message contains a list of motion planning constraints.
# All constraints must be satisfied for a goal to be considered valid

string name

JointConstraint[] joint_constraints

PositionConstraint[] position_constraints

OrientationConstraint[] orientation_constraints

VisibilityConstraint[] visibility_constraints

================================================================================
MSG: moveit_msgs/JointConstraint
# Constrain the position of a joint to be within a certain bound
string joint_name

# the bound to be achieved is [position - tolerance_below, position + tolerance_above]
float64 position
float64 tolerance_above
float64 tolerance_below

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/PositionConstraint
# This message contains the definition of a position constraint.

Header header

# The robot link this constraint refers to
string link_name

# The offset (in the link frame) for the target point on the link we are planning for
geometry_msgs/Vector3 target_point_offset

# The volume this constraint refers to
BoundingVolume constraint_region

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/BoundingVolume
# Define a volume in 3D

# A set of solid geometric primitives that make up the volume to define (as a union)
shape_msgs/SolidPrimitive[] primitives

# The poses at which the primitives are located
geometry_msgs/Pose[] primitive_poses

# In addition to primitives, meshes can be specified to add to the bounding volume (again, as union)
shape_msgs/Mesh[] meshes

# The poses at which the meshes are located
geometry_msgs/Pose[] mesh_poses

================================================================================
MSG: moveit_msgs/OrientationConstraint
# This message contains the definition of an orientation constraint.

Header header

# The desired orientation of the robot link specified as a quaternion
geometry_msgs/Quaternion orientation

# The robot link this constraint refers to
string link_name

# Tolerance on the three vector components of the orientation error (optional)
float64 absolute_x_axis_tolerance
float64 absolute_y_axis_tolerance
float64 absolute_z_axis_tolerance

# Defines how the orientation error is calculated
# The error is compared to the tolerance defined above
uint8 parameterization

# The different options for the orientation error parameterization
# - Intrinsic xyz Euler angles (default value)
uint8 XYZ_EULER_ANGLES=0
# - A rotation vector. This is similar to the angle-axis representation,
# but the magnitude of the vector represents the rotation angle.
uint8 ROTATION_VECTOR=1

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/VisibilityConstraint
# The constraint is useful to maintain visibility to a disc (the target) in a particular frame.
# This disc forms the base of a visibiliy cone whose tip is at the origin of the sensor.
# Maintaining visibility is done by ensuring the robot does not obstruct the visibility cone.
# Note:
# This constraint does NOT enforce minimum or maximum distances between the sensor
# and the target, nor does it enforce the target to be in the field of view of
# the sensor. A PositionConstraint can (and probably should) be used for such purposes.

# The radius of the disc that should be maintained visible
float64 target_radius

# The pose of the disc; as the robot moves, the pose of the disc may change as well
# This can be in the frame of a particular robot link, for example
geometry_msgs/PoseStamped target_pose

# From the sensor origin towards the target, the disc forms a visibility cone
# This cone is approximated using many sides. For example, when using 4 sides,
# that in fact makes the visibility region be a pyramid.
# This value should always be 3 or more.
int32 cone_sides

# The pose in which visibility is to be maintained.
# The frame id should represent the robot link to which the sensor is attached.
# It is assumed the sensor can look directly at the target, in any direction.
# This assumption is usually not true, but additional PositionConstraints
# can resolve this issue.
geometry_msgs/PoseStamped sensor_pose

# Even though the disc is maintained visible, the visibility cone can be very small
# because of the orientation of the disc with respect to the sensor. It is possible
# for example to view the disk almost from a side, in which case the visibility cone
# can end up having close to 0 volume. The view angle is defined to be the angle between
# the normal to the visibility disc and the direction vector from the sensor origin.
# The value below represents the minimum desired view angle. For a perfect view,
# this value will be 0 (the two vectors are exact opposites). For a completely obstructed view
# this value will be Pi/2 (the vectors are perpendicular). This value defined below
# is the maximum view angle to be maintained. This should be a value in the open interval
# (0, Pi/2). If 0 is set, the view angle is NOT enforced.
float64 max_view_angle

# This angle is used similarly to max_view_angle but limits the maximum angle
# between the sensor origin direction vector and the axis that connects the
# sensor origin to the target frame origin. The value is again in the range (0, Pi/2)
# and is NOT enforced if set to 0.
float64 max_range_angle

# The axis that is assumed to indicate the direction of view for the sensor
# X = 2, Y = 1, Z = 0
uint8 SENSOR_Z=0
uint8 SENSOR_Y=1
uint8 SENSOR_X=2
uint8 sensor_view_direction

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose
"""
  __slots__ = ['ik_request']
  _slot_types = ['moveit_msgs/PositionIKRequest']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ik_request

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetPositionIKRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ik_request is None:
        self.ik_request = moveit_msgs.msg.PositionIKRequest()
    else:
      self.ik_request = moveit_msgs.msg.PositionIKRequest()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ik_request.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.ik_request.robot_state.joint_state.header.seq, _x.ik_request.robot_state.joint_state.header.stamp.secs, _x.ik_request.robot_state.joint_state.header.stamp.nsecs))
      _x = self.ik_request.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ik_request.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.ik_request.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ik_request.robot_state.joint_state.position))
      length = len(self.ik_request.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ik_request.robot_state.joint_state.velocity))
      length = len(self.ik_request.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ik_request.robot_state.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.ik_request.robot_state.multi_dof_joint_state.header.seq, _x.ik_request.robot_state.multi_dof_joint_state.header.stamp.secs, _x.ik_request.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.ik_request.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.transforms:
        _v1 = val1.translation
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.twist:
        _v3 = val1.linear
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.angular
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.wrench:
        _v5 = val1.force
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.torque
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.ik_request.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v7 = val1.object
        _v8 = _v7.header
        _x = _v8.seq
        buff.write(_get_struct_I().pack(_x))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v10 = _v7.pose
        _v11 = _v10.position
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = _v10.orientation
        _x = _v12
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v7.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v13 = _v7.type
        _x = _v13.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v13.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v7.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v7.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitive_poses:
          _v14 = val3.position
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v15 = val3.orientation
          _x = _v15
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v7.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.mesh_poses:
          _v16 = val3.position
          _x = _v16
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v17 = val3.orientation
          _x = _v17
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v7.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.plane_poses:
          _v18 = val3.position
          _x = _v18
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v19 = val3.orientation
          _x = _v19
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v7.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.subframe_poses:
          _v20 = val3.position
          _x = _v20
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v21 = val3.orientation
          _x = _v21
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v7.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v22 = val1.detach_posture
        _v23 = _v22.header
        _x = _v23.seq
        buff.write(_get_struct_I().pack(_x))
        _v24 = _v23.stamp
        _x = _v24
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v23.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v22.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v22.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v22.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v22.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v25 = val3.time_from_start
          _x = _v25
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.ik_request.robot_state.is_diff
      buff.write(_get_struct_B().pack(_x))
      _x = self.ik_request.constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ik_request.constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.ik_request.constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.constraints.position_constraints:
        _v26 = val1.header
        _x = _v26.seq
        buff.write(_get_struct_I().pack(_x))
        _v27 = _v26.stamp
        _x = _v27
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v26.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v28 = val1.target_point_offset
        _x = _v28
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v29 = val1.constraint_region
        length = len(_v29.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v29.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v29.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v29.primitive_poses:
          _v30 = val3.position
          _x = _v30
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v31 = val3.orientation
          _x = _v31
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v29.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v29.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v29.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v29.mesh_poses:
          _v32 = val3.position
          _x = _v32
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v33 = val3.orientation
          _x = _v33
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      length = len(self.ik_request.constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.constraints.orientation_constraints:
        _v34 = val1.header
        _x = _v34.seq
        buff.write(_get_struct_I().pack(_x))
        _v35 = _v34.stamp
        _x = _v35
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v34.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v36 = val1.orientation
        _x = _v36
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
      length = len(self.ik_request.constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.constraints.visibility_constraints:
        _x = val1.target_radius
        buff.write(_get_struct_d().pack(_x))
        _v37 = val1.target_pose
        _v38 = _v37.header
        _x = _v38.seq
        buff.write(_get_struct_I().pack(_x))
        _v39 = _v38.stamp
        _x = _v39
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v38.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v40 = _v37.pose
        _v41 = _v40.position
        _x = _v41
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v42 = _v40.orientation
        _x = _v42
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.cone_sides
        buff.write(_get_struct_i().pack(_x))
        _v43 = val1.sensor_pose
        _v44 = _v43.header
        _x = _v44.seq
        buff.write(_get_struct_I().pack(_x))
        _v45 = _v44.stamp
        _x = _v45
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v44.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v46 = _v43.pose
        _v47 = _v46.position
        _x = _v47
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v48 = _v46.orientation
        _x = _v48
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.ik_request.avoid_collisions
      buff.write(_get_struct_B().pack(_x))
      _x = self.ik_request.ik_link_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.ik_request.pose_stamped.header.seq, _x.ik_request.pose_stamped.header.stamp.secs, _x.ik_request.pose_stamped.header.stamp.nsecs))
      _x = self.ik_request.pose_stamped.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.ik_request.pose_stamped.pose.position.x, _x.ik_request.pose_stamped.pose.position.y, _x.ik_request.pose_stamped.pose.position.z, _x.ik_request.pose_stamped.pose.orientation.x, _x.ik_request.pose_stamped.pose.orientation.y, _x.ik_request.pose_stamped.pose.orientation.z, _x.ik_request.pose_stamped.pose.orientation.w))
      length = len(self.ik_request.ik_link_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.ik_link_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.ik_request.pose_stamped_vector)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.pose_stamped_vector:
        _v49 = val1.header
        _x = _v49.seq
        buff.write(_get_struct_I().pack(_x))
        _v50 = _v49.stamp
        _x = _v50
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v49.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v51 = val1.pose
        _v52 = _v51.position
        _x = _v52
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v53 = _v51.orientation
        _x = _v53
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_2i().pack(_x.ik_request.timeout.secs, _x.ik_request.timeout.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ik_request is None:
        self.ik_request = moveit_msgs.msg.PositionIKRequest()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.group_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ik_request.group_name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ik_request.robot_state.joint_state.header.seq, _x.ik_request.robot_state.joint_state.header.stamp.secs, _x.ik_request.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ik_request.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.ik_request.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ik_request.robot_state.joint_state.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ik_request.robot_state.joint_state.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ik_request.robot_state.joint_state.effort = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.ik_request.robot_state.multi_dof_joint_state.header.seq, _x.ik_request.robot_state.multi_dof_joint_state.header.stamp.secs, _x.ik_request.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ik_request.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.ik_request.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v54 = val1.translation
        _x = _v54
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v55 = val1.rotation
        _x = _v55
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.ik_request.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v56 = val1.linear
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v57 = val1.angular
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.ik_request.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v58 = val1.force
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v59 = val1.torque
        _x = _v59
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.ik_request.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v60 = val1.object
        _v61 = _v60.header
        start = end
        end += 4
        (_v61.seq,) = _get_struct_I().unpack(str[start:end])
        _v62 = _v61.stamp
        _x = _v62
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v61.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v61.frame_id = str[start:end]
        _v63 = _v60.pose
        _v64 = _v63.position
        _x = _v64
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v65 = _v63.orientation
        _x = _v65
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v60.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v60.id = str[start:end]
        _v66 = _v60.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v66.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v66.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v66.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v66.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v60.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v67 = val3.position
          _x = _v67
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v68 = val3.orientation
          _x = _v68
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v60.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v60.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v69 = val3.position
          _x = _v69
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v70 = val3.orientation
          _x = _v70
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v60.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v60.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v71 = val3.position
          _x = _v71
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v72 = val3.orientation
          _x = _v72
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v60.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v60.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v73 = val3.position
          _x = _v73
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v74 = val3.orientation
          _x = _v74
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v60.subframe_poses.append(val3)
        start = end
        end += 1
        (_v60.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v75 = val1.detach_posture
        _v76 = _v75.header
        start = end
        end += 4
        (_v76.seq,) = _get_struct_I().unpack(str[start:end])
        _v77 = _v76.stamp
        _x = _v77
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v76.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v76.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v75.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v75.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v75.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v78 = val3.time_from_start
          _x = _v78
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v75.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.ik_request.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.ik_request.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.ik_request.robot_state.is_diff = bool(self.ik_request.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.constraints.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ik_request.constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.ik_request.constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v79 = val1.header
        start = end
        end += 4
        (_v79.seq,) = _get_struct_I().unpack(str[start:end])
        _v80 = _v79.stamp
        _x = _v80
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v79.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v79.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v81 = val1.target_point_offset
        _x = _v81
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v82 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v82.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v82.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v82.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v83 = val3.position
          _x = _v83
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v84 = val3.orientation
          _x = _v84
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v82.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v82.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v82.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v82.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v85 = val3.position
          _x = _v85
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v86 = val3.orientation
          _x = _v86
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v82.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.ik_request.constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v87 = val1.header
        start = end
        end += 4
        (_v87.seq,) = _get_struct_I().unpack(str[start:end])
        _v88 = _v87.stamp
        _x = _v88
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v87.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v87.frame_id = str[start:end]
        _v89 = val1.orientation
        _x = _v89
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 33
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
        self.ik_request.constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _get_struct_d().unpack(str[start:end])
        _v90 = val1.target_pose
        _v91 = _v90.header
        start = end
        end += 4
        (_v91.seq,) = _get_struct_I().unpack(str[start:end])
        _v92 = _v91.stamp
        _x = _v92
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v91.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v91.frame_id = str[start:end]
        _v93 = _v90.pose
        _v94 = _v93.position
        _x = _v94
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v95 = _v93.orientation
        _x = _v95
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _get_struct_i().unpack(str[start:end])
        _v96 = val1.sensor_pose
        _v97 = _v96.header
        start = end
        end += 4
        (_v97.seq,) = _get_struct_I().unpack(str[start:end])
        _v98 = _v97.stamp
        _x = _v98
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v97.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v97.frame_id = str[start:end]
        _v99 = _v96.pose
        _v100 = _v99.position
        _x = _v100
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v101 = _v99.orientation
        _x = _v101
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
        self.ik_request.constraints.visibility_constraints.append(val1)
      start = end
      end += 1
      (self.ik_request.avoid_collisions,) = _get_struct_B().unpack(str[start:end])
      self.ik_request.avoid_collisions = bool(self.ik_request.avoid_collisions)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.ik_link_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ik_request.ik_link_name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ik_request.pose_stamped.header.seq, _x.ik_request.pose_stamped.header.stamp.secs, _x.ik_request.pose_stamped.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.pose_stamped.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ik_request.pose_stamped.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.ik_request.pose_stamped.pose.position.x, _x.ik_request.pose_stamped.pose.position.y, _x.ik_request.pose_stamped.pose.position.z, _x.ik_request.pose_stamped.pose.orientation.x, _x.ik_request.pose_stamped.pose.orientation.y, _x.ik_request.pose_stamped.pose.orientation.z, _x.ik_request.pose_stamped.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.ik_link_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.ik_request.ik_link_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.pose_stamped_vector = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseStamped()
        _v102 = val1.header
        start = end
        end += 4
        (_v102.seq,) = _get_struct_I().unpack(str[start:end])
        _v103 = _v102.stamp
        _x = _v103
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v102.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v102.frame_id = str[start:end]
        _v104 = val1.pose
        _v105 = _v104.position
        _x = _v105
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v106 = _v104.orientation
        _x = _v106
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.ik_request.pose_stamped_vector.append(val1)
      _x = self
      start = end
      end += 8
      (_x.ik_request.timeout.secs, _x.ik_request.timeout.nsecs,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ik_request.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.ik_request.robot_state.joint_state.header.seq, _x.ik_request.robot_state.joint_state.header.stamp.secs, _x.ik_request.robot_state.joint_state.header.stamp.nsecs))
      _x = self.ik_request.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ik_request.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.ik_request.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ik_request.robot_state.joint_state.position.tostring())
      length = len(self.ik_request.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ik_request.robot_state.joint_state.velocity.tostring())
      length = len(self.ik_request.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ik_request.robot_state.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.ik_request.robot_state.multi_dof_joint_state.header.seq, _x.ik_request.robot_state.multi_dof_joint_state.header.stamp.secs, _x.ik_request.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.ik_request.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.transforms:
        _v107 = val1.translation
        _x = _v107
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v108 = val1.rotation
        _x = _v108
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.twist:
        _v109 = val1.linear
        _x = _v109
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v110 = val1.angular
        _x = _v110
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.wrench:
        _v111 = val1.force
        _x = _v111
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v112 = val1.torque
        _x = _v112
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.ik_request.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v113 = val1.object
        _v114 = _v113.header
        _x = _v114.seq
        buff.write(_get_struct_I().pack(_x))
        _v115 = _v114.stamp
        _x = _v115
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v114.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v116 = _v113.pose
        _v117 = _v116.position
        _x = _v117
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v118 = _v116.orientation
        _x = _v118
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v113.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v119 = _v113.type
        _x = _v119.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v119.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v113.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v113.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v113.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v113.primitive_poses:
          _v120 = val3.position
          _x = _v120
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v121 = val3.orientation
          _x = _v121
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v113.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v113.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v113.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v113.mesh_poses:
          _v122 = val3.position
          _x = _v122
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v123 = val3.orientation
          _x = _v123
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v113.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v113.planes:
          buff.write(val3.coef.tostring())
        length = len(_v113.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v113.plane_poses:
          _v124 = val3.position
          _x = _v124
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v125 = val3.orientation
          _x = _v125
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v113.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v113.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v113.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v113.subframe_poses:
          _v126 = val3.position
          _x = _v126
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v127 = val3.orientation
          _x = _v127
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v113.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v128 = val1.detach_posture
        _v129 = _v128.header
        _x = _v129.seq
        buff.write(_get_struct_I().pack(_x))
        _v130 = _v129.stamp
        _x = _v130
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v129.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v128.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v128.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v128.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v128.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v131 = val3.time_from_start
          _x = _v131
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.ik_request.robot_state.is_diff
      buff.write(_get_struct_B().pack(_x))
      _x = self.ik_request.constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ik_request.constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.ik_request.constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.constraints.position_constraints:
        _v132 = val1.header
        _x = _v132.seq
        buff.write(_get_struct_I().pack(_x))
        _v133 = _v132.stamp
        _x = _v133
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v132.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v134 = val1.target_point_offset
        _x = _v134
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v135 = val1.constraint_region
        length = len(_v135.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v135.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v135.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v135.primitive_poses:
          _v136 = val3.position
          _x = _v136
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v137 = val3.orientation
          _x = _v137
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v135.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v135.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v135.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v135.mesh_poses:
          _v138 = val3.position
          _x = _v138
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v139 = val3.orientation
          _x = _v139
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      length = len(self.ik_request.constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.constraints.orientation_constraints:
        _v140 = val1.header
        _x = _v140.seq
        buff.write(_get_struct_I().pack(_x))
        _v141 = _v140.stamp
        _x = _v141
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v140.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v142 = val1.orientation
        _x = _v142
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
      length = len(self.ik_request.constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.constraints.visibility_constraints:
        _x = val1.target_radius
        buff.write(_get_struct_d().pack(_x))
        _v143 = val1.target_pose
        _v144 = _v143.header
        _x = _v144.seq
        buff.write(_get_struct_I().pack(_x))
        _v145 = _v144.stamp
        _x = _v145
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v144.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v146 = _v143.pose
        _v147 = _v146.position
        _x = _v147
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v148 = _v146.orientation
        _x = _v148
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.cone_sides
        buff.write(_get_struct_i().pack(_x))
        _v149 = val1.sensor_pose
        _v150 = _v149.header
        _x = _v150.seq
        buff.write(_get_struct_I().pack(_x))
        _v151 = _v150.stamp
        _x = _v151
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v150.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v152 = _v149.pose
        _v153 = _v152.position
        _x = _v153
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v154 = _v152.orientation
        _x = _v154
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.ik_request.avoid_collisions
      buff.write(_get_struct_B().pack(_x))
      _x = self.ik_request.ik_link_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.ik_request.pose_stamped.header.seq, _x.ik_request.pose_stamped.header.stamp.secs, _x.ik_request.pose_stamped.header.stamp.nsecs))
      _x = self.ik_request.pose_stamped.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.ik_request.pose_stamped.pose.position.x, _x.ik_request.pose_stamped.pose.position.y, _x.ik_request.pose_stamped.pose.position.z, _x.ik_request.pose_stamped.pose.orientation.x, _x.ik_request.pose_stamped.pose.orientation.y, _x.ik_request.pose_stamped.pose.orientation.z, _x.ik_request.pose_stamped.pose.orientation.w))
      length = len(self.ik_request.ik_link_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.ik_link_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.ik_request.pose_stamped_vector)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.pose_stamped_vector:
        _v155 = val1.header
        _x = _v155.seq
        buff.write(_get_struct_I().pack(_x))
        _v156 = _v155.stamp
        _x = _v156
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v155.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v157 = val1.pose
        _v158 = _v157.position
        _x = _v158
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v159 = _v157.orientation
        _x = _v159
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_2i().pack(_x.ik_request.timeout.secs, _x.ik_request.timeout.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ik_request is None:
        self.ik_request = moveit_msgs.msg.PositionIKRequest()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.group_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ik_request.group_name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ik_request.robot_state.joint_state.header.seq, _x.ik_request.robot_state.joint_state.header.stamp.secs, _x.ik_request.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ik_request.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.ik_request.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ik_request.robot_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ik_request.robot_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ik_request.robot_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.ik_request.robot_state.multi_dof_joint_state.header.seq, _x.ik_request.robot_state.multi_dof_joint_state.header.stamp.secs, _x.ik_request.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ik_request.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.ik_request.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v160 = val1.translation
        _x = _v160
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v161 = val1.rotation
        _x = _v161
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.ik_request.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v162 = val1.linear
        _x = _v162
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v163 = val1.angular
        _x = _v163
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.ik_request.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v164 = val1.force
        _x = _v164
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v165 = val1.torque
        _x = _v165
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.ik_request.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v166 = val1.object
        _v167 = _v166.header
        start = end
        end += 4
        (_v167.seq,) = _get_struct_I().unpack(str[start:end])
        _v168 = _v167.stamp
        _x = _v168
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v167.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v167.frame_id = str[start:end]
        _v169 = _v166.pose
        _v170 = _v169.position
        _x = _v170
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v171 = _v169.orientation
        _x = _v171
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v166.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v166.id = str[start:end]
        _v172 = _v166.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v172.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v172.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v172.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v172.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v166.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v166.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v166.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v173 = val3.position
          _x = _v173
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v174 = val3.orientation
          _x = _v174
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v166.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v166.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v166.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v166.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v175 = val3.position
          _x = _v175
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v176 = val3.orientation
          _x = _v176
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v166.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v166.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v166.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v166.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v177 = val3.position
          _x = _v177
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v178 = val3.orientation
          _x = _v178
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v166.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v166.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v166.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v166.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v179 = val3.position
          _x = _v179
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v180 = val3.orientation
          _x = _v180
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v166.subframe_poses.append(val3)
        start = end
        end += 1
        (_v166.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v181 = val1.detach_posture
        _v182 = _v181.header
        start = end
        end += 4
        (_v182.seq,) = _get_struct_I().unpack(str[start:end])
        _v183 = _v182.stamp
        _x = _v183
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v182.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v182.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v181.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v181.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v181.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v184 = val3.time_from_start
          _x = _v184
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v181.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.ik_request.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.ik_request.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.ik_request.robot_state.is_diff = bool(self.ik_request.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.constraints.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ik_request.constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.ik_request.constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v185 = val1.header
        start = end
        end += 4
        (_v185.seq,) = _get_struct_I().unpack(str[start:end])
        _v186 = _v185.stamp
        _x = _v186
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v185.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v185.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v187 = val1.target_point_offset
        _x = _v187
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v188 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v188.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v188.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v188.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v189 = val3.position
          _x = _v189
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v190 = val3.orientation
          _x = _v190
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v188.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v188.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v188.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v188.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v191 = val3.position
          _x = _v191
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v192 = val3.orientation
          _x = _v192
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v188.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.ik_request.constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v193 = val1.header
        start = end
        end += 4
        (_v193.seq,) = _get_struct_I().unpack(str[start:end])
        _v194 = _v193.stamp
        _x = _v194
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v193.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v193.frame_id = str[start:end]
        _v195 = val1.orientation
        _x = _v195
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 33
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
        self.ik_request.constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _get_struct_d().unpack(str[start:end])
        _v196 = val1.target_pose
        _v197 = _v196.header
        start = end
        end += 4
        (_v197.seq,) = _get_struct_I().unpack(str[start:end])
        _v198 = _v197.stamp
        _x = _v198
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v197.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v197.frame_id = str[start:end]
        _v199 = _v196.pose
        _v200 = _v199.position
        _x = _v200
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v201 = _v199.orientation
        _x = _v201
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _get_struct_i().unpack(str[start:end])
        _v202 = val1.sensor_pose
        _v203 = _v202.header
        start = end
        end += 4
        (_v203.seq,) = _get_struct_I().unpack(str[start:end])
        _v204 = _v203.stamp
        _x = _v204
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v203.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v203.frame_id = str[start:end]
        _v205 = _v202.pose
        _v206 = _v205.position
        _x = _v206
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v207 = _v205.orientation
        _x = _v207
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
        self.ik_request.constraints.visibility_constraints.append(val1)
      start = end
      end += 1
      (self.ik_request.avoid_collisions,) = _get_struct_B().unpack(str[start:end])
      self.ik_request.avoid_collisions = bool(self.ik_request.avoid_collisions)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.ik_link_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ik_request.ik_link_name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ik_request.pose_stamped.header.seq, _x.ik_request.pose_stamped.header.stamp.secs, _x.ik_request.pose_stamped.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.pose_stamped.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ik_request.pose_stamped.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.ik_request.pose_stamped.pose.position.x, _x.ik_request.pose_stamped.pose.position.y, _x.ik_request.pose_stamped.pose.position.z, _x.ik_request.pose_stamped.pose.orientation.x, _x.ik_request.pose_stamped.pose.orientation.y, _x.ik_request.pose_stamped.pose.orientation.z, _x.ik_request.pose_stamped.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.ik_link_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.ik_request.ik_link_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.pose_stamped_vector = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseStamped()
        _v208 = val1.header
        start = end
        end += 4
        (_v208.seq,) = _get_struct_I().unpack(str[start:end])
        _v209 = _v208.stamp
        _x = _v209
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v208.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v208.frame_id = str[start:end]
        _v210 = val1.pose
        _v211 = _v210.position
        _x = _v211
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v212 = _v210.orientation
        _x = _v212
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.ik_request.pose_stamped_vector.append(val1)
      _x = self
      start = end
      end += 8
      (_x.ik_request.timeout.secs, _x.ik_request.timeout.nsecs,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2dBd = None
def _get_struct_2dBd():
    global _struct_2dBd
    if _struct_2dBd is None:
        _struct_2dBd = struct.Struct("<2dBd")
    return _struct_2dBd
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3dBd = None
def _get_struct_3dBd():
    global _struct_3dBd
    if _struct_3dBd is None:
        _struct_3dBd = struct.Struct("<3dBd")
    return _struct_3dBd
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveit_msgs/GetPositionIKResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import sensor_msgs.msg
import shape_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class GetPositionIKResponse(genpy.Message):
  _md5sum = "e86518bd3328ca4065f167ad5ce72802"
  _type = "moveit_msgs/GetPositionIKResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
# The returned solution
# (in the same order as the list of joints specified in the IKRequest message)
RobotState solution

MoveItErrorCodes error_code


================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# A header, used for interpreting the poses
Header header

# The object's pose relative to the header frame.
# The shapes and subframe poses are defined relative to this pose.
geometry_msgs/Pose pose

# The id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# The collision geometries associated with the object.
# Their poses are with respect to the object's pose

# Solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# Meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Named subframes on the object. Use these to define points of interest on the object that you want
# to plan with (e.g. "tip", "spout", "handle"). The id of the object will be prepended to the subframe.
# If an object with the id "screwdriver" and a subframe "tip" is in the scene, you can use the frame
# "screwdriver/tip" for planning.
# The length of the subframe_names and subframe_poses has to be identical.
string[] subframe_names
geometry_msgs/Pose[] subframe_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the object does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: moveit_msgs/MoveItErrorCodes
int32 val

# overall behavior
int32 SUCCESS=1
int32 FAILURE=99999

int32 PLANNING_FAILED=-1
int32 INVALID_MOTION_PLAN=-2
int32 MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE=-3
int32 CONTROL_FAILED=-4
int32 UNABLE_TO_AQUIRE_SENSOR_DATA=-5
int32 TIMED_OUT=-6
int32 PREEMPTED=-7

# planning & kinematics request errors
int32 START_STATE_IN_COLLISION=-10
int32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-11
int32 START_STATE_INVALID=-26

int32 GOAL_IN_COLLISION=-12
int32 GOAL_VIOLATES_PATH_CONSTRAINTS=-13
int32 GOAL_CONSTRAINTS_VIOLATED=-14
int32 GOAL_STATE_INVALID=-27
int32 UNRECOGNIZED_GOAL_TYPE=-28

int32 INVALID_GROUP_NAME=-15
int32 INVALID_GOAL_CONSTRAINTS=-16
int32 INVALID_ROBOT_STATE=-17
int32 INVALID_LINK_NAME=-18
int32 INVALID_OBJECT_NAME=-19

# system errors
int32 FRAME_TRANSFORM_FAILURE=-21
int32 COLLISION_CHECKING_UNAVAILABLE=-22
int32 ROBOT_STATE_STALE=-23
int32 SENSOR_INFO_STALE=-24
int32 COMMUNICATION_FAILURE=-25
int32 CRASH=-29
int32 ABORT=-30

# kinematics errors
int32 NO_IK_SOLUTION=-31
"""
  __slots__ = ['solution','error_code']
  _slot_types = ['moveit_msgs/RobotState','moveit_msgs/MoveItErrorCodes']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       solution,error_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetPositionIKResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.solution is None:
        self.solution = moveit_msgs.msg.RobotState()
      if self.error_code is None:
        self.error_code = moveit_msgs.msg.MoveItErrorCodes()
    else:
      self.solution = moveit_msgs.msg.RobotState()
      self.error_code = moveit_msgs.msg.MoveItErrorCodes()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.solution.joint_state.header.seq, _x.solution.joint_state.header.stamp.secs, _x.solution.joint_state.header.stamp.nsecs))
      _x = self.solution.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.solution.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.solution.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.solution.joint_state.position))
      length = len(self.solution.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.solution.joint_state.velocity))
      length = len(self.solution.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.solution.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.solution.multi_dof_joint_state.header.seq, _x.solution.multi_dof_joint_state.header.stamp.secs, _x.solution.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.solution.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.solution.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.solution.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.transforms:
        _v213 = val1.translation
        _x = _v213
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v214 = val1.rotation
        _x = _v214
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.solution.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.twist:
        _v215 = val1.linear
        _x = _v215
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v216 = val1.angular
        _x = _v216
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.solution.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.wrench:
        _v217 = val1.force
        _x = _v217
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v218 = val1.torque
        _x = _v218
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.solution.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v219 = val1.object
        _v220 = _v219.header
        _x = _v220.seq
        buff.write(_get_struct_I().pack(_x))
        _v221 = _v220.stamp
        _x = _v221
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v220.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v222 = _v219.pose
        _v223 = _v222.position
        _x = _v223
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v224 = _v222.orientation
        _x = _v224
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v219.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v225 = _v219.type
        _x = _v225.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v225.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v219.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v219.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v219.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v219.primitive_poses:
          _v226 = val3.position
          _x = _v226
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v227 = val3.orientation
          _x = _v227
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v219.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v219.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v219.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v219.mesh_poses:
          _v228 = val3.position
          _x = _v228
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v229 = val3.orientation
          _x = _v229
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v219.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v219.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v219.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v219.plane_poses:
          _v230 = val3.position
          _x = _v230
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v231 = val3.orientation
          _x = _v231
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v219.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v219.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v219.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v219.subframe_poses:
          _v232 = val3.position
          _x = _v232
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v233 = val3.orientation
          _x = _v233
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v219.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v234 = val1.detach_posture
        _v235 = _v234.header
        _x = _v235.seq
        buff.write(_get_struct_I().pack(_x))
        _v236 = _v235.stamp
        _x = _v236
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v235.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v234.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v234.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v234.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v234.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v237 = val3.time_from_start
          _x = _v237
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.solution.is_diff, _x.error_code.val))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.solution is None:
        self.solution = moveit_msgs.msg.RobotState()
      if self.error_code is None:
        self.error_code = moveit_msgs.msg.MoveItErrorCodes()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.solution.joint_state.header.seq, _x.solution.joint_state.header.stamp.secs, _x.solution.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.solution.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.joint_state.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.joint_state.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.joint_state.effort = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.solution.multi_dof_joint_state.header.seq, _x.solution.multi_dof_joint_state.header.stamp.secs, _x.solution.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.solution.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v238 = val1.translation
        _x = _v238
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v239 = val1.rotation
        _x = _v239
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.solution.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v240 = val1.linear
        _x = _v240
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v241 = val1.angular
        _x = _v241
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.solution.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v242 = val1.force
        _x = _v242
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v243 = val1.torque
        _x = _v243
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.solution.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v244 = val1.object
        _v245 = _v244.header
        start = end
        end += 4
        (_v245.seq,) = _get_struct_I().unpack(str[start:end])
        _v246 = _v245.stamp
        _x = _v246
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v245.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v245.frame_id = str[start:end]
        _v247 = _v244.pose
        _v248 = _v247.position
        _x = _v248
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v249 = _v247.orientation
        _x = _v249
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v244.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v244.id = str[start:end]
        _v250 = _v244.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v250.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v250.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v250.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v250.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v244.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v244.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v244.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v251 = val3.position
          _x = _v251
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v252 = val3.orientation
          _x = _v252
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v244.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v244.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v244.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v244.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v253 = val3.position
          _x = _v253
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v254 = val3.orientation
          _x = _v254
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v244.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v244.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v244.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v244.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v255 = val3.position
          _x = _v255
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v256 = val3.orientation
          _x = _v256
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v244.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v244.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v244.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v244.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v257 = val3.position
          _x = _v257
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v258 = val3.orientation
          _x = _v258
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v244.subframe_poses.append(val3)
        start = end
        end += 1
        (_v244.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v259 = val1.detach_posture
        _v260 = _v259.header
        start = end
        end += 4
        (_v260.seq,) = _get_struct_I().unpack(str[start:end])
        _v261 = _v260.stamp
        _x = _v261
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v260.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v260.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v259.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v259.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v259.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v262 = val3.time_from_start
          _x = _v262
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v259.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.solution.attached_collision_objects.append(val1)
      _x = self
      start = end
      end += 5
      (_x.solution.is_diff, _x.error_code.val,) = _get_struct_Bi().unpack(str[start:end])
      self.solution.is_diff = bool(self.solution.is_diff)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.solution.joint_state.header.seq, _x.solution.joint_state.header.stamp.secs, _x.solution.joint_state.header.stamp.nsecs))
      _x = self.solution.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.solution.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.solution.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.solution.joint_state.position.tostring())
      length = len(self.solution.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.solution.joint_state.velocity.tostring())
      length = len(self.solution.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.solution.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.solution.multi_dof_joint_state.header.seq, _x.solution.multi_dof_joint_state.header.stamp.secs, _x.solution.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.solution.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.solution.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.solution.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.transforms:
        _v263 = val1.translation
        _x = _v263
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v264 = val1.rotation
        _x = _v264
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.solution.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.twist:
        _v265 = val1.linear
        _x = _v265
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v266 = val1.angular
        _x = _v266
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.solution.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.wrench:
        _v267 = val1.force
        _x = _v267
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v268 = val1.torque
        _x = _v268
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.solution.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v269 = val1.object
        _v270 = _v269.header
        _x = _v270.seq
        buff.write(_get_struct_I().pack(_x))
        _v271 = _v270.stamp
        _x = _v271
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v270.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v272 = _v269.pose
        _v273 = _v272.position
        _x = _v273
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v274 = _v272.orientation
        _x = _v274
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v269.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v275 = _v269.type
        _x = _v275.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v275.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v269.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v269.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v269.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v269.primitive_poses:
          _v276 = val3.position
          _x = _v276
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v277 = val3.orientation
          _x = _v277
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v269.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v269.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v269.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v269.mesh_poses:
          _v278 = val3.position
          _x = _v278
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v279 = val3.orientation
          _x = _v279
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v269.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v269.planes:
          buff.write(val3.coef.tostring())
        length = len(_v269.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v269.plane_poses:
          _v280 = val3.position
          _x = _v280
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v281 = val3.orientation
          _x = _v281
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v269.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v269.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v269.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v269.subframe_poses:
          _v282 = val3.position
          _x = _v282
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v283 = val3.orientation
          _x = _v283
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v269.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v284 = val1.detach_posture
        _v285 = _v284.header
        _x = _v285.seq
        buff.write(_get_struct_I().pack(_x))
        _v286 = _v285.stamp
        _x = _v286
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v285.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v284.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v284.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v284.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v284.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v287 = val3.time_from_start
          _x = _v287
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.solution.is_diff, _x.error_code.val))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.solution is None:
        self.solution = moveit_msgs.msg.RobotState()
      if self.error_code is None:
        self.error_code = moveit_msgs.msg.MoveItErrorCodes()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.solution.joint_state.header.seq, _x.solution.joint_state.header.stamp.secs, _x.solution.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.solution.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.solution.multi_dof_joint_state.header.seq, _x.solution.multi_dof_joint_state.header.stamp.secs, _x.solution.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.solution.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v288 = val1.translation
        _x = _v288
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v289 = val1.rotation
        _x = _v289
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.solution.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v290 = val1.linear
        _x = _v290
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v291 = val1.angular
        _x = _v291
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.solution.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v292 = val1.force
        _x = _v292
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v293 = val1.torque
        _x = _v293
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.solution.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v294 = val1.object
        _v295 = _v294.header
        start = end
        end += 4
        (_v295.seq,) = _get_struct_I().unpack(str[start:end])
        _v296 = _v295.stamp
        _x = _v296
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v295.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v295.frame_id = str[start:end]
        _v297 = _v294.pose
        _v298 = _v297.position
        _x = _v298
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v299 = _v297.orientation
        _x = _v299
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v294.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v294.id = str[start:end]
        _v300 = _v294.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v300.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v300.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v300.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v300.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v294.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v294.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v294.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v301 = val3.position
          _x = _v301
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v302 = val3.orientation
          _x = _v302
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v294.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v294.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v294.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v294.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v303 = val3.position
          _x = _v303
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v304 = val3.orientation
          _x = _v304
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v294.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v294.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v294.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v294.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v305 = val3.position
          _x = _v305
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v306 = val3.orientation
          _x = _v306
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v294.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v294.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v294.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v294.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v307 = val3.position
          _x = _v307
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v308 = val3.orientation
          _x = _v308
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v294.subframe_poses.append(val3)
        start = end
        end += 1
        (_v294.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v309 = val1.detach_posture
        _v310 = _v309.header
        start = end
        end += 4
        (_v310.seq,) = _get_struct_I().unpack(str[start:end])
        _v311 = _v310.stamp
        _x = _v311
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v310.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v310.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v309.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v309.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v309.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v312 = val3.time_from_start
          _x = _v312
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v309.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.solution.attached_collision_objects.append(val1)
      _x = self
      start = end
      end += 5
      (_x.solution.is_diff, _x.error_code.val,) = _get_struct_Bi().unpack(str[start:end])
      self.solution.is_diff = bool(self.solution.is_diff)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
class GetPositionIK(object):
  _type          = 'moveit_msgs/GetPositionIK'
  _md5sum = 'efb729a4de517c3ff2c8a1e540017b30'
  _request_class  = GetPositionIKRequest
  _response_class = GetPositionIKResponse
