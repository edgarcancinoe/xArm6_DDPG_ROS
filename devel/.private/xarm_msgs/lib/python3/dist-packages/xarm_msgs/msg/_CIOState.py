# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xarm_msgs/CIOState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class CIOState(genpy.Message):
  _md5sum = "2a51ddec3163bc4c38eaa278474b2dc1"
  _type = "xarm_msgs/CIOState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

# contorller gpio module state
int16 state

# controller gpio module error code
int16 code

# input_digitals[0]: digital input functional gpio state
# input_digitals[1]: digital input configuring gpio state
#    CI0: (input_digitals[1] >> 0) & 0x0001
#    CI1: (input_digitals[1] >> 1) & 0x0001
#    CI7: (input_digitals[1] >> 7) & 0x0001
#    DI0: (input_digitals[1] >> 8) & 0x0001
#    DI1: (input_digitals[1] >> 9) & 0x0001
#    DI7: (input_digitals[1] >> 15) & 0x0001
uint16[2] input_digitals

# output_digitals[0]: digital output functional gpio state
# output_digitals[1]: digital output configuring gpio state
#    CO0: (output_digitals[1] >> 0) & 0x0001
#    CO1: (output_digitals[1] >> 1) & 0x0001
#    CO7: (output_digitals[1] >> 7) & 0x0001
#    DO0: (output_digitals[1] >> 8) & 0x0001
#    DO1: (output_digitals[1] >> 9) & 0x0001
#    DO7: (output_digitals[1] >> 15) & 0x0001
uint16[2] output_digitals

# input_analogs[0]: the value of AI0
# input_analogs[1]: the value of AI1
float32[2] input_analogs

# output_analogs[0]: the value of AO0
# output_analogs[1]: the value of AO1
float32[2] output_analogs

# digital input functional info
uint8[16] input_conf

# digital output functional info
uint8[16] output_conf
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','state','code','input_digitals','output_digitals','input_analogs','output_analogs','input_conf','output_conf']
  _slot_types = ['std_msgs/Header','int16','int16','uint16[2]','uint16[2]','float32[2]','float32[2]','uint8[16]','uint8[16]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,state,code,input_digitals,output_digitals,input_analogs,output_analogs,input_conf,output_conf

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CIOState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.state is None:
        self.state = 0
      if self.code is None:
        self.code = 0
      if self.input_digitals is None:
        self.input_digitals = [0] * 2
      if self.output_digitals is None:
        self.output_digitals = [0] * 2
      if self.input_analogs is None:
        self.input_analogs = [0.] * 2
      if self.output_analogs is None:
        self.output_analogs = [0.] * 2
      if self.input_conf is None:
        self.input_conf = b'\0'*16
      if self.output_conf is None:
        self.output_conf = b'\0'*16
    else:
      self.header = std_msgs.msg.Header()
      self.state = 0
      self.code = 0
      self.input_digitals = [0] * 2
      self.output_digitals = [0] * 2
      self.input_analogs = [0.] * 2
      self.output_analogs = [0.] * 2
      self.input_conf = b'\0'*16
      self.output_conf = b'\0'*16

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2h().pack(_x.state, _x.code))
      buff.write(_get_struct_2H().pack(*self.input_digitals))
      buff.write(_get_struct_2H().pack(*self.output_digitals))
      buff.write(_get_struct_2f().pack(*self.input_analogs))
      buff.write(_get_struct_2f().pack(*self.output_analogs))
      _x = self.input_conf
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.output_conf
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.state, _x.code,) = _get_struct_2h().unpack(str[start:end])
      start = end
      end += 4
      self.input_digitals = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      self.output_digitals = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 8
      self.input_analogs = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 8
      self.output_analogs = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 16
      self.input_conf = str[start:end]
      start = end
      end += 16
      self.output_conf = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2h().pack(_x.state, _x.code))
      buff.write(self.input_digitals.tostring())
      buff.write(self.output_digitals.tostring())
      buff.write(self.input_analogs.tostring())
      buff.write(self.output_analogs.tostring())
      _x = self.input_conf
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
      _x = self.output_conf
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_16B().pack(*_x))
      else:
        buff.write(_get_struct_16s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.state, _x.code,) = _get_struct_2h().unpack(str[start:end])
      start = end
      end += 4
      self.input_digitals = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      self.output_digitals = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 8
      self.input_analogs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 8
      self.output_analogs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 16
      self.input_conf = str[start:end]
      start = end
      end += 16
      self.output_conf = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
