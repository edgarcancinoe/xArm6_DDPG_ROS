# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xarm_msgs/MoveAxisAngleRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveAxisAngleRequest(genpy.Message):
  _md5sum = "5f222fa2eeda5e2b5482505e275dcd88"
  _type = "xarm_msgs/MoveAxisAngleRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# request: command specification for axis-angle motion executions.
# Units:
#	Linear: mm, mm/s, and mm/s^2.
#   Angular: radian, radian/s and radian/s^2.
#	time: sec

# pose: target coordinate. 
#	For Cartesian target: pose dimention is 6 for (x, y, z, rx, ry, rz)

float32[] pose

# mvvelo: specified maximum velocity during execution. linear or angular velocity 

float32 mvvelo

# mvacc: specified maximum acceleration during execution. linear or angular acceleration.

float32 mvacc

# mvtime: currently do not have any special meaning, please just give it 0. 

float32 mvtime

# coord: motion coordinate system indicator, base (0) or tool(1) coordinate.

int16 coord

# relative: indicator of given target is relative (1) or not (0, absolute)

int16 relative

"""
  __slots__ = ['pose','mvvelo','mvacc','mvtime','coord','relative']
  _slot_types = ['float32[]','float32','float32','float32','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pose,mvvelo,mvacc,mvtime,coord,relative

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveAxisAngleRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pose is None:
        self.pose = []
      if self.mvvelo is None:
        self.mvvelo = 0.
      if self.mvacc is None:
        self.mvacc = 0.
      if self.mvtime is None:
        self.mvtime = 0.
      if self.coord is None:
        self.coord = 0
      if self.relative is None:
        self.relative = 0
    else:
      self.pose = []
      self.mvvelo = 0.
      self.mvacc = 0.
      self.mvtime = 0.
      self.coord = 0
      self.relative = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.pose)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.pose))
      _x = self
      buff.write(_get_struct_3f2h().pack(_x.mvvelo, _x.mvacc, _x.mvtime, _x.coord, _x.relative))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pose = s.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.mvvelo, _x.mvacc, _x.mvtime, _x.coord, _x.relative,) = _get_struct_3f2h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.pose)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.pose.tostring())
      _x = self
      buff.write(_get_struct_3f2h().pack(_x.mvvelo, _x.mvacc, _x.mvtime, _x.coord, _x.relative))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pose = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 16
      (_x.mvvelo, _x.mvacc, _x.mvtime, _x.coord, _x.relative,) = _get_struct_3f2h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f2h = None
def _get_struct_3f2h():
    global _struct_3f2h
    if _struct_3f2h is None:
        _struct_3f2h = struct.Struct("<3f2h")
    return _struct_3f2h
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xarm_msgs/MoveAxisAngleResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveAxisAngleResponse(genpy.Message):
  _md5sum = "76c68a2c5e109f4d6a4dc1cfc355f405"
  _type = "xarm_msgs/MoveAxisAngleResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
# response: 
#	ret is 0 for successful execution and others for errors or warnings occured
#	message is a string returned by function, indicating execution status.

int16 ret

string message
"""
  __slots__ = ['ret','message']
  _slot_types = ['int16','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ret,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveAxisAngleResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ret is None:
        self.ret = 0
      if self.message is None:
        self.message = ''
    else:
      self.ret = 0
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ret
      buff.write(_get_struct_h().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 2
      (self.ret,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ret
      buff.write(_get_struct_h().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 2
      (self.ret,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
class MoveAxisAngle(object):
  _type          = 'xarm_msgs/MoveAxisAngle'
  _md5sum = 'e3ce015929065df69fd9351b8d2c8407'
  _request_class  = MoveAxisAngleRequest
  _response_class = MoveAxisAngleResponse
