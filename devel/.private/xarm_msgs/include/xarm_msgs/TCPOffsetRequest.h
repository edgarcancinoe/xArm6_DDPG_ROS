// Generated by gencpp from file xarm_msgs/TCPOffsetRequest.msg
// DO NOT EDIT!


#ifndef XARM_MSGS_MESSAGE_TCPOFFSETREQUEST_H
#define XARM_MSGS_MESSAGE_TCPOFFSETREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xarm_msgs
{
template <class ContainerAllocator>
struct TCPOffsetRequest_
{
  typedef TCPOffsetRequest_<ContainerAllocator> Type;

  TCPOffsetRequest_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
    }
  TCPOffsetRequest_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TCPOffsetRequest_

typedef ::xarm_msgs::TCPOffsetRequest_<std::allocator<void> > TCPOffsetRequest;

typedef boost::shared_ptr< ::xarm_msgs::TCPOffsetRequest > TCPOffsetRequestPtr;
typedef boost::shared_ptr< ::xarm_msgs::TCPOffsetRequest const> TCPOffsetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator1> & lhs, const ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator1> & lhs, const ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d5697f0c9e8859325238b57521f8f4e";
  }

  static const char* value(const ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d5697f0c9e88593ULL;
  static const uint64_t static_value2 = 0x25238b57521f8f4eULL;
};

template<class ContainerAllocator>
struct DataType< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xarm_msgs/TCPOffsetRequest";
  }

  static const char* value(const ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# to give robot floating point number Cartesian TCP offset, based on initial Tool Frame located at flange center.\n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"\n"
;
  }

  static const char* value(const ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TCPOffsetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xarm_msgs::TCPOffsetRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XARM_MSGS_MESSAGE_TCPOFFSETREQUEST_H
