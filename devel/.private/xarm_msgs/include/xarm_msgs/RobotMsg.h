// Generated by gencpp from file xarm_msgs/RobotMsg.msg
// DO NOT EDIT!


#ifndef XARM_MSGS_MESSAGE_ROBOTMSG_H
#define XARM_MSGS_MESSAGE_ROBOTMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace xarm_msgs
{
template <class ContainerAllocator>
struct RobotMsg_
{
  typedef RobotMsg_<ContainerAllocator> Type;

  RobotMsg_()
    : header()
    , state(0)
    , mode(0)
    , cmdnum(0)
    , mt_brake(0)
    , mt_able(0)
    , err(0)
    , warn(0)
    , angle()
    , pose()
    , offset()  {
      pose.assign(0.0);

      offset.assign(0.0);
  }
  RobotMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(0)
    , mode(0)
    , cmdnum(0)
    , mt_brake(0)
    , mt_able(0)
    , err(0)
    , warn(0)
    , angle(_alloc)
    , pose()
    , offset()  {
  (void)_alloc;
      pose.assign(0.0);

      offset.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _state_type;
  _state_type state;

   typedef int16_t _mode_type;
  _mode_type mode;

   typedef int16_t _cmdnum_type;
  _cmdnum_type cmdnum;

   typedef int16_t _mt_brake_type;
  _mt_brake_type mt_brake;

   typedef int16_t _mt_able_type;
  _mt_able_type mt_able;

   typedef int16_t _err_type;
  _err_type err;

   typedef int16_t _warn_type;
  _warn_type warn;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _angle_type;
  _angle_type angle;

   typedef boost::array<float, 6>  _pose_type;
  _pose_type pose;

   typedef boost::array<float, 6>  _offset_type;
  _offset_type offset;





  typedef boost::shared_ptr< ::xarm_msgs::RobotMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xarm_msgs::RobotMsg_<ContainerAllocator> const> ConstPtr;

}; // struct RobotMsg_

typedef ::xarm_msgs::RobotMsg_<std::allocator<void> > RobotMsg;

typedef boost::shared_ptr< ::xarm_msgs::RobotMsg > RobotMsgPtr;
typedef boost::shared_ptr< ::xarm_msgs::RobotMsg const> RobotMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xarm_msgs::RobotMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xarm_msgs::RobotMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xarm_msgs::RobotMsg_<ContainerAllocator1> & lhs, const ::xarm_msgs::RobotMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state &&
    lhs.mode == rhs.mode &&
    lhs.cmdnum == rhs.cmdnum &&
    lhs.mt_brake == rhs.mt_brake &&
    lhs.mt_able == rhs.mt_able &&
    lhs.err == rhs.err &&
    lhs.warn == rhs.warn &&
    lhs.angle == rhs.angle &&
    lhs.pose == rhs.pose &&
    lhs.offset == rhs.offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xarm_msgs::RobotMsg_<ContainerAllocator1> & lhs, const ::xarm_msgs::RobotMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::RobotMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::RobotMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::RobotMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::RobotMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::RobotMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::RobotMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xarm_msgs::RobotMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b796af25d2a8912964fb162d2141ac39";
  }

  static const char* value(const ::xarm_msgs::RobotMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb796af25d2a89129ULL;
  static const uint64_t static_value2 = 0x64fb162d2141ac39ULL;
};

template<class ContainerAllocator>
struct DataType< ::xarm_msgs::RobotMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xarm_msgs/RobotMsg";
  }

  static const char* value(const ::xarm_msgs::RobotMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xarm_msgs::RobotMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# feedback information of the controlled robot\n"
"Header header\n"
"\n"
"# state of robot:\n"
"#	1: RUNNING, executing motion command.\n"
"#	2: SLEEPING, not in execution, but ready to move.\n"
"#	3: PAUSED, paused in the middle of unfinished motion.\n"
"#	4: STOPPED, not ready for any motion commands.\n"
"#	5: CONFIG_CHANGED, system configuration or mode changed, not ready for motion commands.\n"
"int16 state\n"
"\n"
"# mode of robot:\n"
"#	0 for POSITION mode.(position control by xarm controller box, execute api standard commands)\n"
"#	1 for SERVOJ mode. (Immediate execution towards received joint space target, like a step response)\n"
"#	2 for TEACHING_JOINT mode. (Gravity compensated mode, easy for teaching)\n"
"int16 mode\n"
"\n"
"# cmdnum: number of commands waiting in the buffer.\n"
"int16 cmdnum\n"
"\n"
"# mt_brake: if translated to binary digits, each bit represent one axis, 1 for brake enabled, 0 for brake disabled\n"
"int16 mt_brake\n"
"\n"
"# mt_able: if translated to binary digits, each bit represent one axis, 1 for servo control enabled, 0 for servo disabled\n"
"int16 mt_able\n"
"\n"
"# error code (if non-zero)\n"
"int16 err\n"
"\n"
"# warning code (if non-zero)\n"
"int16 warn\n"
"\n"
"# current joint angles expressed in radian.\n"
"float32[] angle\n"
"\n"
"# current TCP Cartesian position expressed in mm(position), radian(orientation)  \n"
"float32[6] pose\n"
"\n"
"# TCP offset from center of flange, with respect to tool frame.\n"
"float32[6] offset\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::xarm_msgs::RobotMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xarm_msgs::RobotMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
      stream.next(m.mode);
      stream.next(m.cmdnum);
      stream.next(m.mt_brake);
      stream.next(m.mt_able);
      stream.next(m.err);
      stream.next(m.warn);
      stream.next(m.angle);
      stream.next(m.pose);
      stream.next(m.offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xarm_msgs::RobotMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xarm_msgs::RobotMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.state);
    s << indent << "mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mode);
    s << indent << "cmdnum: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cmdnum);
    s << indent << "mt_brake: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mt_brake);
    s << indent << "mt_able: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mt_able);
    s << indent << "err: ";
    Printer<int16_t>::stream(s, indent + "  ", v.err);
    s << indent << "warn: ";
    Printer<int16_t>::stream(s, indent + "  ", v.warn);
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle[i]);
    }
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pose[i]);
    }
    s << indent << "offset[]" << std::endl;
    for (size_t i = 0; i < v.offset.size(); ++i)
    {
      s << indent << "  offset[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.offset[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // XARM_MSGS_MESSAGE_ROBOTMSG_H
