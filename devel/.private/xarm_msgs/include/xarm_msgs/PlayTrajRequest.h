// Generated by gencpp from file xarm_msgs/PlayTrajRequest.msg
// DO NOT EDIT!


#ifndef XARM_MSGS_MESSAGE_PLAYTRAJREQUEST_H
#define XARM_MSGS_MESSAGE_PLAYTRAJREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xarm_msgs
{
template <class ContainerAllocator>
struct PlayTrajRequest_
{
  typedef PlayTrajRequest_<ContainerAllocator> Type;

  PlayTrajRequest_()
    : traj_file()
    , repeat_times(0)
    , speed_factor(0)  {
    }
  PlayTrajRequest_(const ContainerAllocator& _alloc)
    : traj_file(_alloc)
    , repeat_times(0)
    , speed_factor(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _traj_file_type;
  _traj_file_type traj_file;

   typedef int16_t _repeat_times_type;
  _repeat_times_type repeat_times;

   typedef int16_t _speed_factor_type;
  _speed_factor_type speed_factor;





  typedef boost::shared_ptr< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PlayTrajRequest_

typedef ::xarm_msgs::PlayTrajRequest_<std::allocator<void> > PlayTrajRequest;

typedef boost::shared_ptr< ::xarm_msgs::PlayTrajRequest > PlayTrajRequestPtr;
typedef boost::shared_ptr< ::xarm_msgs::PlayTrajRequest const> PlayTrajRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xarm_msgs::PlayTrajRequest_<ContainerAllocator1> & lhs, const ::xarm_msgs::PlayTrajRequest_<ContainerAllocator2> & rhs)
{
  return lhs.traj_file == rhs.traj_file &&
    lhs.repeat_times == rhs.repeat_times &&
    lhs.speed_factor == rhs.speed_factor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xarm_msgs::PlayTrajRequest_<ContainerAllocator1> & lhs, const ::xarm_msgs::PlayTrajRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5cc25d7fcc3dc3c27c76051b595cd231";
  }

  static const char* value(const ::xarm_msgs::PlayTrajRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5cc25d7fcc3dc3c2ULL;
  static const uint64_t static_value2 = 0x7c76051b595cd231ULL;
};

template<class ContainerAllocator>
struct DataType< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xarm_msgs/PlayTrajRequest";
  }

  static const char* value(const ::xarm_msgs::PlayTrajRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# request: set multiple integer parameters.\n"
"# traj_file: file name of trajectory record, do not forget \".traj\" suffix\n"
"# repeat_times: how many times will be played\n"
"# speed_factor: supported values are 1 (original speed), 2 (2x speed), 4 (4x speed, not recommended). \n"
"\n"
"string traj_file\n"
"int16 repeat_times\n"
"int16 speed_factor\n"
"\n"
;
  }

  static const char* value(const ::xarm_msgs::PlayTrajRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.traj_file);
      stream.next(m.repeat_times);
      stream.next(m.speed_factor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlayTrajRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xarm_msgs::PlayTrajRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xarm_msgs::PlayTrajRequest_<ContainerAllocator>& v)
  {
    s << indent << "traj_file: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.traj_file);
    s << indent << "repeat_times: ";
    Printer<int16_t>::stream(s, indent + "  ", v.repeat_times);
    s << indent << "speed_factor: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed_factor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XARM_MSGS_MESSAGE_PLAYTRAJREQUEST_H
