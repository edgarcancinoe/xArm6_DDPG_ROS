// Generated by gencpp from file xarm_msgs/IOState.msg
// DO NOT EDIT!


#ifndef XARM_MSGS_MESSAGE_IOSTATE_H
#define XARM_MSGS_MESSAGE_IOSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xarm_msgs
{
template <class ContainerAllocator>
struct IOState_
{
  typedef IOState_<ContainerAllocator> Type;

  IOState_()
    : digital_1(0)
    , digital_2(0)
    , analog_1(0.0)
    , analog_2(0.0)  {
    }
  IOState_(const ContainerAllocator& _alloc)
    : digital_1(0)
    , digital_2(0)
    , analog_1(0.0)
    , analog_2(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _digital_1_type;
  _digital_1_type digital_1;

   typedef int32_t _digital_2_type;
  _digital_2_type digital_2;

   typedef float _analog_1_type;
  _analog_1_type analog_1;

   typedef float _analog_2_type;
  _analog_2_type analog_2;





  typedef boost::shared_ptr< ::xarm_msgs::IOState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xarm_msgs::IOState_<ContainerAllocator> const> ConstPtr;

}; // struct IOState_

typedef ::xarm_msgs::IOState_<std::allocator<void> > IOState;

typedef boost::shared_ptr< ::xarm_msgs::IOState > IOStatePtr;
typedef boost::shared_ptr< ::xarm_msgs::IOState const> IOStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xarm_msgs::IOState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xarm_msgs::IOState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xarm_msgs::IOState_<ContainerAllocator1> & lhs, const ::xarm_msgs::IOState_<ContainerAllocator2> & rhs)
{
  return lhs.digital_1 == rhs.digital_1 &&
    lhs.digital_2 == rhs.digital_2 &&
    lhs.analog_1 == rhs.analog_1 &&
    lhs.analog_2 == rhs.analog_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xarm_msgs::IOState_<ContainerAllocator1> & lhs, const ::xarm_msgs::IOState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::IOState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::IOState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::IOState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::IOState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::IOState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::IOState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xarm_msgs::IOState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf35d5117b3f1964a89d007e947ecbee";
  }

  static const char* value(const ::xarm_msgs::IOState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf35d5117b3f1964ULL;
  static const uint64_t static_value2 = 0xa89d007e947ecbeeULL;
};

template<class ContainerAllocator>
struct DataType< ::xarm_msgs::IOState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xarm_msgs/IOState";
  }

  static const char* value(const ::xarm_msgs::IOState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xarm_msgs::IOState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# for indicating 2 digital and 2 analog Input port state\n"
"\n"
"int32 digital_1\n"
"\n"
"int32 digital_2\n"
"\n"
"float32 analog_1\n"
"\n"
"float32 analog_2\n"
;
  }

  static const char* value(const ::xarm_msgs::IOState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xarm_msgs::IOState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.digital_1);
      stream.next(m.digital_2);
      stream.next(m.analog_1);
      stream.next(m.analog_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IOState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xarm_msgs::IOState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xarm_msgs::IOState_<ContainerAllocator>& v)
  {
    s << indent << "digital_1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.digital_1);
    s << indent << "digital_2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.digital_2);
    s << indent << "analog_1: ";
    Printer<float>::stream(s, indent + "  ", v.analog_1);
    s << indent << "analog_2: ";
    Printer<float>::stream(s, indent + "  ", v.analog_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XARM_MSGS_MESSAGE_IOSTATE_H
