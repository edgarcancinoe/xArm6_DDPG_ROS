// Generated by gencpp from file xarm_msgs/SetModbusTimeoutRequest.msg
// DO NOT EDIT!


#ifndef XARM_MSGS_MESSAGE_SETMODBUSTIMEOUTREQUEST_H
#define XARM_MSGS_MESSAGE_SETMODBUSTIMEOUTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xarm_msgs
{
template <class ContainerAllocator>
struct SetModbusTimeoutRequest_
{
  typedef SetModbusTimeoutRequest_<ContainerAllocator> Type;

  SetModbusTimeoutRequest_()
    : timeout_ms(0)
    , is_transparent_transmission(false)  {
    }
  SetModbusTimeoutRequest_(const ContainerAllocator& _alloc)
    : timeout_ms(0)
    , is_transparent_transmission(false)  {
  (void)_alloc;
    }



   typedef int32_t _timeout_ms_type;
  _timeout_ms_type timeout_ms;

   typedef uint8_t _is_transparent_transmission_type;
  _is_transparent_transmission_type is_transparent_transmission;





  typedef boost::shared_ptr< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetModbusTimeoutRequest_

typedef ::xarm_msgs::SetModbusTimeoutRequest_<std::allocator<void> > SetModbusTimeoutRequest;

typedef boost::shared_ptr< ::xarm_msgs::SetModbusTimeoutRequest > SetModbusTimeoutRequestPtr;
typedef boost::shared_ptr< ::xarm_msgs::SetModbusTimeoutRequest const> SetModbusTimeoutRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator1> & lhs, const ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator2> & rhs)
{
  return lhs.timeout_ms == rhs.timeout_ms &&
    lhs.is_transparent_transmission == rhs.is_transparent_transmission;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator1> & lhs, const ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac346b12c265f37a4849a9684c07403b";
  }

  static const char* value(const ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac346b12c265f37aULL;
  static const uint64_t static_value2 = 0x4849a9684c07403bULL;
};

template<class ContainerAllocator>
struct DataType< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xarm_msgs/SetModbusTimeoutRequest";
  }

  static const char* value(const ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# configure the timeout parameter in modbus communication, in milliseconds\n"
"int32 timeout_ms\n"
"\n"
"# whether the set timeout is the timeout of transparent transmission\n"
"bool is_transparent_transmission\n"
"\n"
;
  }

  static const char* value(const ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeout_ms);
      stream.next(m.is_transparent_transmission);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetModbusTimeoutRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xarm_msgs::SetModbusTimeoutRequest_<ContainerAllocator>& v)
  {
    s << indent << "timeout_ms: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timeout_ms);
    s << indent << "is_transparent_transmission: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_transparent_transmission);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XARM_MSGS_MESSAGE_SETMODBUSTIMEOUTREQUEST_H
