// Generated by gencpp from file xarm_msgs/SetStringRequest.msg
// DO NOT EDIT!


#ifndef XARM_MSGS_MESSAGE_SETSTRINGREQUEST_H
#define XARM_MSGS_MESSAGE_SETSTRINGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xarm_msgs
{
template <class ContainerAllocator>
struct SetStringRequest_
{
  typedef SetStringRequest_<ContainerAllocator> Type;

  SetStringRequest_()
    : str_data()
    , timeout(0.0)  {
    }
  SetStringRequest_(const ContainerAllocator& _alloc)
    : str_data(_alloc)
    , timeout(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _str_data_type;
  _str_data_type str_data;

   typedef float _timeout_type;
  _timeout_type timeout;





  typedef boost::shared_ptr< ::xarm_msgs::SetStringRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xarm_msgs::SetStringRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetStringRequest_

typedef ::xarm_msgs::SetStringRequest_<std::allocator<void> > SetStringRequest;

typedef boost::shared_ptr< ::xarm_msgs::SetStringRequest > SetStringRequestPtr;
typedef boost::shared_ptr< ::xarm_msgs::SetStringRequest const> SetStringRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xarm_msgs::SetStringRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xarm_msgs::SetStringRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xarm_msgs::SetStringRequest_<ContainerAllocator1> & lhs, const ::xarm_msgs::SetStringRequest_<ContainerAllocator2> & rhs)
{
  return lhs.str_data == rhs.str_data &&
    lhs.timeout == rhs.timeout;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xarm_msgs::SetStringRequest_<ContainerAllocator1> & lhs, const ::xarm_msgs::SetStringRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::SetStringRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::SetStringRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::SetStringRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::SetStringRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::SetStringRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::SetStringRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xarm_msgs::SetStringRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71b1f2382dc64280861b19494c3b7442";
  }

  static const char* value(const ::xarm_msgs::SetStringRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71b1f2382dc64280ULL;
  static const uint64_t static_value2 = 0x861b19494c3b7442ULL;
};

template<class ContainerAllocator>
struct DataType< ::xarm_msgs::SetStringRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xarm_msgs/SetStringRequest";
  }

  static const char* value(const ::xarm_msgs::SetStringRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xarm_msgs::SetStringRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# request: set string command parameters.\n"
"# str_data: string parameter to be set.\n"
"\n"
"string str_data\n"
"float32 timeout\n"
"\n"
;
  }

  static const char* value(const ::xarm_msgs::SetStringRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xarm_msgs::SetStringRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.str_data);
      stream.next(m.timeout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetStringRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xarm_msgs::SetStringRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xarm_msgs::SetStringRequest_<ContainerAllocator>& v)
  {
    s << indent << "str_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.str_data);
    s << indent << "timeout: ";
    Printer<float>::stream(s, indent + "  ", v.timeout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XARM_MSGS_MESSAGE_SETSTRINGREQUEST_H
