// Generated by gencpp from file xarm_msgs/SetAxisRequest.msg
// DO NOT EDIT!


#ifndef XARM_MSGS_MESSAGE_SETAXISREQUEST_H
#define XARM_MSGS_MESSAGE_SETAXISREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xarm_msgs
{
template <class ContainerAllocator>
struct SetAxisRequest_
{
  typedef SetAxisRequest_<ContainerAllocator> Type;

  SetAxisRequest_()
    : id(0)
    , data(0)  {
    }
  SetAxisRequest_(const ContainerAllocator& _alloc)
    : id(0)
    , data(0)  {
  (void)_alloc;
    }



   typedef int16_t _id_type;
  _id_type id;

   typedef int16_t _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetAxisRequest_

typedef ::xarm_msgs::SetAxisRequest_<std::allocator<void> > SetAxisRequest;

typedef boost::shared_ptr< ::xarm_msgs::SetAxisRequest > SetAxisRequestPtr;
typedef boost::shared_ptr< ::xarm_msgs::SetAxisRequest const> SetAxisRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xarm_msgs::SetAxisRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xarm_msgs::SetAxisRequest_<ContainerAllocator1> & lhs, const ::xarm_msgs::SetAxisRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xarm_msgs::SetAxisRequest_<ContainerAllocator1> & lhs, const ::xarm_msgs::SetAxisRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e3ee600c6466350afbb8370fe28c9ca";
  }

  static const char* value(const ::xarm_msgs::SetAxisRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e3ee600c6466350ULL;
  static const uint64_t static_value2 = 0xafbb8370fe28c9caULL;
};

template<class ContainerAllocator>
struct DataType< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xarm_msgs/SetAxisRequest";
  }

  static const char* value(const ::xarm_msgs::SetAxisRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# request: for enabling / disabling motion control of one(or all) joint.\n"
"# id: 1-7 for target joint number, or 8 for all joints\n"
"# data: 0 for disabling servo control, 1 for enabling servo control.\n"
"\n"
"int16 id\n"
"int16 data\n"
"\n"
;
  }

  static const char* value(const ::xarm_msgs::SetAxisRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetAxisRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xarm_msgs::SetAxisRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xarm_msgs::SetAxisRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "data: ";
    Printer<int16_t>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XARM_MSGS_MESSAGE_SETAXISREQUEST_H
