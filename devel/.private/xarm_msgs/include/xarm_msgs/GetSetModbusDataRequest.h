// Generated by gencpp from file xarm_msgs/GetSetModbusDataRequest.msg
// DO NOT EDIT!


#ifndef XARM_MSGS_MESSAGE_GETSETMODBUSDATAREQUEST_H
#define XARM_MSGS_MESSAGE_GETSETMODBUSDATAREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xarm_msgs
{
template <class ContainerAllocator>
struct GetSetModbusDataRequest_
{
  typedef GetSetModbusDataRequest_<ContainerAllocator> Type;

  GetSetModbusDataRequest_()
    : send_data()
    , respond_len(0)
    , host_id(0)
    , is_transparent_transmission(false)
    , use_503_port(false)  {
    }
  GetSetModbusDataRequest_(const ContainerAllocator& _alloc)
    : send_data(_alloc)
    , respond_len(0)
    , host_id(0)
    , is_transparent_transmission(false)
    , use_503_port(false)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _send_data_type;
  _send_data_type send_data;

   typedef int16_t _respond_len_type;
  _respond_len_type respond_len;

   typedef uint8_t _host_id_type;
  _host_id_type host_id;

   typedef uint8_t _is_transparent_transmission_type;
  _is_transparent_transmission_type is_transparent_transmission;

   typedef uint8_t _use_503_port_type;
  _use_503_port_type use_503_port;





  typedef boost::shared_ptr< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetSetModbusDataRequest_

typedef ::xarm_msgs::GetSetModbusDataRequest_<std::allocator<void> > GetSetModbusDataRequest;

typedef boost::shared_ptr< ::xarm_msgs::GetSetModbusDataRequest > GetSetModbusDataRequestPtr;
typedef boost::shared_ptr< ::xarm_msgs::GetSetModbusDataRequest const> GetSetModbusDataRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator1> & lhs, const ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator2> & rhs)
{
  return lhs.send_data == rhs.send_data &&
    lhs.respond_len == rhs.respond_len &&
    lhs.host_id == rhs.host_id &&
    lhs.is_transparent_transmission == rhs.is_transparent_transmission &&
    lhs.use_503_port == rhs.use_503_port;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator1> & lhs, const ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0df4146f0963d1cf15d364518c202d50";
  }

  static const char* value(const ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0df4146f0963d1cfULL;
  static const uint64_t static_value2 = 0x15d364518c202d50ULL;
};

template<class ContainerAllocator>
struct DataType< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xarm_msgs/GetSetModbusDataRequest";
  }

  static const char* value(const ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# unsigned char data to be sent to tool device through modbus\n"
"uint8[] send_data\n"
"\n"
"# Specify the anticipated maximum respond data length in bytes\n"
"int16 respond_len\n"
"\n"
"# host id, 9: END RS485, 10: Controller RS485\n"
"uint8 host_id\n"
"\n"
"# whether to choose transparent transmission\n"
"bool is_transparent_transmission\n"
"\n"
"# whether to use port 503 for communication\n"
"# if it is true, it will connect to 503 port for communication when it is used for the first time, which is generally only useful for transparent transmission\n"
"bool use_503_port\n"
"\n"
;
  }

  static const char* value(const ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.send_data);
      stream.next(m.respond_len);
      stream.next(m.host_id);
      stream.next(m.is_transparent_transmission);
      stream.next(m.use_503_port);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetSetModbusDataRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xarm_msgs::GetSetModbusDataRequest_<ContainerAllocator>& v)
  {
    s << indent << "send_data[]" << std::endl;
    for (size_t i = 0; i < v.send_data.size(); ++i)
    {
      s << indent << "  send_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.send_data[i]);
    }
    s << indent << "respond_len: ";
    Printer<int16_t>::stream(s, indent + "  ", v.respond_len);
    s << indent << "host_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.host_id);
    s << indent << "is_transparent_transmission: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_transparent_transmission);
    s << indent << "use_503_port: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_503_port);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XARM_MSGS_MESSAGE_GETSETMODBUSDATAREQUEST_H
