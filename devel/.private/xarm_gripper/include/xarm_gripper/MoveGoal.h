// Generated by gencpp from file xarm_gripper/MoveGoal.msg
// DO NOT EDIT!


#ifndef XARM_GRIPPER_MESSAGE_MOVEGOAL_H
#define XARM_GRIPPER_MESSAGE_MOVEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xarm_gripper
{
template <class ContainerAllocator>
struct MoveGoal_
{
  typedef MoveGoal_<ContainerAllocator> Type;

  MoveGoal_()
    : target_pulse(0.0)
    , pulse_speed(0.0)  {
    }
  MoveGoal_(const ContainerAllocator& _alloc)
    : target_pulse(0.0)
    , pulse_speed(0.0)  {
  (void)_alloc;
    }



   typedef float _target_pulse_type;
  _target_pulse_type target_pulse;

   typedef float _pulse_speed_type;
  _pulse_speed_type pulse_speed;





  typedef boost::shared_ptr< ::xarm_gripper::MoveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xarm_gripper::MoveGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MoveGoal_

typedef ::xarm_gripper::MoveGoal_<std::allocator<void> > MoveGoal;

typedef boost::shared_ptr< ::xarm_gripper::MoveGoal > MoveGoalPtr;
typedef boost::shared_ptr< ::xarm_gripper::MoveGoal const> MoveGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xarm_gripper::MoveGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xarm_gripper::MoveGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xarm_gripper::MoveGoal_<ContainerAllocator1> & lhs, const ::xarm_gripper::MoveGoal_<ContainerAllocator2> & rhs)
{
  return lhs.target_pulse == rhs.target_pulse &&
    lhs.pulse_speed == rhs.pulse_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xarm_gripper::MoveGoal_<ContainerAllocator1> & lhs, const ::xarm_gripper::MoveGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xarm_gripper

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xarm_gripper::MoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xarm_gripper::MoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_gripper::MoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_gripper::MoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_gripper::MoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_gripper::MoveGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xarm_gripper::MoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6814055eb1aabbec6940b763f67eadb";
  }

  static const char* value(const ::xarm_gripper::MoveGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6814055eb1aabbeULL;
  static const uint64_t static_value2 = 0xc6940b763f67eadbULL;
};

template<class ContainerAllocator>
struct DataType< ::xarm_gripper::MoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xarm_gripper/MoveGoal";
  }

  static const char* value(const ::xarm_gripper::MoveGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xarm_gripper::MoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"float32 target_pulse\n"
"\n"
"float32 pulse_speed\n"
"\n"
;
  }

  static const char* value(const ::xarm_gripper::MoveGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xarm_gripper::MoveGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_pulse);
      stream.next(m.pulse_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xarm_gripper::MoveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xarm_gripper::MoveGoal_<ContainerAllocator>& v)
  {
    s << indent << "target_pulse: ";
    Printer<float>::stream(s, indent + "  ", v.target_pulse);
    s << indent << "pulse_speed: ";
    Printer<float>::stream(s, indent + "  ", v.pulse_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XARM_GRIPPER_MESSAGE_MOVEGOAL_H
